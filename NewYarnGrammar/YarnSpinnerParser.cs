//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/desplesda/Work/yarnspinner/NewYarnGrammar/YarnSpinnerParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class YarnSpinnerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NEWLINE=2, ID=3, BODY_START=4, HEADER_DELIMITER=5, HASHTAG=6, REST_OF_LINE=7, 
		HEADER_NEWLINE=8, COMMENT=9, BODY_WS=10, BODY_COMMENT=11, BODY_END=12, 
		INDENT=13, DEDENT=14, SHORTCUT_ARROW=15, COMMAND_START=16, OPTION_START=17, 
		BODY_HASHTAG=18, TEXT_NEWLINE=19, TEXT_HASHTAG=20, TEXT_EXPRESSION_START=21, 
		TEXT=22, HASHTAG_WS=23, HASHTAG_COMMENT=24, HASHTAG_TAG=25, HASHTAG_NEWLINE=26, 
		HASHTAG_COMMAND_START=27, HASHTAG_TEXT=28, EXPR_WS=29, KEYWORD_TRUE=30, 
		KEYWORD_FALSE=31, KEYWORD_NULL=32, OPERATOR_ASSIGNMENT=33, OPERATOR_LOGICAL_LESS_THAN_EQUALS=34, 
		OPERATOR_LOGICAL_GREATER_THAN_EQUALS=35, OPERATOR_LOGICAL_EQUALS=36, OPERATOR_LOGICAL_LESS=37, 
		OPERATOR_LOGICAL_GREATER=38, OPERATOR_LOGICAL_NOT_EQUALS=39, OPERATOR_LOGICAL_AND=40, 
		OPERATOR_LOGICAL_OR=41, OPERATOR_LOGICAL_XOR=42, OPERATOR_LOGICAL_NOT=43, 
		OPERATOR_MATHS_ADDITION_EQUALS=44, OPERATOR_MATHS_SUBTRACTION_EQUALS=45, 
		OPERATOR_MATHS_MULTIPLICATION_EQUALS=46, OPERATOR_MATHS_MODULUS_EQUALS=47, 
		OPERATOR_MATHS_DIVISION_EQUALS=48, OPERATOR_MATHS_ADDITION=49, OPERATOR_MATHS_SUBTRACTION=50, 
		OPERATOR_MATHS_MULTIPLICATION=51, OPERATOR_MATHS_DIVISION=52, OPERATOR_MATHS_MODULUS=53, 
		LPAREN=54, RPAREN=55, COMMA=56, STRING=57, FUNC_ID=58, EXPRESSION_END=59, 
		EXPRESSION_COMMAND_END=60, VAR_ID=61, NUMBER=62, COMMAND_WS=63, COMMAND_IF=64, 
		COMMAND_ELSEIF=65, COMMAND_ELSE=66, COMMAND_SET=67, COMMAND_ENDIF=68, 
		COMMAND_END=69, COMMAND_TEXT_END=70, COMMAND_EXPRESSION_START=71, COMMAND_TEXT=72, 
		OPTION_NEWLINE=73, OPTION_WS=74, OPTION_END=75, OPTION_HASHTAG=76, OPTION_DELIMIT=77, 
		OPTION_EXPRESSION_START=78, OPTION_TEXT=79, OPTION_ID_WS=80, OPTION_ID=81;
	public const int
		RULE_dialogue = 0, RULE_file_hashtag = 1, RULE_node = 2, RULE_header = 3, 
		RULE_statement = 4, RULE_line_statement = 5, RULE_hashtag = 6, RULE_line_condition = 7, 
		RULE_expression = 8, RULE_value = 9, RULE_variable = 10, RULE_function = 11, 
		RULE_if_statement = 12, RULE_set_statement = 13, RULE_command_statement = 14, 
		RULE_shortcut_option_statement = 15, RULE_shortcut_option = 16, RULE_option_statement = 17, 
		RULE_option_formatted_text = 18;
	public static readonly string[] ruleNames = {
		"dialogue", "file_hashtag", "node", "header", "statement", "line_statement", 
		"hashtag", "line_condition", "expression", "value", "variable", "function", 
		"if_statement", "set_statement", "command_statement", "shortcut_option_statement", 
		"shortcut_option", "option_statement", "option_formatted_text"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'---'", null, null, null, null, null, null, null, 
		"'==='", "'INDENT'", "'DEDENT'", "'->'", null, "'[['", null, null, null, 
		null, null, null, null, null, null, null, null, null, "'true'", "'false'", 
		"'null'", null, null, null, null, null, null, null, null, null, null, 
		null, "'+='", "'-='", "'*='", "'%='", "'/='", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'('", "')'", "','", null, null, "'}'", null, null, null, null, 
		null, null, null, null, "'endif'", null, null, null, null, null, null, 
		"']]'", null, "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "ID", "BODY_START", "HEADER_DELIMITER", "HASHTAG", 
		"REST_OF_LINE", "HEADER_NEWLINE", "COMMENT", "BODY_WS", "BODY_COMMENT", 
		"BODY_END", "INDENT", "DEDENT", "SHORTCUT_ARROW", "COMMAND_START", "OPTION_START", 
		"BODY_HASHTAG", "TEXT_NEWLINE", "TEXT_HASHTAG", "TEXT_EXPRESSION_START", 
		"TEXT", "HASHTAG_WS", "HASHTAG_COMMENT", "HASHTAG_TAG", "HASHTAG_NEWLINE", 
		"HASHTAG_COMMAND_START", "HASHTAG_TEXT", "EXPR_WS", "KEYWORD_TRUE", "KEYWORD_FALSE", 
		"KEYWORD_NULL", "OPERATOR_ASSIGNMENT", "OPERATOR_LOGICAL_LESS_THAN_EQUALS", 
		"OPERATOR_LOGICAL_GREATER_THAN_EQUALS", "OPERATOR_LOGICAL_EQUALS", "OPERATOR_LOGICAL_LESS", 
		"OPERATOR_LOGICAL_GREATER", "OPERATOR_LOGICAL_NOT_EQUALS", "OPERATOR_LOGICAL_AND", 
		"OPERATOR_LOGICAL_OR", "OPERATOR_LOGICAL_XOR", "OPERATOR_LOGICAL_NOT", 
		"OPERATOR_MATHS_ADDITION_EQUALS", "OPERATOR_MATHS_SUBTRACTION_EQUALS", 
		"OPERATOR_MATHS_MULTIPLICATION_EQUALS", "OPERATOR_MATHS_MODULUS_EQUALS", 
		"OPERATOR_MATHS_DIVISION_EQUALS", "OPERATOR_MATHS_ADDITION", "OPERATOR_MATHS_SUBTRACTION", 
		"OPERATOR_MATHS_MULTIPLICATION", "OPERATOR_MATHS_DIVISION", "OPERATOR_MATHS_MODULUS", 
		"LPAREN", "RPAREN", "COMMA", "STRING", "FUNC_ID", "EXPRESSION_END", "EXPRESSION_COMMAND_END", 
		"VAR_ID", "NUMBER", "COMMAND_WS", "COMMAND_IF", "COMMAND_ELSEIF", "COMMAND_ELSE", 
		"COMMAND_SET", "COMMAND_ENDIF", "COMMAND_END", "COMMAND_TEXT_END", "COMMAND_EXPRESSION_START", 
		"COMMAND_TEXT", "OPTION_NEWLINE", "OPTION_WS", "OPTION_END", "OPTION_HASHTAG", 
		"OPTION_DELIMIT", "OPTION_EXPRESSION_START", "OPTION_TEXT", "OPTION_ID_WS", 
		"OPTION_ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YarnSpinnerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static YarnSpinnerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YarnSpinnerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YarnSpinnerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DialogueContext : ParserRuleContext {
		public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		public File_hashtagContext[] file_hashtag() {
			return GetRuleContexts<File_hashtagContext>();
		}
		public File_hashtagContext file_hashtag(int i) {
			return GetRuleContext<File_hashtagContext>(i);
		}
		public DialogueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDialogue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDialogue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueContext dialogue() {
		DialogueContext _localctx = new DialogueContext(Context, State);
		EnterRule(_localctx, 0, RULE_dialogue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 38; file_hashtag();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 44; node();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_hashtagContext : ParserRuleContext {
		public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public ITerminalNode HASHTAG_NEWLINE() { return GetToken(YarnSpinnerParser.HASHTAG_NEWLINE, 0); }
		public File_hashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_hashtag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFile_hashtag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFile_hashtag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_hashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_hashtagContext file_hashtag() {
		File_hashtagContext _localctx = new File_hashtagContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(HASHTAG);
			State = 50; Match(HASHTAG_TEXT);
			State = 51; Match(HASHTAG_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		public ITerminalNode BODY_START() { return GetToken(YarnSpinnerParser.BODY_START, 0); }
		public ITerminalNode BODY_END() { return GetToken(YarnSpinnerParser.BODY_END, 0); }
		public HeaderContext[] header() {
			return GetRuleContexts<HeaderContext>();
		}
		public HeaderContext header(int i) {
			return GetRuleContext<HeaderContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_node);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 53; header();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 58; Match(BODY_START);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << INDENT) | (1L << SHORTCUT_ARROW) | (1L << COMMAND_START) | (1L << OPTION_START) | (1L << TEXT_NEWLINE) | (1L << TEXT_HASHTAG) | (1L << TEXT_EXPRESSION_START) | (1L << TEXT) | (1L << HASHTAG_TAG) | (1L << HASHTAG_NEWLINE) | (1L << HASHTAG_COMMAND_START))) != 0) || _la==OPTION_HASHTAG) {
				{
				{
				State = 59; statement();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public IToken header_key;
		public IToken header_value;
		public ITerminalNode HEADER_DELIMITER() { return GetToken(YarnSpinnerParser.HEADER_DELIMITER, 0); }
		public ITerminalNode HEADER_NEWLINE() { return GetToken(YarnSpinnerParser.HEADER_NEWLINE, 0); }
		public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		public ITerminalNode REST_OF_LINE() { return GetToken(YarnSpinnerParser.REST_OF_LINE, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 6, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; _localctx.header_key = Match(ID);
			State = 68; Match(HEADER_DELIMITER);
			State = 69; _localctx.header_value = Match(REST_OF_LINE);
			State = 70; Match(HEADER_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Option_statementContext option_statement() {
			return GetRuleContext<Option_statementContext>(0);
		}
		public Shortcut_option_statementContext shortcut_option_statement() {
			return GetRuleContext<Shortcut_option_statementContext>(0);
		}
		public Command_statementContext command_statement() {
			return GetRuleContext<Command_statementContext>(0);
		}
		public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; line_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; if_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74; set_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 75; option_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76; shortcut_option_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 77; command_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 78; Match(INDENT);
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << INDENT) | (1L << SHORTCUT_ARROW) | (1L << COMMAND_START) | (1L << OPTION_START) | (1L << TEXT_NEWLINE) | (1L << TEXT_HASHTAG) | (1L << TEXT_EXPRESSION_START) | (1L << TEXT) | (1L << HASHTAG_TAG) | (1L << HASHTAG_NEWLINE) | (1L << HASHTAG_COMMAND_START))) != 0) || _la==OPTION_HASHTAG) {
					{
					{
					State = 79; statement();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85; Match(DEDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_statementContext : ParserRuleContext {
		public ITerminalNode TEXT_NEWLINE() { return GetToken(YarnSpinnerParser.TEXT_NEWLINE, 0); }
		public ITerminalNode HASHTAG_NEWLINE() { return GetToken(YarnSpinnerParser.HASHTAG_NEWLINE, 0); }
		public ITerminalNode[] TEXT() { return GetTokens(YarnSpinnerParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(YarnSpinnerParser.TEXT, i);
		}
		public ITerminalNode[] TEXT_EXPRESSION_START() { return GetTokens(YarnSpinnerParser.TEXT_EXPRESSION_START); }
		public ITerminalNode TEXT_EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.TEXT_EXPRESSION_START, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Line_conditionContext[] line_condition() {
			return GetRuleContexts<Line_conditionContext>();
		}
		public Line_conditionContext line_condition(int i) {
			return GetRuleContext<Line_conditionContext>(i);
		}
		public Line_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_statementContext line_statement() {
		Line_statementContext _localctx = new Line_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_line_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT_EXPRESSION_START || _la==TEXT) {
				{
				State = 93;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 88; Match(TEXT);
					}
					break;
				case TEXT_EXPRESSION_START:
					{
					State = 89; Match(TEXT_EXPRESSION_START);
					State = 90; expression(0);
					State = 91; Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << TEXT_HASHTAG) | (1L << HASHTAG_TAG) | (1L << HASHTAG_COMMAND_START))) != 0) || _la==OPTION_HASHTAG) {
				{
				State = 100;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HASHTAG:
				case TEXT_HASHTAG:
				case HASHTAG_TAG:
				case OPTION_HASHTAG:
					{
					State = 98; hashtag();
					}
					break;
				case HASHTAG_COMMAND_START:
					{
					State = 99; line_condition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 105;
			_la = TokenStream.LA(1);
			if ( !(_la==TEXT_NEWLINE || _la==HASHTAG_NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashtagContext : ParserRuleContext {
		public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public ITerminalNode TEXT_HASHTAG() { return GetToken(YarnSpinnerParser.TEXT_HASHTAG, 0); }
		public ITerminalNode HASHTAG_TAG() { return GetToken(YarnSpinnerParser.HASHTAG_TAG, 0); }
		public ITerminalNode OPTION_HASHTAG() { return GetToken(YarnSpinnerParser.OPTION_HASHTAG, 0); }
		public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		public HashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hashtag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHashtag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHashtag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HashtagContext hashtag() {
		HashtagContext _localctx = new HashtagContext(Context, State);
		EnterRule(_localctx, 12, RULE_hashtag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << TEXT_HASHTAG) | (1L << HASHTAG_TAG))) != 0) || _la==OPTION_HASHTAG) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 108; Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_conditionContext : ParserRuleContext {
		public ITerminalNode HASHTAG_COMMAND_START() { return GetToken(YarnSpinnerParser.HASHTAG_COMMAND_START, 0); }
		public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXPRESSION_COMMAND_END() { return GetToken(YarnSpinnerParser.EXPRESSION_COMMAND_END, 0); }
		public Line_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_conditionContext line_condition() {
		Line_conditionContext _localctx = new Line_conditionContext(Context, State);
		EnterRule(_localctx, 14, RULE_line_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(HASHTAG_COMMAND_START);
			State = 111; Match(COMMAND_IF);
			State = 112; expression(0);
			State = 113; Match(EXPRESSION_COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpParensContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMultDivModContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpMultDivModContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpMultDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpMultDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMultDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMultDivModEqualsContext : ExpressionContext {
		public IToken op;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpMultDivModEqualsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpMultDivModEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpMultDivModEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMultDivModEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpComparisonContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_LOGICAL_LESS_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS_THAN_EQUALS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_GREATER_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER_THAN_EQUALS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_LESS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_GREATER() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER, 0); }
		public ExpComparisonContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNegativeContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpNegativeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNegative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNegative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAndOrXorContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_LOGICAL_AND() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_AND, 0); }
		public ITerminalNode OPERATOR_LOGICAL_OR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_OR, 0); }
		public ITerminalNode OPERATOR_LOGICAL_XOR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_XOR, 0); }
		public ExpAndOrXorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAndOrXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAndOrXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAndOrXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpPlusMinusEqualsContext : ExpressionContext {
		public IToken op;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpPlusMinusEqualsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpPlusMinusEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpPlusMinusEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpPlusMinusEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNotContext : ExpressionContext {
		public ITerminalNode OPERATOR_LOGICAL_NOT() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpNotContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpValueContext : ExpressionContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpEqualityContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_LOGICAL_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_EQUALS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_NOT_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT_EQUALS, 0); }
		public ExpEqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new ExpParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 116; Match(LPAREN);
				State = 117; expression(0);
				State = 118; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new ExpNegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120; Match(OPERATOR_MATHS_SUBTRACTION);
				State = 121; expression(10);
				}
				break;
			case 3:
				{
				_localctx = new ExpNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 122; Match(OPERATOR_LOGICAL_NOT);
				State = 123; expression(9);
				}
				break;
			case 4:
				{
				_localctx = new ExpMultDivModEqualsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124; variable();
				State = 125;
				((ExpMultDivModEqualsContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_MATHS_MULTIPLICATION_EQUALS) | (1L << OPERATOR_MATHS_MODULUS_EQUALS) | (1L << OPERATOR_MATHS_DIVISION_EQUALS))) != 0)) ) {
					((ExpMultDivModEqualsContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 126; expression(4);
				}
				break;
			case 5:
				{
				_localctx = new ExpPlusMinusEqualsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 128; variable();
				State = 129;
				((ExpPlusMinusEqualsContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OPERATOR_MATHS_ADDITION_EQUALS || _la==OPERATOR_MATHS_SUBTRACTION_EQUALS) ) {
					((ExpPlusMinusEqualsContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 130; expression(3);
				}
				break;
			case 6:
				{
				_localctx = new ExpValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 132; value();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 150;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ExpMultDivModContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 136;
						((ExpMultDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_MATHS_MULTIPLICATION) | (1L << OPERATOR_MATHS_DIVISION) | (1L << OPERATOR_MATHS_MODULUS))) != 0)) ) {
							((ExpMultDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 137; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 138;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 139;
						((ExpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_MATHS_ADDITION || _la==OPERATOR_MATHS_SUBTRACTION) ) {
							((ExpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 140; expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 141;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 142;
						((ExpComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_LOGICAL_LESS_THAN_EQUALS) | (1L << OPERATOR_LOGICAL_GREATER_THAN_EQUALS) | (1L << OPERATOR_LOGICAL_LESS) | (1L << OPERATOR_LOGICAL_GREATER))) != 0)) ) {
							((ExpComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 143; expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpEqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 144;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 145;
						((ExpEqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_LOGICAL_EQUALS || _la==OPERATOR_LOGICAL_NOT_EQUALS) ) {
							((ExpEqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 146; expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpAndOrXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 148;
						((ExpAndOrXorContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_LOGICAL_AND) | (1L << OPERATOR_LOGICAL_OR) | (1L << OPERATOR_LOGICAL_XOR))) != 0)) ) {
							((ExpAndOrXorContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 149; expression(3);
						}
						break;
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueNullContext : ValueContext {
		public ITerminalNode KEYWORD_NULL() { return GetToken(YarnSpinnerParser.KEYWORD_NULL, 0); }
		public ValueNullContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueNumberContext : ValueContext {
		public ITerminalNode NUMBER() { return GetToken(YarnSpinnerParser.NUMBER, 0); }
		public ValueNumberContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		public ITerminalNode KEYWORD_TRUE() { return GetToken(YarnSpinnerParser.KEYWORD_TRUE, 0); }
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		public ITerminalNode KEYWORD_FALSE() { return GetToken(YarnSpinnerParser.KEYWORD_FALSE, 0); }
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFuncContext : ValueContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ValueFuncContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueVarContext : ValueContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueVarContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		public ITerminalNode STRING() { return GetToken(YarnSpinnerParser.STRING, 0); }
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_value);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; Match(NUMBER);
				}
				break;
			case KEYWORD_TRUE:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; Match(KEYWORD_TRUE);
				}
				break;
			case KEYWORD_FALSE:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 157; Match(KEYWORD_FALSE);
				}
				break;
			case VAR_ID:
				_localctx = new ValueVarContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 158; variable();
				}
				break;
			case STRING:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 159; Match(STRING);
				}
				break;
			case KEYWORD_NULL:
				_localctx = new ValueNullContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 160; Match(KEYWORD_NULL);
				}
				break;
			case FUNC_ID:
				_localctx = new ValueFuncContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 161; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VAR_ID() { return GetToken(YarnSpinnerParser.VAR_ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(VAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(YarnSpinnerParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(YarnSpinnerParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 22, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(FUNC_ID);
			State = 167; Match(LPAREN);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KEYWORD_TRUE) | (1L << KEYWORD_FALSE) | (1L << KEYWORD_NULL) | (1L << OPERATOR_LOGICAL_NOT) | (1L << OPERATOR_MATHS_SUBTRACTION) | (1L << LPAREN) | (1L << STRING) | (1L << FUNC_ID) | (1L << VAR_ID) | (1L << NUMBER))) != 0)) {
				{
				State = 168; expression(0);
				}
			}

			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 171; Match(COMMA);
				State = 172; expression(0);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ExpressionContext if_clause;
		public StatementContext if_clause_statements;
		public ExpressionContext elseif_clause;
		public StatementContext elseif_clause_statements;
		public StatementContext else_clause_statements;
		public ITerminalNode[] COMMAND_START() { return GetTokens(YarnSpinnerParser.COMMAND_START); }
		public ITerminalNode COMMAND_START(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_START, i);
		}
		public ITerminalNode COMMAND_ENDIF() { return GetToken(YarnSpinnerParser.COMMAND_ENDIF, 0); }
		public ITerminalNode[] COMMAND_END() { return GetTokens(YarnSpinnerParser.COMMAND_END); }
		public ITerminalNode COMMAND_END(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_END, i);
		}
		public ITerminalNode[] COMMAND_ELSEIF() { return GetTokens(YarnSpinnerParser.COMMAND_ELSEIF); }
		public ITerminalNode COMMAND_ELSEIF(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_ELSEIF, i);
		}
		public ITerminalNode[] EXPRESSION_COMMAND_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_COMMAND_END); }
		public ITerminalNode EXPRESSION_COMMAND_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_COMMAND_END, i);
		}
		public ITerminalNode COMMAND_ELSE() { return GetToken(YarnSpinnerParser.COMMAND_ELSE, 0); }
		public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			{
			State = 180; Match(COMMAND_START);
			State = 181; Match(COMMAND_IF);
			State = 182; _localctx.if_clause = expression(0);
			State = 183; Match(EXPRESSION_COMMAND_END);
			}
			State = 188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 185; _localctx.if_clause_statements = statement();
					}
					} 
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
			State = 203;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 191; Match(COMMAND_START);
					State = 192; Match(COMMAND_ELSEIF);
					State = 193; _localctx.elseif_clause = expression(0);
					State = 194; Match(EXPRESSION_COMMAND_END);
					State = 198;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 195; _localctx.elseif_clause_statements = statement();
							}
							} 
						}
						State = 200;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
					}
					}
					} 
				}
				State = 205;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 206; Match(COMMAND_START);
				State = 207; Match(COMMAND_ELSE);
				State = 208; Match(COMMAND_END);
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 209; _localctx.else_clause_statements = statement();
						}
						} 
					}
					State = 214;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				}
				break;
			}
			State = 217; Match(COMMAND_START);
			State = 218; Match(COMMAND_ENDIF);
			State = 219; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_SET() { return GetToken(YarnSpinnerParser.COMMAND_SET, 0); }
		public ITerminalNode VAR_ID() { return GetToken(YarnSpinnerParser.VAR_ID, 0); }
		public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXPRESSION_COMMAND_END() { return GetToken(YarnSpinnerParser.EXPRESSION_COMMAND_END, 0); }
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_set_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(COMMAND_START);
			State = 222; Match(COMMAND_SET);
			State = 223; Match(VAR_ID);
			State = 224; Match(OPERATOR_ASSIGNMENT);
			State = 225; expression(0);
			State = 226; Match(EXPRESSION_COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_statementContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_TEXT_END() { return GetToken(YarnSpinnerParser.COMMAND_TEXT_END, 0); }
		public ITerminalNode[] COMMAND_TEXT() { return GetTokens(YarnSpinnerParser.COMMAND_TEXT); }
		public ITerminalNode COMMAND_TEXT(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_TEXT, i);
		}
		public ITerminalNode[] COMMAND_EXPRESSION_START() { return GetTokens(YarnSpinnerParser.COMMAND_EXPRESSION_START); }
		public ITerminalNode COMMAND_EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_EXPRESSION_START, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		public ITerminalNode HASHTAG_NEWLINE() { return GetToken(YarnSpinnerParser.HASHTAG_NEWLINE, 0); }
		public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Command_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCommand_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCommand_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_statementContext command_statement() {
		Command_statementContext _localctx = new Command_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_command_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(COMMAND_START);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 234;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMAND_TEXT:
					{
					State = 229; Match(COMMAND_TEXT);
					}
					break;
				case COMMAND_EXPRESSION_START:
					{
					State = 230; Match(COMMAND_EXPRESSION_START);
					State = 231; expression(0);
					State = 232; Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMAND_EXPRESSION_START || _la==COMMAND_TEXT );
			State = 238; Match(COMMAND_TEXT_END);
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << TEXT_HASHTAG) | (1L << HASHTAG_TAG))) != 0) || _la==OPTION_HASHTAG) {
					{
					{
					State = 239; hashtag();
					}
					}
					State = 244;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 245; Match(HASHTAG_NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_option_statementContext : ParserRuleContext {
		public Shortcut_optionContext[] shortcut_option() {
			return GetRuleContexts<Shortcut_optionContext>();
		}
		public Shortcut_optionContext shortcut_option(int i) {
			return GetRuleContext<Shortcut_optionContext>(i);
		}
		public Shortcut_option_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_option_statementContext shortcut_option_statement() {
		Shortcut_option_statementContext _localctx = new Shortcut_option_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_shortcut_option_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 248; shortcut_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_optionContext : ParserRuleContext {
		public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Shortcut_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_optionContext shortcut_option() {
		Shortcut_optionContext _localctx = new Shortcut_optionContext(Context, State);
		EnterRule(_localctx, 32, RULE_shortcut_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; Match(SHORTCUT_ARROW);
			State = 254; line_statement();
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 255; Match(INDENT);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << INDENT) | (1L << SHORTCUT_ARROW) | (1L << COMMAND_START) | (1L << OPTION_START) | (1L << TEXT_NEWLINE) | (1L << TEXT_HASHTAG) | (1L << TEXT_EXPRESSION_START) | (1L << TEXT) | (1L << HASHTAG_TAG) | (1L << HASHTAG_NEWLINE) | (1L << HASHTAG_COMMAND_START))) != 0) || _la==OPTION_HASHTAG) {
					{
					{
					State = 256; statement();
					}
					}
					State = 261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 262; Match(DEDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_statementContext : ParserRuleContext {
		public Option_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_statement; } }
	 
		public Option_statementContext() { }
		public virtual void CopyFrom(Option_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionLinkContext : Option_statementContext {
		public IToken NodeName;
		public ITerminalNode OPTION_ID() { return GetToken(YarnSpinnerParser.OPTION_ID, 0); }
		public Option_formatted_textContext[] option_formatted_text() {
			return GetRuleContexts<Option_formatted_textContext>();
		}
		public Option_formatted_textContext option_formatted_text(int i) {
			return GetRuleContext<Option_formatted_textContext>(i);
		}
		public ITerminalNode HASHTAG_NEWLINE() { return GetToken(YarnSpinnerParser.HASHTAG_NEWLINE, 0); }
		public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public OptionLinkContext(Option_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterOptionLink(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitOptionLink(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionLink(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionJumpContext : Option_statementContext {
		public IToken NodeName;
		public ITerminalNode OPTION_TEXT() { return GetToken(YarnSpinnerParser.OPTION_TEXT, 0); }
		public OptionJumpContext(Option_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterOptionJump(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitOptionJump(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionJump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_statementContext option_statement() {
		Option_statementContext _localctx = new Option_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_option_statement);
		int _la;
		try {
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				_localctx = new OptionLinkContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; Match(OPTION_START);
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 266; option_formatted_text();
					}
					}
					State = 269;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==OPTION_EXPRESSION_START || _la==OPTION_TEXT );
				State = 271; Match(OPTION_DELIMIT);
				State = 272; ((OptionLinkContext)_localctx).NodeName = Match(OPTION_ID);
				State = 273; Match(OPTION_END);
				State = 281;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 277;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HASHTAG) | (1L << TEXT_HASHTAG) | (1L << HASHTAG_TAG))) != 0) || _la==OPTION_HASHTAG) {
						{
						{
						State = 274; hashtag();
						}
						}
						State = 279;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 280; Match(HASHTAG_NEWLINE);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new OptionJumpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 283; Match(OPTION_START);
				State = 284; ((OptionJumpContext)_localctx).NodeName = Match(OPTION_TEXT);
				State = 285; Match(OPTION_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Option_formatted_textContext : ParserRuleContext {
		public ITerminalNode OPTION_TEXT() { return GetToken(YarnSpinnerParser.OPTION_TEXT, 0); }
		public ITerminalNode OPTION_EXPRESSION_START() { return GetToken(YarnSpinnerParser.OPTION_EXPRESSION_START, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EXPRESSION_END() { return GetToken(YarnSpinnerParser.EXPRESSION_END, 0); }
		public Option_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option_formatted_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterOption_formatted_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitOption_formatted_text(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Option_formatted_textContext option_formatted_text() {
		Option_formatted_textContext _localctx = new Option_formatted_textContext(Context, State);
		EnterRule(_localctx, 36, RULE_option_formatted_text);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTION_TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; Match(OPTION_TEXT);
				}
				break;
			case OPTION_EXPRESSION_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; Match(OPTION_EXPRESSION_START);
				State = 290; expression(0);
				State = 291; Match(EXPRESSION_END);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'S', '\x12A', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\a', '\x2', '*', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '-', '\v', '\x2', '\x3', '\x2', '\x6', 
		'\x2', '\x30', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x31', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x6', 
		'\x4', '\x39', '\n', '\x4', '\r', '\x4', '\xE', '\x4', ':', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '?', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x42', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', 'S', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', 'V', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', 'Y', '\n', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', '`', '\n', '\a', '\f', '\a', '\xE', '\a', '\x63', '\v', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', 'g', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'j', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x88', '\n', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x99', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\x9C', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\xA5', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\xAC', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\xB0', '\n', '\r', '\f', '\r', '\xE', '\r', '\xB3', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xBD', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xC0', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xC7', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xCA', '\v', '\xE', '\a', '\xE', '\xCC', '\n', 
		'\xE', '\f', '\xE', '\xE', '\xE', '\xCF', '\v', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xD5', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\xD8', '\v', '\xE', '\x5', '\xE', '\xDA', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\xED', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '\xEE', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\xF3', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xF6', '\v', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xF9', '\n', '\x10', '\x3', '\x11', 
		'\x6', '\x11', '\xFC', '\n', '\x11', '\r', '\x11', '\xE', '\x11', '\xFD', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\x104', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x107', '\v', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x10A', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x6', '\x13', '\x10E', '\n', '\x13', '\r', '\x13', '\xE', '\x13', 
		'\x10F', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x116', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x119', '\v', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x11C', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x121', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x128', '\n', '\x14', '\x3', '\x14', '\x2', '\x3', '\x12', '\x15', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '\x2', '\v', 
		'\x4', '\x2', '\x15', '\x15', '\x1C', '\x1C', '\x6', '\x2', '\b', '\b', 
		'\x16', '\x16', '\x1B', '\x1B', 'N', 'N', '\x3', '\x2', '\x30', '\x32', 
		'\x3', '\x2', '.', '/', '\x3', '\x2', '\x35', '\x37', '\x3', '\x2', '\x33', 
		'\x34', '\x4', '\x2', '$', '%', '\'', '(', '\x4', '\x2', '&', '&', ')', 
		')', '\x3', '\x2', '*', ',', '\x2', '\x148', '\x2', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x33', '\x3', '\x2', '\x2', '\x2', '\x6', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'X', '\x3', '\x2', '\x2', '\x2', '\f', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'm', '\x3', '\x2', '\x2', '\x2', '\x10', 'p', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x87', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xFB', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '$', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '&', '\x127', '\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\x4', 
		'\x3', '\x2', ')', '(', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', 
		'\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x30', '\x5', '\x6', '\x4', '\x2', '/', '.', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x3', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', 
		'\b', '\x2', '\x2', '\x34', '\x35', '\a', '\x1E', '\x2', '\x2', '\x35', 
		'\x36', '\a', '\x1C', '\x2', '\x2', '\x36', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x39', '\x5', '\b', '\x5', '\x2', '\x38', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\x38', 
		'\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\x3', '\x2', '\x2', '\x2', '<', '@', '\a', '\x6', '\x2', '\x2', 
		'=', '?', '\x5', '\n', '\x6', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x42', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\a', '\xE', '\x2', '\x2', '\x44', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\a', '\x5', '\x2', '\x2', '\x46', 'G', '\a', '\a', 
		'\x2', '\x2', 'G', 'H', '\a', '\t', '\x2', '\x2', 'H', 'I', '\a', '\n', 
		'\x2', '\x2', 'I', '\t', '\x3', '\x2', '\x2', '\x2', 'J', 'Y', '\x5', 
		'\f', '\a', '\x2', 'K', 'Y', '\x5', '\x1A', '\xE', '\x2', 'L', 'Y', '\x5', 
		'\x1C', '\xF', '\x2', 'M', 'Y', '\x5', '$', '\x13', '\x2', 'N', 'Y', '\x5', 
		' ', '\x11', '\x2', 'O', 'Y', '\x5', '\x1E', '\x10', '\x2', 'P', 'T', 
		'\a', '\xF', '\x2', '\x2', 'Q', 'S', '\x5', '\n', '\x6', '\x2', 'R', 'Q', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 
		'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 
		'W', 'Y', '\a', '\x10', '\x2', '\x2', 'X', 'J', '\x3', '\x2', '\x2', '\x2', 
		'X', 'K', '\x3', '\x2', '\x2', '\x2', 'X', 'L', '\x3', '\x2', '\x2', '\x2', 
		'X', 'M', '\x3', '\x2', '\x2', '\x2', 'X', 'N', '\x3', '\x2', '\x2', '\x2', 
		'X', 'O', '\x3', '\x2', '\x2', '\x2', 'X', 'P', '\x3', '\x2', '\x2', '\x2', 
		'Y', '\v', '\x3', '\x2', '\x2', '\x2', 'Z', '`', '\a', '\x18', '\x2', 
		'\x2', '[', '\\', '\a', '\x17', '\x2', '\x2', '\\', ']', '\x5', '\x12', 
		'\n', '\x2', ']', '^', '\a', '=', '\x2', '\x2', '^', '`', '\x3', '\x2', 
		'\x2', '\x2', '_', 'Z', '\x3', '\x2', '\x2', '\x2', '_', '[', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'h', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'g', '\x5', '\xE', '\b', '\x2', '\x65', 'g', '\x5', '\x10', 
		'\t', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', '\x65', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', 
		'\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 
		'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\t', '\x2', '\x2', '\x2', 'l', '\r', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\t', '\x3', '\x2', '\x2', 'n', 'o', '\a', '\x1E', '\x2', '\x2', 
		'o', '\xF', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x1D', '\x2', 
		'\x2', 'q', 'r', '\a', '\x42', '\x2', '\x2', 'r', 's', '\x5', '\x12', 
		'\n', '\x2', 's', 't', '\a', '>', '\x2', '\x2', 't', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\b', '\n', '\x1', '\x2', 'v', 'w', '\a', '\x38', 
		'\x2', '\x2', 'w', 'x', '\x5', '\x12', '\n', '\x2', 'x', 'y', '\a', '\x39', 
		'\x2', '\x2', 'y', '\x88', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', 
		'\x34', '\x2', '\x2', '{', '\x88', '\x5', '\x12', '\n', '\f', '|', '}', 
		'\a', '-', '\x2', '\x2', '}', '\x88', '\x5', '\x12', '\n', '\v', '~', 
		'\x7F', '\x5', '\x16', '\f', '\x2', '\x7F', '\x80', '\t', '\x4', '\x2', 
		'\x2', '\x80', '\x81', '\x5', '\x12', '\n', '\x6', '\x81', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '\x83', '\x5', '\x16', '\f', '\x2', '\x83', 
		'\x84', '\t', '\x5', '\x2', '\x2', '\x84', '\x85', '\x5', '\x12', '\n', 
		'\x5', '\x85', '\x88', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\x5', 
		'\x14', '\v', '\x2', '\x87', 'u', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x87', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '~', '\x3', '\x2', '\x2', '\x2', '\x87', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\f', '\n', '\x2', '\x2', 
		'\x8A', '\x8B', '\t', '\x6', '\x2', '\x2', '\x8B', '\x99', '\x5', '\x12', 
		'\n', '\v', '\x8C', '\x8D', '\f', '\t', '\x2', '\x2', '\x8D', '\x8E', 
		'\t', '\a', '\x2', '\x2', '\x8E', '\x99', '\x5', '\x12', '\n', '\n', '\x8F', 
		'\x90', '\f', '\b', '\x2', '\x2', '\x90', '\x91', '\t', '\b', '\x2', '\x2', 
		'\x91', '\x99', '\x5', '\x12', '\n', '\t', '\x92', '\x93', '\f', '\a', 
		'\x2', '\x2', '\x93', '\x94', '\t', '\t', '\x2', '\x2', '\x94', '\x99', 
		'\x5', '\x12', '\n', '\b', '\x95', '\x96', '\f', '\x4', '\x2', '\x2', 
		'\x96', '\x97', '\t', '\n', '\x2', '\x2', '\x97', '\x99', '\x5', '\x12', 
		'\n', '\x5', '\x98', '\x89', '\x3', '\x2', '\x2', '\x2', '\x98', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x92', '\x3', '\x2', '\x2', '\x2', '\x98', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\xA5', '\a', '@', '\x2', '\x2', '\x9E', '\xA5', 
		'\a', ' ', '\x2', '\x2', '\x9F', '\xA5', '\a', '!', '\x2', '\x2', '\xA0', 
		'\xA5', '\x5', '\x16', '\f', '\x2', '\xA1', '\xA5', '\a', ';', '\x2', 
		'\x2', '\xA2', '\xA5', '\a', '\"', '\x2', '\x2', '\xA3', '\xA5', '\x5', 
		'\x18', '\r', '\x2', '\xA4', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', '?', '\x2', '\x2', '\xA7', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\a', '<', '\x2', '\x2', '\xA9', 
		'\xAB', '\a', '\x38', '\x2', '\x2', '\xAA', '\xAC', '\x5', '\x12', '\n', 
		'\x2', '\xAB', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', ':', '\x2', '\x2', '\xAE', '\xB0', '\x5', '\x12', '\n', 
		'\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', 
		'\x39', '\x2', '\x2', '\xB5', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\a', '\x12', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x42', '\x2', 
		'\x2', '\xB8', '\xB9', '\x5', '\x12', '\n', '\x2', '\xB9', '\xBA', '\a', 
		'>', '\x2', '\x2', '\xBA', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBD', '\x5', '\n', '\x6', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC2', '\a', '\x12', '\x2', '\x2', '\xC2', '\xC3', '\a', 
		'\x43', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\x12', '\n', '\x2', '\xC4', 
		'\xC8', '\a', '>', '\x2', '\x2', '\xC5', '\xC7', '\x5', '\n', '\x6', '\x2', 
		'\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xD1', '\a', '\x12', '\x2', '\x2', '\xD1', '\xD2', 
		'\a', '\x44', '\x2', '\x2', '\xD2', '\xD6', '\a', 'G', '\x2', '\x2', '\xD3', 
		'\xD5', '\x5', '\n', '\x6', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\a', '\x12', '\x2', '\x2', '\xDC', '\xDD', '\a', '\x46', '\x2', 
		'\x2', '\xDD', '\xDE', '\a', 'G', '\x2', '\x2', '\xDE', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x12', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\x45', '\x2', '\x2', '\xE1', '\xE2', '\a', '?', '\x2', 
		'\x2', '\xE2', '\xE3', '\a', '#', '\x2', '\x2', '\xE3', '\xE4', '\x5', 
		'\x12', '\n', '\x2', '\xE4', '\xE5', '\a', '>', '\x2', '\x2', '\xE5', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xEC', '\a', '\x12', '\x2', 
		'\x2', '\xE7', '\xED', '\a', 'J', '\x2', '\x2', '\xE8', '\xE9', '\a', 
		'I', '\x2', '\x2', '\xE9', '\xEA', '\x5', '\x12', '\n', '\x2', '\xEA', 
		'\xEB', '\a', '=', '\x2', '\x2', '\xEB', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF8', '\a', 
		'H', '\x2', '\x2', '\xF1', '\xF3', '\x5', '\xE', '\b', '\x2', '\xF2', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF5', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF9', '\a', '\x1C', '\x2', 
		'\x2', '\xF8', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xF9', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFC', '\x5', '\"', '\x12', '\x2', '\xFB', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\x11', '\x2', 
		'\x2', '\x100', '\x109', '\x5', '\f', '\a', '\x2', '\x101', '\x105', '\a', 
		'\xF', '\x2', '\x2', '\x102', '\x104', '\x5', '\n', '\x6', '\x2', '\x103', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10A', '\a', 
		'\x10', '\x2', '\x2', '\x109', '\x101', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x10D', '\a', '\x13', '\x2', '\x2', '\x10C', '\x10E', 
		'\x5', '&', '\x14', '\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', 'O', '\x2', 
		'\x2', '\x112', '\x113', '\a', 'S', '\x2', '\x2', '\x113', '\x11B', '\a', 
		'M', '\x2', '\x2', '\x114', '\x116', '\x5', '\xE', '\b', '\x2', '\x115', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x116', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\a', 
		'\x1C', '\x2', '\x2', '\x11B', '\x117', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11E', '\a', '\x13', '\x2', '\x2', '\x11E', '\x11F', 
		'\a', 'Q', '\x2', '\x2', '\x11F', '\x121', '\a', 'M', '\x2', '\x2', '\x120', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '%', '\x3', '\x2', '\x2', '\x2', '\x122', '\x128', '\a', 
		'Q', '\x2', '\x2', '\x123', '\x124', '\a', 'P', '\x2', '\x2', '\x124', 
		'\x125', '\x5', '\x12', '\n', '\x2', '\x125', '\x126', '\a', '=', '\x2', 
		'\x2', '\x126', '\x128', '\x3', '\x2', '\x2', '\x2', '\x127', '\x122', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\'', '\x3', '\x2', '\x2', '\x2', '#', '+', '\x31', ':', '@', 
		'T', 'X', '_', '\x61', '\x66', 'h', '\x87', '\x98', '\x9A', '\xA4', '\xAB', 
		'\xB1', '\xBE', '\xC8', '\xCD', '\xD6', '\xD9', '\xEC', '\xEE', '\xF4', 
		'\xF8', '\xFD', '\x105', '\x109', '\x10F', '\x117', '\x11B', '\x120', 
		'\x127',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

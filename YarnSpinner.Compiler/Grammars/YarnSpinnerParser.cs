//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/desplesda/Work/YarnSpinner/YarnSpinner.Compiler/Grammars/YarnSpinnerParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Yarn.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class YarnSpinnerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, BLANK_LINE_FOLLOWING_OPTION=3, WS=4, COMMENT=5, NEWLINE=6, 
		HEADER_WHEN=7, ID=8, BODY_START=9, HEADER_DELIMITER=10, HASHTAG=11, HEADER_WHEN_UNKNOWN=12, 
		REST_OF_LINE=13, BODY_WS=14, BODY_END=15, SHORTCUT_ARROW=16, LINE_GROUP_ARROW=17, 
		COMMAND_START=18, EXPRESSION_START=19, ESCAPED_ANY=20, TEXT_ESCAPE=21, 
		TEXT_COMMENT=22, TEXT=23, UNESCAPABLE_CHARACTER=24, TEXT_COMMANDHASHTAG_WS=25, 
		TEXT_COMMANDHASHTAG_COMMENT=26, TEXT_COMMANDHASHTAG_ERROR=27, HASHTAG_WS=28, 
		HASHTAG_TEXT=29, EXPR_WS=30, EXPRESSION_WHEN_ALWAYS=31, KEYWORD_TRUE=32, 
		KEYWORD_FALSE=33, KEYWORD_NULL=34, OPERATOR_ASSIGNMENT=35, OPERATOR_LOGICAL_LESS_THAN_EQUALS=36, 
		OPERATOR_LOGICAL_GREATER_THAN_EQUALS=37, OPERATOR_LOGICAL_EQUALS=38, OPERATOR_LOGICAL_LESS=39, 
		OPERATOR_LOGICAL_GREATER=40, OPERATOR_LOGICAL_NOT_EQUALS=41, OPERATOR_LOGICAL_AND=42, 
		OPERATOR_LOGICAL_OR=43, OPERATOR_LOGICAL_XOR=44, OPERATOR_LOGICAL_NOT=45, 
		OPERATOR_MATHS_ADDITION_EQUALS=46, OPERATOR_MATHS_SUBTRACTION_EQUALS=47, 
		OPERATOR_MATHS_MULTIPLICATION_EQUALS=48, OPERATOR_MATHS_MODULUS_EQUALS=49, 
		OPERATOR_MATHS_DIVISION_EQUALS=50, OPERATOR_MATHS_ADDITION=51, OPERATOR_MATHS_SUBTRACTION=52, 
		OPERATOR_MATHS_MULTIPLICATION=53, OPERATOR_MATHS_DIVISION=54, OPERATOR_MATHS_MODULUS=55, 
		LPAREN=56, RPAREN=57, COMMA=58, EXPRESSION_AS=59, STRING=60, FUNC_ID=61, 
		EXPRESSION_END=62, VAR_ID=63, DOT=64, NUMBER=65, COMMAND_NEWLINE=66, COMMAND_WS=67, 
		COMMAND_IF=68, COMMAND_ELSEIF=69, COMMAND_ELSE=70, COMMAND_SET=71, COMMAND_ENDIF=72, 
		COMMAND_CALL=73, COMMAND_DECLARE=74, COMMAND_JUMP=75, COMMAND_DETOUR=76, 
		COMMAND_RETURN=77, COMMAND_ENUM=78, COMMAND_CASE=79, COMMAND_ENDENUM=80, 
		COMMAND_ONCE=81, COMMAND_ENDONCE=82, COMMAND_LOCAL=83, COMMAND_END=84, 
		COMMAND_TEXT_NEWLINE=85, COMMAND_TEXT_END=86, COMMAND_EXPRESSION_START=87, 
		COMMAND_TEXT=88, COMMAND_ID_NEWLINE=89, TYPE_STRING=90, TYPE_NUMBER=91, 
		TYPE_BOOL=92;
	public const int
		RULE_dialogue = 0, RULE_file_hashtag = 1, RULE_node = 2, RULE_when_header = 3, 
		RULE_header = 4, RULE_header_when_expression = 5, RULE_body = 6, RULE_statement = 7, 
		RULE_line_statement = 8, RULE_line_formatted_text = 9, RULE_hashtag = 10, 
		RULE_line_condition = 11, RULE_expression = 12, RULE_value = 13, RULE_variable = 14, 
		RULE_function_call = 15, RULE_typeMemberReference = 16, RULE_if_statement = 17, 
		RULE_if_clause = 18, RULE_else_if_clause = 19, RULE_else_clause = 20, 
		RULE_set_statement = 21, RULE_call_statement = 22, RULE_command_statement = 23, 
		RULE_command_formatted_text = 24, RULE_shortcut_option_statement = 25, 
		RULE_shortcut_option = 26, RULE_line_group_statement = 27, RULE_line_group_item = 28, 
		RULE_declare_statement = 29, RULE_enum_statement = 30, RULE_enum_case_statement = 31, 
		RULE_jump_statement = 32, RULE_return_statement = 33, RULE_once_statement = 34, 
		RULE_once_primary_clause = 35, RULE_once_alternate_clause = 36, RULE_structured_command = 37, 
		RULE_structured_command_value = 38;
	public static readonly string[] ruleNames = {
		"dialogue", "file_hashtag", "node", "when_header", "header", "header_when_expression", 
		"body", "statement", "line_statement", "line_formatted_text", "hashtag", 
		"line_condition", "expression", "value", "variable", "function_call", 
		"typeMemberReference", "if_statement", "if_clause", "else_if_clause", 
		"else_clause", "set_statement", "call_statement", "command_statement", 
		"command_formatted_text", "shortcut_option_statement", "shortcut_option", 
		"line_group_statement", "line_group_item", "declare_statement", "enum_statement", 
		"enum_case_statement", "jump_statement", "return_statement", "once_statement", 
		"once_primary_clause", "once_alternate_clause", "structured_command", 
		"structured_command_value"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'when'", null, "'---'", null, 
		"'#'", null, null, null, "'==='", "'->'", "'=>'", "'<<'", null, null, 
		null, null, null, null, null, null, null, null, null, null, "'always'", 
		"'true'", "'false'", "'null'", null, null, null, null, null, null, null, 
		null, null, null, null, "'+='", "'-='", "'*='", "'%='", "'/='", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'('", "')'", "','", "'as'", null, null, "'}'", 
		null, "'.'", null, null, null, null, null, null, null, "'endif'", null, 
		null, null, null, null, null, null, null, "'once'", "'endonce'", null, 
		null, null, null, "'{'", null, null, "'string'", "'number'", "'bool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "BLANK_LINE_FOLLOWING_OPTION", "WS", "COMMENT", 
		"NEWLINE", "HEADER_WHEN", "ID", "BODY_START", "HEADER_DELIMITER", "HASHTAG", 
		"HEADER_WHEN_UNKNOWN", "REST_OF_LINE", "BODY_WS", "BODY_END", "SHORTCUT_ARROW", 
		"LINE_GROUP_ARROW", "COMMAND_START", "EXPRESSION_START", "ESCAPED_ANY", 
		"TEXT_ESCAPE", "TEXT_COMMENT", "TEXT", "UNESCAPABLE_CHARACTER", "TEXT_COMMANDHASHTAG_WS", 
		"TEXT_COMMANDHASHTAG_COMMENT", "TEXT_COMMANDHASHTAG_ERROR", "HASHTAG_WS", 
		"HASHTAG_TEXT", "EXPR_WS", "EXPRESSION_WHEN_ALWAYS", "KEYWORD_TRUE", "KEYWORD_FALSE", 
		"KEYWORD_NULL", "OPERATOR_ASSIGNMENT", "OPERATOR_LOGICAL_LESS_THAN_EQUALS", 
		"OPERATOR_LOGICAL_GREATER_THAN_EQUALS", "OPERATOR_LOGICAL_EQUALS", "OPERATOR_LOGICAL_LESS", 
		"OPERATOR_LOGICAL_GREATER", "OPERATOR_LOGICAL_NOT_EQUALS", "OPERATOR_LOGICAL_AND", 
		"OPERATOR_LOGICAL_OR", "OPERATOR_LOGICAL_XOR", "OPERATOR_LOGICAL_NOT", 
		"OPERATOR_MATHS_ADDITION_EQUALS", "OPERATOR_MATHS_SUBTRACTION_EQUALS", 
		"OPERATOR_MATHS_MULTIPLICATION_EQUALS", "OPERATOR_MATHS_MODULUS_EQUALS", 
		"OPERATOR_MATHS_DIVISION_EQUALS", "OPERATOR_MATHS_ADDITION", "OPERATOR_MATHS_SUBTRACTION", 
		"OPERATOR_MATHS_MULTIPLICATION", "OPERATOR_MATHS_DIVISION", "OPERATOR_MATHS_MODULUS", 
		"LPAREN", "RPAREN", "COMMA", "EXPRESSION_AS", "STRING", "FUNC_ID", "EXPRESSION_END", 
		"VAR_ID", "DOT", "NUMBER", "COMMAND_NEWLINE", "COMMAND_WS", "COMMAND_IF", 
		"COMMAND_ELSEIF", "COMMAND_ELSE", "COMMAND_SET", "COMMAND_ENDIF", "COMMAND_CALL", 
		"COMMAND_DECLARE", "COMMAND_JUMP", "COMMAND_DETOUR", "COMMAND_RETURN", 
		"COMMAND_ENUM", "COMMAND_CASE", "COMMAND_ENDENUM", "COMMAND_ONCE", "COMMAND_ENDONCE", 
		"COMMAND_LOCAL", "COMMAND_END", "COMMAND_TEXT_NEWLINE", "COMMAND_TEXT_END", 
		"COMMAND_EXPRESSION_START", "COMMAND_TEXT", "COMMAND_ID_NEWLINE", "TYPE_STRING", 
		"TYPE_NUMBER", "TYPE_BOOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YarnSpinnerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YarnSpinnerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YarnSpinnerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YarnSpinnerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DialogueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_hashtagContext[] file_hashtag() {
			return GetRuleContexts<File_hashtagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_hashtagContext file_hashtag(int i) {
			return GetRuleContext<File_hashtagContext>(i);
		}
		public DialogueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueContext dialogue() {
		DialogueContext _localctx = new DialogueContext(Context, State);
		EnterRule(_localctx, 0, RULE_dialogue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 78;
				file_hashtag();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 84;
				node();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HEADER_WHEN || _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_hashtagContext : ParserRuleContext {
		public IToken text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public File_hashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_hashtag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFile_hashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFile_hashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_hashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_hashtagContext file_hashtag() {
		File_hashtagContext _localctx = new File_hashtagContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(HASHTAG);
			State = 90;
			_localctx.text = Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_START() { return GetToken(YarnSpinnerParser.BODY_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_END() { return GetToken(YarnSpinnerParser.BODY_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext[] header() {
			return GetRuleContexts<HeaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext header(int i) {
			return GetRuleContext<HeaderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_headerContext[] when_header() {
			return GetRuleContexts<When_headerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public When_headerContext when_header(int i) {
			return GetRuleContext<When_headerContext>(i);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_node);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 94;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ID:
					{
					State = 92;
					header();
					}
					break;
				case HEADER_WHEN:
					{
					State = 93;
					when_header();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==HEADER_WHEN || _la==ID );
			State = 98;
			Match(BODY_START);
			State = 99;
			body();
			State = 100;
			Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class When_headerContext : ParserRuleContext {
		public Header_when_expressionContext header_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_WHEN() { return GetToken(YarnSpinnerParser.HEADER_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_DELIMITER() { return GetToken(YarnSpinnerParser.HEADER_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(YarnSpinnerParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Header_when_expressionContext header_when_expression() {
			return GetRuleContext<Header_when_expressionContext>(0);
		}
		public When_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterWhen_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitWhen_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public When_headerContext when_header() {
		When_headerContext _localctx = new When_headerContext(Context, State);
		EnterRule(_localctx, 6, RULE_when_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(HEADER_WHEN);
			State = 103;
			Match(HEADER_DELIMITER);
			State = 104;
			_localctx.header_expression = header_when_expression();
			State = 105;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public IToken header_key;
		public IToken header_value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_DELIMITER() { return GetToken(YarnSpinnerParser.HEADER_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REST_OF_LINE() { return GetToken(YarnSpinnerParser.REST_OF_LINE, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 8, RULE_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_localctx.header_key = Match(ID);
			State = 108;
			Match(HEADER_DELIMITER);
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REST_OF_LINE) {
				{
				State = 109;
				_localctx.header_value = Match(REST_OF_LINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Header_when_expressionContext : ParserRuleContext {
		public IToken always;
		public IToken once;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_WHEN_ALWAYS() { return GetToken(YarnSpinnerParser.EXPRESSION_WHEN_ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ONCE() { return GetToken(YarnSpinnerParser.COMMAND_ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		public Header_when_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header_when_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHeader_when_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHeader_when_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader_when_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Header_when_expressionContext header_when_expression() {
		Header_when_expressionContext _localctx = new Header_when_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_header_when_expression);
		int _la;
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_TRUE:
			case KEYWORD_FALSE:
			case OPERATOR_LOGICAL_NOT:
			case OPERATOR_MATHS_SUBTRACTION:
			case LPAREN:
			case STRING:
			case FUNC_ID:
			case VAR_ID:
			case DOT:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112;
				expression(0);
				}
				break;
			case EXPRESSION_WHEN_ALWAYS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 113;
				_localctx.always = Match(EXPRESSION_WHEN_ALWAYS);
				}
				}
				break;
			case COMMAND_ONCE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114;
				_localctx.once = Match(COMMAND_ONCE);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMAND_IF) {
					{
					State = 115;
					Match(COMMAND_IF);
					State = 116;
					expression(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9371650L) != 0)) {
				{
				{
				State = 121;
				statement();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shortcut_option_statementContext shortcut_option_statement() {
			return GetRuleContext<Shortcut_option_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_statementContext call_statement() {
			return GetRuleContext<Call_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Command_statementContext command_statement() {
			return GetRuleContext<Command_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_statementContext enum_statement() {
			return GetRuleContext<Enum_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_group_statementContext line_group_statement() {
			return GetRuleContext<Line_group_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Once_statementContext once_statement() {
			return GetRuleContext<Once_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		int _la;
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				line_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				if_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129;
				set_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130;
				shortcut_option_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 131;
				call_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 132;
				command_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 133;
				declare_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 134;
				enum_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 135;
				jump_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 136;
				return_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 137;
				line_group_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 138;
				once_statement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 139;
				Match(INDENT);
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9371650L) != 0)) {
					{
					{
					State = 140;
					statement();
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 146;
				Match(DEDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_formatted_textContext line_formatted_text() {
			return GetRuleContext<Line_formatted_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(YarnSpinnerParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_conditionContext line_condition() {
			return GetRuleContext<Line_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Line_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_statementContext line_statement() {
		Line_statementContext _localctx = new Line_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_line_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			line_formatted_text();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_START) {
				{
				State = 150;
				line_condition();
				}
			}

			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 153;
				hashtag();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 159;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_formatted_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION_START() { return GetTokens(YarnSpinnerParser.EXPRESSION_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(YarnSpinnerParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(YarnSpinnerParser.TEXT, i);
		}
		public Line_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_formatted_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_formatted_textContext line_formatted_text() {
		Line_formatted_textContext _localctx = new Line_formatted_textContext(Context, State);
		EnterRule(_localctx, 18, RULE_line_formatted_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 170;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 162;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 161;
							Match(TEXT);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 164;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case EXPRESSION_START:
					{
					State = 166;
					Match(EXPRESSION_START);
					State = 167;
					expression(0);
					State = 168;
					Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXPRESSION_START || _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashtagContext : ParserRuleContext {
		public IToken text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public HashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hashtag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HashtagContext hashtag() {
		HashtagContext _localctx = new HashtagContext(Context, State);
		EnterRule(_localctx, 20, RULE_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(HASHTAG);
			State = 175;
			_localctx.text = Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_conditionContext : ParserRuleContext {
		public Line_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_condition; } }
	 
		public Line_conditionContext() { }
		public virtual void CopyFrom(Line_conditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LineOnceConditionContext : Line_conditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ONCE() { return GetToken(YarnSpinnerParser.COMMAND_ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LineOnceConditionContext(Line_conditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLineOnceCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLineOnceCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineOnceCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineConditionContext : Line_conditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public LineConditionContext(Line_conditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLineCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLineCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_conditionContext line_condition() {
		Line_conditionContext _localctx = new Line_conditionContext(Context, State);
		EnterRule(_localctx, 22, RULE_line_condition);
		int _la;
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new LineConditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				Match(COMMAND_START);
				State = 178;
				Match(COMMAND_IF);
				State = 179;
				expression(0);
				State = 180;
				Match(COMMAND_END);
				}
				break;
			case 2:
				_localctx = new LineOnceConditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				Match(COMMAND_START);
				State = 183;
				Match(COMMAND_ONCE);
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMAND_IF) {
					{
					State = 184;
					Match(COMMAND_IF);
					State = 185;
					expression(0);
					}
				}

				State = 188;
				Match(COMMAND_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpParensContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YarnSpinnerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YarnSpinnerParser.RPAREN, 0); }
		public ExpParensContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMultDivModContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MULTIPLICATION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MULTIPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_DIVISION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MODULUS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MODULUS, 0); }
		public ExpMultDivModContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpMultDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpMultDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMultDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpComparisonContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_LESS_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS_THAN_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_GREATER_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER_THAN_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_LESS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_GREATER() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER, 0); }
		public ExpComparisonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNegativeContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpNegativeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAndOrXorContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_AND() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_OR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_XOR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_XOR, 0); }
		public ExpAndOrXorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAndOrXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAndOrXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAndOrXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_ADDITION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_ADDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNotContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_NOT() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT, 0); }
		public ExpNotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpValueContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpValueContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpEqualityContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_NOT_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT_EQUALS, 0); }
		public ExpEqualityContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ExpParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 192;
				Match(LPAREN);
				State = 193;
				expression(0);
				State = 194;
				Match(RPAREN);
				}
				break;
			case OPERATOR_MATHS_SUBTRACTION:
				{
				_localctx = new ExpNegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 196;
				((ExpNegativeContext)_localctx).op = Match(OPERATOR_MATHS_SUBTRACTION);
				State = 197;
				expression(8);
				}
				break;
			case OPERATOR_LOGICAL_NOT:
				{
				_localctx = new ExpNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 198;
				((ExpNotContext)_localctx).op = Match(OPERATOR_LOGICAL_NOT);
				State = 199;
				expression(7);
				}
				break;
			case KEYWORD_TRUE:
			case KEYWORD_FALSE:
			case STRING:
			case FUNC_ID:
			case VAR_ID:
			case DOT:
			case NUMBER:
				{
				_localctx = new ExpValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200;
				value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 218;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
					case 1:
						{
						_localctx = new ExpMultDivModContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 203;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 204;
						((ExpMultDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 63050394783186944L) != 0)) ) {
							((ExpMultDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 205;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 206;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 207;
						((ExpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_MATHS_ADDITION || _la==OPERATOR_MATHS_SUBTRACTION) ) {
							((ExpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 208;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 209;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 210;
						((ExpComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1855425871872L) != 0)) ) {
							((ExpComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 211;
						expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpEqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 212;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 213;
						((ExpEqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_LOGICAL_EQUALS || _la==OPERATOR_LOGICAL_NOT_EQUALS) ) {
							((ExpEqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 214;
						expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpAndOrXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 215;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 216;
						((ExpAndOrXorContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325577728L) != 0)) ) {
							((ExpAndOrXorContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 217;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueNumberContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(YarnSpinnerParser.NUMBER, 0); }
		public ValueNumberContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TRUE() { return GetToken(YarnSpinnerParser.KEYWORD_TRUE, 0); }
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FALSE() { return GetToken(YarnSpinnerParser.KEYWORD_FALSE, 0); }
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFuncContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ValueFuncContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueVarContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueVarContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(YarnSpinnerParser.STRING, 0); }
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTypeMemberReferenceContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberReferenceContext typeMemberReference() {
			return GetRuleContext<TypeMemberReferenceContext>(0);
		}
		public ValueTypeMemberReferenceContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypeMemberReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_value);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				Match(KEYWORD_TRUE);
				}
				break;
			case 3:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 225;
				Match(KEYWORD_FALSE);
				}
				break;
			case 4:
				_localctx = new ValueVarContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 226;
				variable();
				}
				break;
			case 5:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 227;
				Match(STRING);
				}
				break;
			case 6:
				_localctx = new ValueFuncContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 228;
				function_call();
				}
				break;
			case 7:
				_localctx = new ValueTypeMemberReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 229;
				typeMemberReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ID() { return GetToken(YarnSpinnerParser.VAR_ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 28, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(VAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YarnSpinnerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YarnSpinnerParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YarnSpinnerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YarnSpinnerParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 30, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(FUNC_ID);
			State = 235;
			Match(LPAREN);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & 15855525891L) != 0)) {
				{
				State = 236;
				expression(0);
				}
			}

			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 239;
				Match(COMMA);
				State = 240;
				expression(0);
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberReferenceContext : ParserRuleContext {
		public IToken typeName;
		public IToken memberName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YarnSpinnerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNC_ID() { return GetTokens(YarnSpinnerParser.FUNC_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID(int i) {
			return GetToken(YarnSpinnerParser.FUNC_ID, i);
		}
		public TypeMemberReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMemberReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMemberReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberReferenceContext typeMemberReference() {
		TypeMemberReferenceContext _localctx = new TypeMemberReferenceContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeMemberReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FUNC_ID) {
				{
				State = 248;
				_localctx.typeName = Match(FUNC_ID);
				}
			}

			State = 251;
			Match(DOT);
			State = 252;
			_localctx.memberName = Match(FUNC_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENDIF() { return GetToken(YarnSpinnerParser.COMMAND_ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_clauseContext[] else_if_clause() {
			return GetRuleContexts<Else_if_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_clauseContext else_if_clause(int i) {
			return GetRuleContext<Else_if_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			if_clause();
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 255;
					else_if_clause();
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 261;
				else_clause();
				}
				break;
			}
			State = 264;
			Match(COMMAND_START);
			State = 265;
			Match(COMMAND_ENDIF);
			State = 266;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterIf_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitIf_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_clauseContext if_clause() {
		If_clauseContext _localctx = new If_clauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(COMMAND_START);
			State = 269;
			Match(COMMAND_IF);
			State = 270;
			expression(0);
			State = 271;
			Match(COMMAND_END);
			State = 275;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 272;
					statement();
					}
					} 
				}
				State = 277;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ELSEIF() { return GetToken(YarnSpinnerParser.COMMAND_ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_if_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterElse_if_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitElse_if_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_clauseContext else_if_clause() {
		Else_if_clauseContext _localctx = new Else_if_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_else_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(COMMAND_START);
			State = 279;
			Match(COMMAND_ELSEIF);
			State = 280;
			expression(0);
			State = 281;
			Match(COMMAND_END);
			State = 285;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 282;
					statement();
					}
					} 
				}
				State = 287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ELSE() { return GetToken(YarnSpinnerParser.COMMAND_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterElse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitElse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_clauseContext else_clause() {
		Else_clauseContext _localctx = new Else_clauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_else_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(COMMAND_START);
			State = 289;
			Match(COMMAND_ELSE);
			State = 290;
			Match(COMMAND_END);
			State = 294;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 291;
					statement();
					}
					} 
				}
				State = 296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_SET() { return GetToken(YarnSpinnerParser.COMMAND_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MULTIPLICATION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MULTIPLICATION_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_DIVISION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_DIVISION_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MODULUS_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MODULUS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_ADDITION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_ADDITION_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_SUBTRACTION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION_EQUALS, 0); }
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_set_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(COMMAND_START);
			State = 298;
			Match(COMMAND_SET);
			State = 299;
			variable();
			State = 300;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2181465429245952L) != 0)) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 301;
			expression(0);
			State = 302;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_CALL() { return GetToken(YarnSpinnerParser.COMMAND_CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCall_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCall_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_statementContext call_statement() {
		Call_statementContext _localctx = new Call_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_call_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(COMMAND_START);
			State = 305;
			Match(COMMAND_CALL);
			State = 306;
			function_call();
			State = 307;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Command_formatted_textContext command_formatted_text() {
			return GetRuleContext<Command_formatted_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_TEXT_END() { return GetToken(YarnSpinnerParser.COMMAND_TEXT_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Command_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCommand_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCommand_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_statementContext command_statement() {
		Command_statementContext _localctx = new Command_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_command_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(COMMAND_START);
			State = 310;
			command_formatted_text();
			State = 311;
			Match(COMMAND_TEXT_END);
			{
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 312;
				hashtag();
				}
				}
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_formatted_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_TEXT() { return GetTokens(YarnSpinnerParser.COMMAND_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_TEXT(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_EXPRESSION_START() { return GetTokens(YarnSpinnerParser.COMMAND_EXPRESSION_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_EXPRESSION_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		public Command_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_formatted_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCommand_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCommand_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_formatted_textContext command_formatted_text() {
		Command_formatted_textContext _localctx = new Command_formatted_textContext(Context, State);
		EnterRule(_localctx, 48, RULE_command_formatted_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMAND_EXPRESSION_START || _la==COMMAND_TEXT) {
				{
				State = 323;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMAND_TEXT:
					{
					State = 318;
					Match(COMMAND_TEXT);
					}
					break;
				case COMMAND_EXPRESSION_START:
					{
					State = 319;
					Match(COMMAND_EXPRESSION_START);
					State = 320;
					expression(0);
					State = 321;
					Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_option_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shortcut_optionContext[] shortcut_option() {
			return GetRuleContexts<Shortcut_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shortcut_optionContext shortcut_option(int i) {
			return GetRuleContext<Shortcut_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK_LINE_FOLLOWING_OPTION() { return GetToken(YarnSpinnerParser.BLANK_LINE_FOLLOWING_OPTION, 0); }
		public Shortcut_option_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_option_statementContext shortcut_option_statement() {
		Shortcut_option_statementContext _localctx = new Shortcut_option_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_shortcut_option_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 328;
					shortcut_option();
					}
					} 
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			{
			State = 334;
			shortcut_option();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLANK_LINE_FOLLOWING_OPTION) {
				{
				State = 335;
				Match(BLANK_LINE_FOLLOWING_OPTION);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTCUT_ARROW() { return GetToken(YarnSpinnerParser.SHORTCUT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Shortcut_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_optionContext shortcut_option() {
		Shortcut_optionContext _localctx = new Shortcut_optionContext(Context, State);
		EnterRule(_localctx, 52, RULE_shortcut_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			Match(SHORTCUT_ARROW);
			State = 339;
			line_statement();
			State = 348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 340;
				Match(INDENT);
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9371650L) != 0)) {
					{
					{
					State = 341;
					statement();
					}
					}
					State = 346;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 347;
				Match(DEDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_group_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_group_itemContext[] line_group_item() {
			return GetRuleContexts<Line_group_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_group_itemContext line_group_item(int i) {
			return GetRuleContext<Line_group_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK_LINE_FOLLOWING_OPTION() { return GetToken(YarnSpinnerParser.BLANK_LINE_FOLLOWING_OPTION, 0); }
		public Line_group_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_group_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_group_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_group_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_group_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_group_statementContext line_group_statement() {
		Line_group_statementContext _localctx = new Line_group_statementContext(Context, State);
		EnterRule(_localctx, 54, RULE_line_group_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 350;
					line_group_item();
					}
					} 
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			{
			State = 356;
			line_group_item();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLANK_LINE_FOLLOWING_OPTION) {
				{
				State = 357;
				Match(BLANK_LINE_FOLLOWING_OPTION);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_group_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_GROUP_ARROW() { return GetToken(YarnSpinnerParser.LINE_GROUP_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Line_group_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_group_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_group_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_group_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_group_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_group_itemContext line_group_item() {
		Line_group_itemContext _localctx = new Line_group_itemContext(Context, State);
		EnterRule(_localctx, 56, RULE_line_group_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(LINE_GROUP_ARROW);
			State = 361;
			line_statement();
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 362;
				Match(INDENT);
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9371650L) != 0)) {
					{
					{
					State = 363;
					statement();
					}
					}
					State = 368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 369;
				Match(DEDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_DECLARE() { return GetToken(YarnSpinnerParser.COMMAND_DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_AS() { return GetToken(YarnSpinnerParser.EXPRESSION_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_declare_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(COMMAND_START);
			State = 373;
			Match(COMMAND_DECLARE);
			State = 374;
			variable();
			State = 375;
			Match(OPERATOR_ASSIGNMENT);
			State = 376;
			expression(0);
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPRESSION_AS) {
				{
				State = 377;
				Match(EXPRESSION_AS);
				State = 378;
				_localctx.type = Match(FUNC_ID);
				}
			}

			State = 381;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_statementContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_START() { return GetTokens(YarnSpinnerParser.COMMAND_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENUM() { return GetToken(YarnSpinnerParser.COMMAND_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_END() { return GetTokens(YarnSpinnerParser.COMMAND_END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_END, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENDENUM() { return GetToken(YarnSpinnerParser.COMMAND_ENDENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_case_statementContext[] enum_case_statement() {
			return GetRuleContexts<Enum_case_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_case_statementContext enum_case_statement(int i) {
			return GetRuleContext<Enum_case_statementContext>(i);
		}
		public Enum_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterEnum_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitEnum_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_statementContext enum_statement() {
		Enum_statementContext _localctx = new Enum_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_enum_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			Match(COMMAND_START);
			State = 384;
			Match(COMMAND_ENUM);
			State = 385;
			_localctx.name = Match(ID);
			State = 386;
			Match(COMMAND_END);
			State = 388;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 387;
					enum_case_statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 392;
			Match(COMMAND_START);
			State = 393;
			Match(COMMAND_ENDENUM);
			State = 394;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_case_statementContext : ParserRuleContext {
		public IToken name;
		public ValueContext rawValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_CASE() { return GetToken(YarnSpinnerParser.COMMAND_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Enum_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_case_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterEnum_case_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitEnum_case_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_case_statementContext enum_case_statement() {
		Enum_case_statementContext _localctx = new Enum_case_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_enum_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 396;
				Match(INDENT);
				}
			}

			State = 399;
			Match(COMMAND_START);
			State = 400;
			Match(COMMAND_CASE);
			State = 401;
			_localctx.name = Match(FUNC_ID);
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPERATOR_ASSIGNMENT) {
				{
				State = 402;
				Match(OPERATOR_ASSIGNMENT);
				State = 403;
				_localctx.rawValue = value();
				}
			}

			State = 406;
			Match(COMMAND_END);
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEDENT) {
				{
				State = 407;
				Match(DEDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
	 
		public Jump_statementContext() { }
		public virtual void CopyFrom(Jump_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JumpToNodeNameContext : Jump_statementContext {
		public IToken destination;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_JUMP() { return GetToken(YarnSpinnerParser.COMMAND_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		public JumpToNodeNameContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterJumpToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitJumpToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpToNodeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JumpToExpressionContext : Jump_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_JUMP() { return GetToken(YarnSpinnerParser.COMMAND_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_START() { return GetToken(YarnSpinnerParser.EXPRESSION_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END() { return GetToken(YarnSpinnerParser.EXPRESSION_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public JumpToExpressionContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterJumpToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitJumpToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DetourToNodeNameContext : Jump_statementContext {
		public IToken destination;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_DETOUR() { return GetToken(YarnSpinnerParser.COMMAND_DETOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		public DetourToNodeNameContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDetourToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDetourToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetourToNodeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DetourToExpressionContext : Jump_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_DETOUR() { return GetToken(YarnSpinnerParser.COMMAND_DETOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_START() { return GetToken(YarnSpinnerParser.EXPRESSION_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END() { return GetToken(YarnSpinnerParser.EXPRESSION_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public DetourToExpressionContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDetourToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDetourToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetourToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_jump_statement);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				_localctx = new JumpToNodeNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 410;
				Match(COMMAND_START);
				State = 411;
				Match(COMMAND_JUMP);
				State = 412;
				((JumpToNodeNameContext)_localctx).destination = Match(ID);
				State = 413;
				Match(COMMAND_END);
				}
				break;
			case 2:
				_localctx = new JumpToExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 414;
				Match(COMMAND_START);
				State = 415;
				Match(COMMAND_JUMP);
				State = 416;
				Match(EXPRESSION_START);
				State = 417;
				expression(0);
				State = 418;
				Match(EXPRESSION_END);
				State = 419;
				Match(COMMAND_END);
				}
				break;
			case 3:
				_localctx = new DetourToNodeNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 421;
				Match(COMMAND_START);
				State = 422;
				Match(COMMAND_DETOUR);
				State = 423;
				((DetourToNodeNameContext)_localctx).destination = Match(ID);
				State = 424;
				Match(COMMAND_END);
				}
				break;
			case 4:
				_localctx = new DetourToExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 425;
				Match(COMMAND_START);
				State = 426;
				Match(COMMAND_DETOUR);
				State = 427;
				Match(EXPRESSION_START);
				State = 428;
				expression(0);
				State = 429;
				Match(EXPRESSION_END);
				State = 430;
				Match(COMMAND_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_RETURN() { return GetToken(YarnSpinnerParser.COMMAND_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434;
			Match(COMMAND_START);
			State = 435;
			Match(COMMAND_RETURN);
			State = 436;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Once_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Once_primary_clauseContext once_primary_clause() {
			return GetRuleContext<Once_primary_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENDONCE() { return GetToken(YarnSpinnerParser.COMMAND_ENDONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Once_alternate_clauseContext once_alternate_clause() {
			return GetRuleContext<Once_alternate_clauseContext>(0);
		}
		public Once_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_once_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterOnce_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitOnce_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnce_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Once_statementContext once_statement() {
		Once_statementContext _localctx = new Once_statementContext(Context, State);
		EnterRule(_localctx, 68, RULE_once_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			once_primary_clause();
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 439;
				once_alternate_clause();
				}
				break;
			}
			State = 442;
			Match(COMMAND_START);
			State = 443;
			Match(COMMAND_ENDONCE);
			State = 444;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Once_primary_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ONCE() { return GetToken(YarnSpinnerParser.COMMAND_ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Once_primary_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_once_primary_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterOnce_primary_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitOnce_primary_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnce_primary_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Once_primary_clauseContext once_primary_clause() {
		Once_primary_clauseContext _localctx = new Once_primary_clauseContext(Context, State);
		EnterRule(_localctx, 70, RULE_once_primary_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			Match(COMMAND_START);
			State = 447;
			Match(COMMAND_ONCE);
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_IF) {
				{
				State = 448;
				Match(COMMAND_IF);
				State = 449;
				expression(0);
				}
			}

			State = 452;
			Match(COMMAND_END);
			State = 456;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 453;
					statement();
					}
					} 
				}
				State = 458;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Once_alternate_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ELSE() { return GetToken(YarnSpinnerParser.COMMAND_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Once_alternate_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_once_alternate_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterOnce_alternate_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitOnce_alternate_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnce_alternate_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Once_alternate_clauseContext once_alternate_clause() {
		Once_alternate_clauseContext _localctx = new Once_alternate_clauseContext(Context, State);
		EnterRule(_localctx, 72, RULE_once_alternate_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(COMMAND_START);
			State = 460;
			Match(COMMAND_ELSE);
			State = 461;
			Match(COMMAND_END);
			State = 465;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 462;
					statement();
					}
					} 
				}
				State = 467;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structured_commandContext : ParserRuleContext {
		public IToken command_id;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Structured_command_valueContext[] structured_command_value() {
			return GetRuleContexts<Structured_command_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Structured_command_valueContext structured_command_value(int i) {
			return GetRuleContext<Structured_command_valueContext>(i);
		}
		public Structured_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structured_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterStructured_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitStructured_command(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructured_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Structured_commandContext structured_command() {
		Structured_commandContext _localctx = new Structured_commandContext(Context, State);
		EnterRule(_localctx, 74, RULE_structured_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			_localctx.command_id = Match(FUNC_ID);
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & 15855525891L) != 0)) {
				{
				{
				State = 469;
				structured_command_value();
				}
				}
				State = 474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structured_command_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		public Structured_command_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structured_command_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterStructured_command_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitStructured_command_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructured_command_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Structured_command_valueContext structured_command_value() {
		Structured_command_valueContext _localctx = new Structured_command_valueContext(Context, State);
		EnterRule(_localctx, 76, RULE_structured_command_value);
		try {
			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				Match(FUNC_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,92,480,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,1,0,5,0,80,8,0,10,0,12,0,83,9,0,1,0,4,0,
		86,8,0,11,0,12,0,87,1,1,1,1,1,1,1,2,1,2,4,2,95,8,2,11,2,12,2,96,1,2,1,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,3,4,111,8,4,1,5,1,5,1,5,1,5,
		1,5,3,5,118,8,5,3,5,120,8,5,1,6,5,6,123,8,6,10,6,12,6,126,9,6,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,142,8,7,10,7,12,7,
		145,9,7,1,7,3,7,148,8,7,1,8,1,8,3,8,152,8,8,1,8,5,8,155,8,8,10,8,12,8,
		158,9,8,1,8,1,8,1,9,4,9,163,8,9,11,9,12,9,164,1,9,1,9,1,9,1,9,4,9,171,
		8,9,11,9,12,9,172,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,3,11,187,8,11,1,11,3,11,190,8,11,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,3,12,202,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,219,8,12,10,12,12,12,222,9,
		12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,231,8,13,1,14,1,14,1,15,1,15,
		1,15,3,15,238,8,15,1,15,1,15,5,15,242,8,15,10,15,12,15,245,9,15,1,15,1,
		15,1,16,3,16,250,8,16,1,16,1,16,1,16,1,17,1,17,5,17,257,8,17,10,17,12,
		17,260,9,17,1,17,3,17,263,8,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
		1,18,5,18,274,8,18,10,18,12,18,277,9,18,1,19,1,19,1,19,1,19,1,19,5,19,
		284,8,19,10,19,12,19,287,9,19,1,20,1,20,1,20,1,20,5,20,293,8,20,10,20,
		12,20,296,9,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
		1,22,1,23,1,23,1,23,1,23,5,23,314,8,23,10,23,12,23,317,9,23,1,24,1,24,
		1,24,1,24,1,24,5,24,324,8,24,10,24,12,24,327,9,24,1,25,5,25,330,8,25,10,
		25,12,25,333,9,25,1,25,1,25,3,25,337,8,25,1,26,1,26,1,26,1,26,5,26,343,
		8,26,10,26,12,26,346,9,26,1,26,3,26,349,8,26,1,27,5,27,352,8,27,10,27,
		12,27,355,9,27,1,27,1,27,3,27,359,8,27,1,28,1,28,1,28,1,28,5,28,365,8,
		28,10,28,12,28,368,9,28,1,28,3,28,371,8,28,1,29,1,29,1,29,1,29,1,29,1,
		29,1,29,3,29,380,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,4,30,389,8,30,
		11,30,12,30,390,1,30,1,30,1,30,1,30,1,31,3,31,398,8,31,1,31,1,31,1,31,
		1,31,1,31,3,31,405,8,31,1,31,1,31,3,31,409,8,31,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,3,32,433,8,32,1,33,1,33,1,33,1,33,1,34,1,34,3,34,441,
		8,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,451,8,35,1,35,1,35,5,
		35,455,8,35,10,35,12,35,458,9,35,1,36,1,36,1,36,1,36,5,36,464,8,36,10,
		36,12,36,467,9,36,1,37,1,37,5,37,471,8,37,10,37,12,37,474,9,37,1,38,1,
		38,3,38,478,8,38,1,38,0,1,24,39,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		0,6,1,0,53,55,1,0,51,52,2,0,36,37,39,40,2,0,38,38,41,41,1,0,42,44,2,0,
		35,35,46,50,516,0,81,1,0,0,0,2,89,1,0,0,0,4,94,1,0,0,0,6,102,1,0,0,0,8,
		107,1,0,0,0,10,119,1,0,0,0,12,124,1,0,0,0,14,147,1,0,0,0,16,149,1,0,0,
		0,18,170,1,0,0,0,20,174,1,0,0,0,22,189,1,0,0,0,24,201,1,0,0,0,26,230,1,
		0,0,0,28,232,1,0,0,0,30,234,1,0,0,0,32,249,1,0,0,0,34,254,1,0,0,0,36,268,
		1,0,0,0,38,278,1,0,0,0,40,288,1,0,0,0,42,297,1,0,0,0,44,304,1,0,0,0,46,
		309,1,0,0,0,48,325,1,0,0,0,50,331,1,0,0,0,52,338,1,0,0,0,54,353,1,0,0,
		0,56,360,1,0,0,0,58,372,1,0,0,0,60,383,1,0,0,0,62,397,1,0,0,0,64,432,1,
		0,0,0,66,434,1,0,0,0,68,438,1,0,0,0,70,446,1,0,0,0,72,459,1,0,0,0,74,468,
		1,0,0,0,76,477,1,0,0,0,78,80,3,2,1,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,
		1,0,0,0,81,82,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,84,86,3,4,2,0,85,84,
		1,0,0,0,86,87,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,1,1,0,0,0,89,90,5,
		11,0,0,90,91,5,29,0,0,91,3,1,0,0,0,92,95,3,8,4,0,93,95,3,6,3,0,94,92,1,
		0,0,0,94,93,1,0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,98,1,
		0,0,0,98,99,5,9,0,0,99,100,3,12,6,0,100,101,5,15,0,0,101,5,1,0,0,0,102,
		103,5,7,0,0,103,104,5,10,0,0,104,105,3,10,5,0,105,106,5,6,0,0,106,7,1,
		0,0,0,107,108,5,8,0,0,108,110,5,10,0,0,109,111,5,13,0,0,110,109,1,0,0,
		0,110,111,1,0,0,0,111,9,1,0,0,0,112,120,3,24,12,0,113,120,5,31,0,0,114,
		117,5,81,0,0,115,116,5,68,0,0,116,118,3,24,12,0,117,115,1,0,0,0,117,118,
		1,0,0,0,118,120,1,0,0,0,119,112,1,0,0,0,119,113,1,0,0,0,119,114,1,0,0,
		0,120,11,1,0,0,0,121,123,3,14,7,0,122,121,1,0,0,0,123,126,1,0,0,0,124,
		122,1,0,0,0,124,125,1,0,0,0,125,13,1,0,0,0,126,124,1,0,0,0,127,148,3,16,
		8,0,128,148,3,34,17,0,129,148,3,42,21,0,130,148,3,50,25,0,131,148,3,44,
		22,0,132,148,3,46,23,0,133,148,3,58,29,0,134,148,3,60,30,0,135,148,3,64,
		32,0,136,148,3,66,33,0,137,148,3,54,27,0,138,148,3,68,34,0,139,143,5,1,
		0,0,140,142,3,14,7,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,
		144,1,0,0,0,144,146,1,0,0,0,145,143,1,0,0,0,146,148,5,2,0,0,147,127,1,
		0,0,0,147,128,1,0,0,0,147,129,1,0,0,0,147,130,1,0,0,0,147,131,1,0,0,0,
		147,132,1,0,0,0,147,133,1,0,0,0,147,134,1,0,0,0,147,135,1,0,0,0,147,136,
		1,0,0,0,147,137,1,0,0,0,147,138,1,0,0,0,147,139,1,0,0,0,148,15,1,0,0,0,
		149,151,3,18,9,0,150,152,3,22,11,0,151,150,1,0,0,0,151,152,1,0,0,0,152,
		156,1,0,0,0,153,155,3,20,10,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,
		1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,6,0,
		0,160,17,1,0,0,0,161,163,5,23,0,0,162,161,1,0,0,0,163,164,1,0,0,0,164,
		162,1,0,0,0,164,165,1,0,0,0,165,171,1,0,0,0,166,167,5,19,0,0,167,168,3,
		24,12,0,168,169,5,62,0,0,169,171,1,0,0,0,170,162,1,0,0,0,170,166,1,0,0,
		0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,19,1,0,0,0,174,175,
		5,11,0,0,175,176,5,29,0,0,176,21,1,0,0,0,177,178,5,18,0,0,178,179,5,68,
		0,0,179,180,3,24,12,0,180,181,5,84,0,0,181,190,1,0,0,0,182,183,5,18,0,
		0,183,186,5,81,0,0,184,185,5,68,0,0,185,187,3,24,12,0,186,184,1,0,0,0,
		186,187,1,0,0,0,187,188,1,0,0,0,188,190,5,84,0,0,189,177,1,0,0,0,189,182,
		1,0,0,0,190,23,1,0,0,0,191,192,6,12,-1,0,192,193,5,56,0,0,193,194,3,24,
		12,0,194,195,5,57,0,0,195,202,1,0,0,0,196,197,5,52,0,0,197,202,3,24,12,
		8,198,199,5,45,0,0,199,202,3,24,12,7,200,202,3,26,13,0,201,191,1,0,0,0,
		201,196,1,0,0,0,201,198,1,0,0,0,201,200,1,0,0,0,202,220,1,0,0,0,203,204,
		10,6,0,0,204,205,7,0,0,0,205,219,3,24,12,7,206,207,10,5,0,0,207,208,7,
		1,0,0,208,219,3,24,12,6,209,210,10,4,0,0,210,211,7,2,0,0,211,219,3,24,
		12,5,212,213,10,3,0,0,213,214,7,3,0,0,214,219,3,24,12,4,215,216,10,2,0,
		0,216,217,7,4,0,0,217,219,3,24,12,3,218,203,1,0,0,0,218,206,1,0,0,0,218,
		209,1,0,0,0,218,212,1,0,0,0,218,215,1,0,0,0,219,222,1,0,0,0,220,218,1,
		0,0,0,220,221,1,0,0,0,221,25,1,0,0,0,222,220,1,0,0,0,223,231,5,65,0,0,
		224,231,5,32,0,0,225,231,5,33,0,0,226,231,3,28,14,0,227,231,5,60,0,0,228,
		231,3,30,15,0,229,231,3,32,16,0,230,223,1,0,0,0,230,224,1,0,0,0,230,225,
		1,0,0,0,230,226,1,0,0,0,230,227,1,0,0,0,230,228,1,0,0,0,230,229,1,0,0,
		0,231,27,1,0,0,0,232,233,5,63,0,0,233,29,1,0,0,0,234,235,5,61,0,0,235,
		237,5,56,0,0,236,238,3,24,12,0,237,236,1,0,0,0,237,238,1,0,0,0,238,243,
		1,0,0,0,239,240,5,58,0,0,240,242,3,24,12,0,241,239,1,0,0,0,242,245,1,0,
		0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,243,1,0,0,0,246,
		247,5,57,0,0,247,31,1,0,0,0,248,250,5,61,0,0,249,248,1,0,0,0,249,250,1,
		0,0,0,250,251,1,0,0,0,251,252,5,64,0,0,252,253,5,61,0,0,253,33,1,0,0,0,
		254,258,3,36,18,0,255,257,3,38,19,0,256,255,1,0,0,0,257,260,1,0,0,0,258,
		256,1,0,0,0,258,259,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,261,263,3,
		40,20,0,262,261,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,265,5,18,0,
		0,265,266,5,72,0,0,266,267,5,84,0,0,267,35,1,0,0,0,268,269,5,18,0,0,269,
		270,5,68,0,0,270,271,3,24,12,0,271,275,5,84,0,0,272,274,3,14,7,0,273,272,
		1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,37,1,0,0,0,
		277,275,1,0,0,0,278,279,5,18,0,0,279,280,5,69,0,0,280,281,3,24,12,0,281,
		285,5,84,0,0,282,284,3,14,7,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,
		1,0,0,0,285,286,1,0,0,0,286,39,1,0,0,0,287,285,1,0,0,0,288,289,5,18,0,
		0,289,290,5,70,0,0,290,294,5,84,0,0,291,293,3,14,7,0,292,291,1,0,0,0,293,
		296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,41,1,0,0,0,296,294,1,0,
		0,0,297,298,5,18,0,0,298,299,5,71,0,0,299,300,3,28,14,0,300,301,7,5,0,
		0,301,302,3,24,12,0,302,303,5,84,0,0,303,43,1,0,0,0,304,305,5,18,0,0,305,
		306,5,73,0,0,306,307,3,30,15,0,307,308,5,84,0,0,308,45,1,0,0,0,309,310,
		5,18,0,0,310,311,3,48,24,0,311,315,5,86,0,0,312,314,3,20,10,0,313,312,
		1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,47,1,0,0,0,
		317,315,1,0,0,0,318,324,5,88,0,0,319,320,5,87,0,0,320,321,3,24,12,0,321,
		322,5,62,0,0,322,324,1,0,0,0,323,318,1,0,0,0,323,319,1,0,0,0,324,327,1,
		0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,49,1,0,0,0,327,325,1,0,0,0,328,
		330,3,52,26,0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,
		1,0,0,0,332,334,1,0,0,0,333,331,1,0,0,0,334,336,3,52,26,0,335,337,5,3,
		0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,51,1,0,0,0,338,339,5,16,0,0,339,
		348,3,16,8,0,340,344,5,1,0,0,341,343,3,14,7,0,342,341,1,0,0,0,343,346,
		1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,
		0,347,349,5,2,0,0,348,340,1,0,0,0,348,349,1,0,0,0,349,53,1,0,0,0,350,352,
		3,56,28,0,351,350,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,
		0,0,354,356,1,0,0,0,355,353,1,0,0,0,356,358,3,56,28,0,357,359,5,3,0,0,
		358,357,1,0,0,0,358,359,1,0,0,0,359,55,1,0,0,0,360,361,5,17,0,0,361,370,
		3,16,8,0,362,366,5,1,0,0,363,365,3,14,7,0,364,363,1,0,0,0,365,368,1,0,
		0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,
		371,5,2,0,0,370,362,1,0,0,0,370,371,1,0,0,0,371,57,1,0,0,0,372,373,5,18,
		0,0,373,374,5,74,0,0,374,375,3,28,14,0,375,376,5,35,0,0,376,379,3,24,12,
		0,377,378,5,59,0,0,378,380,5,61,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,
		381,1,0,0,0,381,382,5,84,0,0,382,59,1,0,0,0,383,384,5,18,0,0,384,385,5,
		78,0,0,385,386,5,8,0,0,386,388,5,84,0,0,387,389,3,62,31,0,388,387,1,0,
		0,0,389,390,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,
		393,5,18,0,0,393,394,5,80,0,0,394,395,5,84,0,0,395,61,1,0,0,0,396,398,
		5,1,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,18,0,
		0,400,401,5,79,0,0,401,404,5,61,0,0,402,403,5,35,0,0,403,405,3,26,13,0,
		404,402,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,408,5,84,0,0,407,409,
		5,2,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,63,1,0,0,0,410,411,5,18,0,
		0,411,412,5,75,0,0,412,413,5,8,0,0,413,433,5,84,0,0,414,415,5,18,0,0,415,
		416,5,75,0,0,416,417,5,19,0,0,417,418,3,24,12,0,418,419,5,62,0,0,419,420,
		5,84,0,0,420,433,1,0,0,0,421,422,5,18,0,0,422,423,5,76,0,0,423,424,5,8,
		0,0,424,433,5,84,0,0,425,426,5,18,0,0,426,427,5,76,0,0,427,428,5,19,0,
		0,428,429,3,24,12,0,429,430,5,62,0,0,430,431,5,84,0,0,431,433,1,0,0,0,
		432,410,1,0,0,0,432,414,1,0,0,0,432,421,1,0,0,0,432,425,1,0,0,0,433,65,
		1,0,0,0,434,435,5,18,0,0,435,436,5,77,0,0,436,437,5,84,0,0,437,67,1,0,
		0,0,438,440,3,70,35,0,439,441,3,72,36,0,440,439,1,0,0,0,440,441,1,0,0,
		0,441,442,1,0,0,0,442,443,5,18,0,0,443,444,5,82,0,0,444,445,5,84,0,0,445,
		69,1,0,0,0,446,447,5,18,0,0,447,450,5,81,0,0,448,449,5,68,0,0,449,451,
		3,24,12,0,450,448,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,456,5,84,
		0,0,453,455,3,14,7,0,454,453,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,
		457,1,0,0,0,457,71,1,0,0,0,458,456,1,0,0,0,459,460,5,18,0,0,460,461,5,
		70,0,0,461,465,5,84,0,0,462,464,3,14,7,0,463,462,1,0,0,0,464,467,1,0,0,
		0,465,463,1,0,0,0,465,466,1,0,0,0,466,73,1,0,0,0,467,465,1,0,0,0,468,472,
		5,61,0,0,469,471,3,76,38,0,470,469,1,0,0,0,471,474,1,0,0,0,472,470,1,0,
		0,0,472,473,1,0,0,0,473,75,1,0,0,0,474,472,1,0,0,0,475,478,3,24,12,0,476,
		478,5,61,0,0,477,475,1,0,0,0,477,476,1,0,0,0,478,77,1,0,0,0,52,81,87,94,
		96,110,117,119,124,143,147,151,156,164,170,172,186,189,201,218,220,230,
		237,243,249,258,262,275,285,294,315,323,325,331,336,344,348,353,358,366,
		370,379,390,397,404,408,432,440,450,456,465,472,477
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Yarn.Compiler

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/desplesda/Work/YarnSpinner/YarnSpinner.Compiler/Grammars/YarnSpinnerParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Yarn.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class YarnSpinnerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, BLANK_LINE_FOLLOWING_OPTION=3, WS=4, COMMENT=5, NEWLINE=6, 
		ID=7, BODY_START=8, HEADER_DELIMITER=9, HASHTAG=10, REST_OF_LINE=11, BODY_WS=12, 
		BODY_END=13, SHORTCUT_ARROW=14, LINE_GROUP_ARROW=15, COMMAND_START=16, 
		EXPRESSION_START=17, ESCAPED_ANY=18, TEXT_ESCAPE=19, TEXT_COMMENT=20, 
		TEXT=21, UNESCAPABLE_CHARACTER=22, TEXT_COMMANDHASHTAG_WS=23, TEXT_COMMANDHASHTAG_COMMENT=24, 
		TEXT_COMMANDHASHTAG_ERROR=25, HASHTAG_WS=26, HASHTAG_TEXT=27, EXPR_WS=28, 
		EXPRESSION_WHEN_ALWAYS=29, KEYWORD_TRUE=30, KEYWORD_FALSE=31, KEYWORD_NULL=32, 
		OPERATOR_ASSIGNMENT=33, OPERATOR_LOGICAL_LESS_THAN_EQUALS=34, OPERATOR_LOGICAL_GREATER_THAN_EQUALS=35, 
		OPERATOR_LOGICAL_EQUALS=36, OPERATOR_LOGICAL_LESS=37, OPERATOR_LOGICAL_GREATER=38, 
		OPERATOR_LOGICAL_NOT_EQUALS=39, OPERATOR_LOGICAL_AND=40, OPERATOR_LOGICAL_OR=41, 
		OPERATOR_LOGICAL_XOR=42, OPERATOR_LOGICAL_NOT=43, OPERATOR_MATHS_ADDITION_EQUALS=44, 
		OPERATOR_MATHS_SUBTRACTION_EQUALS=45, OPERATOR_MATHS_MULTIPLICATION_EQUALS=46, 
		OPERATOR_MATHS_MODULUS_EQUALS=47, OPERATOR_MATHS_DIVISION_EQUALS=48, OPERATOR_MATHS_ADDITION=49, 
		OPERATOR_MATHS_SUBTRACTION=50, OPERATOR_MATHS_MULTIPLICATION=51, OPERATOR_MATHS_DIVISION=52, 
		OPERATOR_MATHS_MODULUS=53, LPAREN=54, RPAREN=55, COMMA=56, EXPRESSION_AS=57, 
		STRING=58, FUNC_ID=59, EXPRESSION_END=60, VAR_ID=61, DOT=62, NUMBER=63, 
		COMMAND_NEWLINE=64, COMMAND_WS=65, COMMAND_IF=66, COMMAND_ELSEIF=67, COMMAND_ELSE=68, 
		COMMAND_SET=69, COMMAND_ENDIF=70, COMMAND_CALL=71, COMMAND_DECLARE=72, 
		COMMAND_JUMP=73, COMMAND_DETOUR=74, COMMAND_RETURN=75, COMMAND_ENUM=76, 
		COMMAND_CASE=77, COMMAND_ENDENUM=78, COMMAND_ONCE=79, COMMAND_ENDONCE=80, 
		COMMAND_LOCAL=81, COMMAND_END=82, COMMAND_TEXT_NEWLINE=83, COMMAND_TEXT_END=84, 
		COMMAND_EXPRESSION_START=85, COMMAND_TEXT=86, COMMAND_ID_NEWLINE=87, TYPE_STRING=88, 
		TYPE_NUMBER=89, TYPE_BOOL=90;
	public const int
		RULE_dialogue = 0, RULE_file_hashtag = 1, RULE_node = 2, RULE_header = 3, 
		RULE_header_when_expression = 4, RULE_body = 5, RULE_statement = 6, RULE_line_statement = 7, 
		RULE_line_formatted_text = 8, RULE_hashtag = 9, RULE_line_condition = 10, 
		RULE_expression = 11, RULE_value = 12, RULE_variable = 13, RULE_function_call = 14, 
		RULE_typeMemberReference = 15, RULE_if_statement = 16, RULE_if_clause = 17, 
		RULE_else_if_clause = 18, RULE_else_clause = 19, RULE_set_statement = 20, 
		RULE_call_statement = 21, RULE_command_statement = 22, RULE_command_formatted_text = 23, 
		RULE_shortcut_option_statement = 24, RULE_shortcut_option = 25, RULE_line_group_statement = 26, 
		RULE_line_group_item = 27, RULE_declare_statement = 28, RULE_enum_statement = 29, 
		RULE_enum_case_statement = 30, RULE_jump_statement = 31, RULE_return_statement = 32, 
		RULE_once_statement = 33, RULE_once_primary_clause = 34, RULE_once_alternate_clause = 35;
	public static readonly string[] ruleNames = {
		"dialogue", "file_hashtag", "node", "header", "header_when_expression", 
		"body", "statement", "line_statement", "line_formatted_text", "hashtag", 
		"line_condition", "expression", "value", "variable", "function_call", 
		"typeMemberReference", "if_statement", "if_clause", "else_if_clause", 
		"else_clause", "set_statement", "call_statement", "command_statement", 
		"command_formatted_text", "shortcut_option_statement", "shortcut_option", 
		"line_group_statement", "line_group_item", "declare_statement", "enum_statement", 
		"enum_case_statement", "jump_statement", "return_statement", "once_statement", 
		"once_primary_clause", "once_alternate_clause"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'---'", null, "'#'", 
		null, null, "'==='", "'->'", "'=>'", "'<<'", null, null, "'\\'", null, 
		null, null, null, null, null, null, null, null, "'always'", "'true'", 
		"'false'", "'null'", null, null, null, null, null, null, null, null, null, 
		null, null, "'+='", "'-='", "'*='", "'%='", "'/='", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'('", "')'", "','", "'as'", null, null, "'}'", null, "'.'", 
		null, null, null, null, null, null, null, "'endif'", null, null, null, 
		null, null, null, null, null, "'once'", "'endonce'", null, null, null, 
		null, "'{'", null, null, "'string'", "'number'", "'bool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "BLANK_LINE_FOLLOWING_OPTION", "WS", "COMMENT", 
		"NEWLINE", "ID", "BODY_START", "HEADER_DELIMITER", "HASHTAG", "REST_OF_LINE", 
		"BODY_WS", "BODY_END", "SHORTCUT_ARROW", "LINE_GROUP_ARROW", "COMMAND_START", 
		"EXPRESSION_START", "ESCAPED_ANY", "TEXT_ESCAPE", "TEXT_COMMENT", "TEXT", 
		"UNESCAPABLE_CHARACTER", "TEXT_COMMANDHASHTAG_WS", "TEXT_COMMANDHASHTAG_COMMENT", 
		"TEXT_COMMANDHASHTAG_ERROR", "HASHTAG_WS", "HASHTAG_TEXT", "EXPR_WS", 
		"EXPRESSION_WHEN_ALWAYS", "KEYWORD_TRUE", "KEYWORD_FALSE", "KEYWORD_NULL", 
		"OPERATOR_ASSIGNMENT", "OPERATOR_LOGICAL_LESS_THAN_EQUALS", "OPERATOR_LOGICAL_GREATER_THAN_EQUALS", 
		"OPERATOR_LOGICAL_EQUALS", "OPERATOR_LOGICAL_LESS", "OPERATOR_LOGICAL_GREATER", 
		"OPERATOR_LOGICAL_NOT_EQUALS", "OPERATOR_LOGICAL_AND", "OPERATOR_LOGICAL_OR", 
		"OPERATOR_LOGICAL_XOR", "OPERATOR_LOGICAL_NOT", "OPERATOR_MATHS_ADDITION_EQUALS", 
		"OPERATOR_MATHS_SUBTRACTION_EQUALS", "OPERATOR_MATHS_MULTIPLICATION_EQUALS", 
		"OPERATOR_MATHS_MODULUS_EQUALS", "OPERATOR_MATHS_DIVISION_EQUALS", "OPERATOR_MATHS_ADDITION", 
		"OPERATOR_MATHS_SUBTRACTION", "OPERATOR_MATHS_MULTIPLICATION", "OPERATOR_MATHS_DIVISION", 
		"OPERATOR_MATHS_MODULUS", "LPAREN", "RPAREN", "COMMA", "EXPRESSION_AS", 
		"STRING", "FUNC_ID", "EXPRESSION_END", "VAR_ID", "DOT", "NUMBER", "COMMAND_NEWLINE", 
		"COMMAND_WS", "COMMAND_IF", "COMMAND_ELSEIF", "COMMAND_ELSE", "COMMAND_SET", 
		"COMMAND_ENDIF", "COMMAND_CALL", "COMMAND_DECLARE", "COMMAND_JUMP", "COMMAND_DETOUR", 
		"COMMAND_RETURN", "COMMAND_ENUM", "COMMAND_CASE", "COMMAND_ENDENUM", "COMMAND_ONCE", 
		"COMMAND_ENDONCE", "COMMAND_LOCAL", "COMMAND_END", "COMMAND_TEXT_NEWLINE", 
		"COMMAND_TEXT_END", "COMMAND_EXPRESSION_START", "COMMAND_TEXT", "COMMAND_ID_NEWLINE", 
		"TYPE_STRING", "TYPE_NUMBER", "TYPE_BOOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YarnSpinnerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YarnSpinnerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YarnSpinnerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YarnSpinnerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DialogueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_hashtagContext[] file_hashtag() {
			return GetRuleContexts<File_hashtagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_hashtagContext file_hashtag(int i) {
			return GetRuleContext<File_hashtagContext>(i);
		}
		public DialogueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueContext dialogue() {
		DialogueContext _localctx = new DialogueContext(Context, State);
		EnterRule(_localctx, 0, RULE_dialogue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 72;
				file_hashtag();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 78;
				node();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_hashtagContext : ParserRuleContext {
		public IToken text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public File_hashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_hashtag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFile_hashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFile_hashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_hashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_hashtagContext file_hashtag() {
		File_hashtagContext _localctx = new File_hashtagContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(HASHTAG);
			State = 84;
			_localctx.text = Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_START() { return GetToken(YarnSpinnerParser.BODY_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_END() { return GetToken(YarnSpinnerParser.BODY_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext[] header() {
			return GetRuleContexts<HeaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext header(int i) {
			return GetRuleContext<HeaderContext>(i);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_node);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 86;
				header();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 91;
			Match(BODY_START);
			State = 92;
			body();
			State = 93;
			Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public IToken header_key;
		public IToken header_value;
		public Header_when_expressionContext header_expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_DELIMITER() { return GetToken(YarnSpinnerParser.HEADER_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(YarnSpinnerParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REST_OF_LINE() { return GetToken(YarnSpinnerParser.REST_OF_LINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Header_when_expressionContext header_when_expression() {
			return GetRuleContext<Header_when_expressionContext>(0);
		}
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 6, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_localctx.header_key = Match(ID);
			State = 96;
			Match(HEADER_DELIMITER);
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REST_OF_LINE:
				{
				State = 97;
				_localctx.header_value = Match(REST_OF_LINE);
				}
				break;
			case EXPRESSION_WHEN_ALWAYS:
			case KEYWORD_TRUE:
			case KEYWORD_FALSE:
			case OPERATOR_LOGICAL_NOT:
			case OPERATOR_MATHS_SUBTRACTION:
			case LPAREN:
			case STRING:
			case FUNC_ID:
			case VAR_ID:
			case DOT:
			case NUMBER:
			case COMMAND_ONCE:
				{
				State = 98;
				_localctx.header_expression = header_when_expression();
				State = 99;
				Match(NEWLINE);
				}
				break;
			case ID:
			case BODY_START:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Header_when_expressionContext : ParserRuleContext {
		public IToken always;
		public IToken once;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_WHEN_ALWAYS() { return GetToken(YarnSpinnerParser.EXPRESSION_WHEN_ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ONCE() { return GetToken(YarnSpinnerParser.COMMAND_ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		public Header_when_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header_when_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHeader_when_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHeader_when_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader_when_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Header_when_expressionContext header_when_expression() {
		Header_when_expressionContext _localctx = new Header_when_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_header_when_expression);
		int _la;
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_TRUE:
			case KEYWORD_FALSE:
			case OPERATOR_LOGICAL_NOT:
			case OPERATOR_MATHS_SUBTRACTION:
			case LPAREN:
			case STRING:
			case FUNC_ID:
			case VAR_ID:
			case DOT:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				expression(0);
				}
				break;
			case EXPRESSION_WHEN_ALWAYS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 104;
				_localctx.always = Match(EXPRESSION_WHEN_ALWAYS);
				}
				}
				break;
			case COMMAND_ONCE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				_localctx.once = Match(COMMAND_ONCE);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMAND_IF) {
					{
					State = 106;
					Match(COMMAND_IF);
					State = 107;
					expression(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2342914L) != 0)) {
				{
				{
				State = 112;
				statement();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shortcut_option_statementContext shortcut_option_statement() {
			return GetRuleContext<Shortcut_option_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_statementContext call_statement() {
			return GetRuleContext<Call_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Command_statementContext command_statement() {
			return GetRuleContext<Command_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_statementContext enum_statement() {
			return GetRuleContext<Enum_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_group_statementContext line_group_statement() {
			return GetRuleContext<Line_group_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Once_statementContext once_statement() {
			return GetRuleContext<Once_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				line_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				if_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				set_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				shortcut_option_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 122;
				call_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 123;
				command_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 124;
				declare_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 125;
				enum_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 126;
				jump_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 127;
				return_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 128;
				line_group_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 129;
				once_statement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 130;
				Match(INDENT);
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2342914L) != 0)) {
					{
					{
					State = 131;
					statement();
					}
					}
					State = 136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 137;
				Match(DEDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_formatted_textContext line_formatted_text() {
			return GetRuleContext<Line_formatted_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(YarnSpinnerParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_conditionContext line_condition() {
			return GetRuleContext<Line_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Line_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_statementContext line_statement() {
		Line_statementContext _localctx = new Line_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_line_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			line_formatted_text();
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_START) {
				{
				State = 141;
				line_condition();
				}
			}

			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 144;
				hashtag();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 150;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_formatted_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION_START() { return GetTokens(YarnSpinnerParser.EXPRESSION_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(YarnSpinnerParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(YarnSpinnerParser.TEXT, i);
		}
		public Line_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_formatted_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_formatted_textContext line_formatted_text() {
		Line_formatted_textContext _localctx = new Line_formatted_textContext(Context, State);
		EnterRule(_localctx, 16, RULE_line_formatted_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 161;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 153;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 152;
							Match(TEXT);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 155;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case EXPRESSION_START:
					{
					State = 157;
					Match(EXPRESSION_START);
					State = 158;
					expression(0);
					State = 159;
					Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXPRESSION_START || _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashtagContext : ParserRuleContext {
		public IToken text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public HashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hashtag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HashtagContext hashtag() {
		HashtagContext _localctx = new HashtagContext(Context, State);
		EnterRule(_localctx, 18, RULE_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(HASHTAG);
			State = 166;
			_localctx.text = Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_conditionContext : ParserRuleContext {
		public Line_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_condition; } }
	 
		public Line_conditionContext() { }
		public virtual void CopyFrom(Line_conditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LineOnceConditionContext : Line_conditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ONCE() { return GetToken(YarnSpinnerParser.COMMAND_ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LineOnceConditionContext(Line_conditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLineOnceCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLineOnceCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineOnceCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LineConditionContext : Line_conditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public LineConditionContext(Line_conditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLineCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLineCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_conditionContext line_condition() {
		Line_conditionContext _localctx = new Line_conditionContext(Context, State);
		EnterRule(_localctx, 20, RULE_line_condition);
		int _la;
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new LineConditionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				Match(COMMAND_START);
				State = 169;
				Match(COMMAND_IF);
				State = 170;
				expression(0);
				State = 171;
				Match(COMMAND_END);
				}
				break;
			case 2:
				_localctx = new LineOnceConditionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				Match(COMMAND_START);
				State = 174;
				Match(COMMAND_ONCE);
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMAND_IF) {
					{
					State = 175;
					Match(COMMAND_IF);
					State = 176;
					expression(0);
					}
				}

				State = 179;
				Match(COMMAND_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpParensContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YarnSpinnerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YarnSpinnerParser.RPAREN, 0); }
		public ExpParensContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMultDivModContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MULTIPLICATION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MULTIPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_DIVISION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MODULUS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MODULUS, 0); }
		public ExpMultDivModContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpMultDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpMultDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMultDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpComparisonContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_LESS_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS_THAN_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_GREATER_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER_THAN_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_LESS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_GREATER() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER, 0); }
		public ExpComparisonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNegativeContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpNegativeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAndOrXorContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_AND() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_OR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_XOR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_XOR, 0); }
		public ExpAndOrXorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAndOrXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAndOrXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAndOrXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_ADDITION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_ADDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNotContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_NOT() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT, 0); }
		public ExpNotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpValueContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpValueContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpEqualityContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_NOT_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT_EQUALS, 0); }
		public ExpEqualityContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ExpParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 183;
				Match(LPAREN);
				State = 184;
				expression(0);
				State = 185;
				Match(RPAREN);
				}
				break;
			case OPERATOR_MATHS_SUBTRACTION:
				{
				_localctx = new ExpNegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 187;
				((ExpNegativeContext)_localctx).op = Match(OPERATOR_MATHS_SUBTRACTION);
				State = 188;
				expression(8);
				}
				break;
			case OPERATOR_LOGICAL_NOT:
				{
				_localctx = new ExpNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 189;
				((ExpNotContext)_localctx).op = Match(OPERATOR_LOGICAL_NOT);
				State = 190;
				expression(7);
				}
				break;
			case KEYWORD_TRUE:
			case KEYWORD_FALSE:
			case STRING:
			case FUNC_ID:
			case VAR_ID:
			case DOT:
			case NUMBER:
				{
				_localctx = new ExpValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 191;
				value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 211;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 209;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new ExpMultDivModContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 194;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 195;
						((ExpMultDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 15762598695796736L) != 0)) ) {
							((ExpMultDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 196;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 197;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 198;
						((ExpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_MATHS_ADDITION || _la==OPERATOR_MATHS_SUBTRACTION) ) {
							((ExpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 199;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 200;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 201;
						((ExpComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 463856467968L) != 0)) ) {
							((ExpComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 202;
						expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpEqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 203;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 204;
						((ExpEqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_LOGICAL_EQUALS || _la==OPERATOR_LOGICAL_NOT_EQUALS) ) {
							((ExpEqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 205;
						expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpAndOrXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 206;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 207;
						((ExpAndOrXorContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) ) {
							((ExpAndOrXorContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 208;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueNumberContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(YarnSpinnerParser.NUMBER, 0); }
		public ValueNumberContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TRUE() { return GetToken(YarnSpinnerParser.KEYWORD_TRUE, 0); }
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FALSE() { return GetToken(YarnSpinnerParser.KEYWORD_FALSE, 0); }
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFuncContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ValueFuncContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueVarContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueVarContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(YarnSpinnerParser.STRING, 0); }
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTypeMemberReferenceContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberReferenceContext typeMemberReference() {
			return GetRuleContext<TypeMemberReferenceContext>(0);
		}
		public ValueTypeMemberReferenceContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypeMemberReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_value);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				Match(KEYWORD_TRUE);
				}
				break;
			case 3:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 216;
				Match(KEYWORD_FALSE);
				}
				break;
			case 4:
				_localctx = new ValueVarContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 217;
				variable();
				}
				break;
			case 5:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 218;
				Match(STRING);
				}
				break;
			case 6:
				_localctx = new ValueFuncContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 219;
				function_call();
				}
				break;
			case 7:
				_localctx = new ValueTypeMemberReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 220;
				typeMemberReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ID() { return GetToken(YarnSpinnerParser.VAR_ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(VAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YarnSpinnerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YarnSpinnerParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YarnSpinnerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YarnSpinnerParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 28, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(FUNC_ID);
			State = 226;
			Match(LPAREN);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1422002783027986432L) != 0)) {
				{
				State = 227;
				expression(0);
				}
			}

			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 230;
				Match(COMMA);
				State = 231;
				expression(0);
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberReferenceContext : ParserRuleContext {
		public IToken typeName;
		public IToken memberName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YarnSpinnerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNC_ID() { return GetTokens(YarnSpinnerParser.FUNC_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID(int i) {
			return GetToken(YarnSpinnerParser.FUNC_ID, i);
		}
		public TypeMemberReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMemberReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMemberReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberReferenceContext typeMemberReference() {
		TypeMemberReferenceContext _localctx = new TypeMemberReferenceContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeMemberReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FUNC_ID) {
				{
				State = 239;
				_localctx.typeName = Match(FUNC_ID);
				}
			}

			State = 242;
			Match(DOT);
			State = 243;
			_localctx.memberName = Match(FUNC_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENDIF() { return GetToken(YarnSpinnerParser.COMMAND_ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_clauseContext[] else_if_clause() {
			return GetRuleContexts<Else_if_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_clauseContext else_if_clause(int i) {
			return GetRuleContext<Else_if_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			if_clause();
			State = 249;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 246;
					else_if_clause();
					}
					} 
				}
				State = 251;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 252;
				else_clause();
				}
				break;
			}
			State = 255;
			Match(COMMAND_START);
			State = 256;
			Match(COMMAND_ENDIF);
			State = 257;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterIf_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitIf_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_clauseContext if_clause() {
		If_clauseContext _localctx = new If_clauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(COMMAND_START);
			State = 260;
			Match(COMMAND_IF);
			State = 261;
			expression(0);
			State = 262;
			Match(COMMAND_END);
			State = 266;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 263;
					statement();
					}
					} 
				}
				State = 268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ELSEIF() { return GetToken(YarnSpinnerParser.COMMAND_ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_if_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterElse_if_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitElse_if_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_clauseContext else_if_clause() {
		Else_if_clauseContext _localctx = new Else_if_clauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_else_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(COMMAND_START);
			State = 270;
			Match(COMMAND_ELSEIF);
			State = 271;
			expression(0);
			State = 272;
			Match(COMMAND_END);
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 273;
					statement();
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ELSE() { return GetToken(YarnSpinnerParser.COMMAND_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterElse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitElse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_clauseContext else_clause() {
		Else_clauseContext _localctx = new Else_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_else_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(COMMAND_START);
			State = 280;
			Match(COMMAND_ELSE);
			State = 281;
			Match(COMMAND_END);
			State = 285;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 282;
					statement();
					}
					} 
				}
				State = 287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_SET() { return GetToken(YarnSpinnerParser.COMMAND_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MULTIPLICATION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MULTIPLICATION_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_DIVISION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_DIVISION_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MODULUS_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MODULUS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_ADDITION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_ADDITION_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_SUBTRACTION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION_EQUALS, 0); }
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_set_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(COMMAND_START);
			State = 289;
			Match(COMMAND_SET);
			State = 290;
			variable();
			State = 291;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 545366357311488L) != 0)) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 292;
			expression(0);
			State = 293;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_CALL() { return GetToken(YarnSpinnerParser.COMMAND_CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCall_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCall_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_statementContext call_statement() {
		Call_statementContext _localctx = new Call_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_call_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(COMMAND_START);
			State = 296;
			Match(COMMAND_CALL);
			State = 297;
			function_call();
			State = 298;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Command_formatted_textContext command_formatted_text() {
			return GetRuleContext<Command_formatted_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_TEXT_END() { return GetToken(YarnSpinnerParser.COMMAND_TEXT_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Command_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCommand_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCommand_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_statementContext command_statement() {
		Command_statementContext _localctx = new Command_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_command_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(COMMAND_START);
			State = 301;
			command_formatted_text();
			State = 302;
			Match(COMMAND_TEXT_END);
			{
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 303;
				hashtag();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_formatted_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_TEXT() { return GetTokens(YarnSpinnerParser.COMMAND_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_TEXT(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_EXPRESSION_START() { return GetTokens(YarnSpinnerParser.COMMAND_EXPRESSION_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_EXPRESSION_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		public Command_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_formatted_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCommand_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCommand_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_formatted_textContext command_formatted_text() {
		Command_formatted_textContext _localctx = new Command_formatted_textContext(Context, State);
		EnterRule(_localctx, 46, RULE_command_formatted_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMAND_EXPRESSION_START || _la==COMMAND_TEXT) {
				{
				State = 314;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMAND_TEXT:
					{
					State = 309;
					Match(COMMAND_TEXT);
					}
					break;
				case COMMAND_EXPRESSION_START:
					{
					State = 310;
					Match(COMMAND_EXPRESSION_START);
					State = 311;
					expression(0);
					State = 312;
					Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_option_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shortcut_optionContext[] shortcut_option() {
			return GetRuleContexts<Shortcut_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shortcut_optionContext shortcut_option(int i) {
			return GetRuleContext<Shortcut_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK_LINE_FOLLOWING_OPTION() { return GetToken(YarnSpinnerParser.BLANK_LINE_FOLLOWING_OPTION, 0); }
		public Shortcut_option_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_option_statementContext shortcut_option_statement() {
		Shortcut_option_statementContext _localctx = new Shortcut_option_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_shortcut_option_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 319;
					shortcut_option();
					}
					} 
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			{
			State = 325;
			shortcut_option();
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLANK_LINE_FOLLOWING_OPTION) {
				{
				State = 326;
				Match(BLANK_LINE_FOLLOWING_OPTION);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTCUT_ARROW() { return GetToken(YarnSpinnerParser.SHORTCUT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Shortcut_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_optionContext shortcut_option() {
		Shortcut_optionContext _localctx = new Shortcut_optionContext(Context, State);
		EnterRule(_localctx, 50, RULE_shortcut_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(SHORTCUT_ARROW);
			State = 330;
			line_statement();
			State = 339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 331;
				Match(INDENT);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2342914L) != 0)) {
					{
					{
					State = 332;
					statement();
					}
					}
					State = 337;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 338;
				Match(DEDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_group_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_group_itemContext[] line_group_item() {
			return GetRuleContexts<Line_group_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_group_itemContext line_group_item(int i) {
			return GetRuleContext<Line_group_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK_LINE_FOLLOWING_OPTION() { return GetToken(YarnSpinnerParser.BLANK_LINE_FOLLOWING_OPTION, 0); }
		public Line_group_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_group_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_group_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_group_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_group_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_group_statementContext line_group_statement() {
		Line_group_statementContext _localctx = new Line_group_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_line_group_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 341;
					line_group_item();
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			{
			State = 347;
			line_group_item();
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLANK_LINE_FOLLOWING_OPTION) {
				{
				State = 348;
				Match(BLANK_LINE_FOLLOWING_OPTION);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_group_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_GROUP_ARROW() { return GetToken(YarnSpinnerParser.LINE_GROUP_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Line_group_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_group_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_group_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_group_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_group_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_group_itemContext line_group_item() {
		Line_group_itemContext _localctx = new Line_group_itemContext(Context, State);
		EnterRule(_localctx, 54, RULE_line_group_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(LINE_GROUP_ARROW);
			State = 352;
			line_statement();
			State = 361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 353;
				Match(INDENT);
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2342914L) != 0)) {
					{
					{
					State = 354;
					statement();
					}
					}
					State = 359;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 360;
				Match(DEDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_DECLARE() { return GetToken(YarnSpinnerParser.COMMAND_DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_AS() { return GetToken(YarnSpinnerParser.EXPRESSION_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_declare_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(COMMAND_START);
			State = 364;
			Match(COMMAND_DECLARE);
			State = 365;
			variable();
			State = 366;
			Match(OPERATOR_ASSIGNMENT);
			State = 367;
			expression(0);
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPRESSION_AS) {
				{
				State = 368;
				Match(EXPRESSION_AS);
				State = 369;
				_localctx.type = Match(FUNC_ID);
				}
			}

			State = 372;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_statementContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_START() { return GetTokens(YarnSpinnerParser.COMMAND_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENUM() { return GetToken(YarnSpinnerParser.COMMAND_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_END() { return GetTokens(YarnSpinnerParser.COMMAND_END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_END, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENDENUM() { return GetToken(YarnSpinnerParser.COMMAND_ENDENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_case_statementContext[] enum_case_statement() {
			return GetRuleContexts<Enum_case_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_case_statementContext enum_case_statement(int i) {
			return GetRuleContext<Enum_case_statementContext>(i);
		}
		public Enum_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterEnum_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitEnum_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_statementContext enum_statement() {
		Enum_statementContext _localctx = new Enum_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_enum_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(COMMAND_START);
			State = 375;
			Match(COMMAND_ENUM);
			State = 376;
			_localctx.name = Match(ID);
			State = 377;
			Match(COMMAND_END);
			State = 379;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 378;
					enum_case_statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 383;
			Match(COMMAND_START);
			State = 384;
			Match(COMMAND_ENDENUM);
			State = 385;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_case_statementContext : ParserRuleContext {
		public IToken name;
		public ValueContext rawValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_CASE() { return GetToken(YarnSpinnerParser.COMMAND_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Enum_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_case_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterEnum_case_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitEnum_case_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_case_statementContext enum_case_statement() {
		Enum_case_statementContext _localctx = new Enum_case_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_enum_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 387;
				Match(INDENT);
				}
			}

			State = 390;
			Match(COMMAND_START);
			State = 391;
			Match(COMMAND_CASE);
			State = 392;
			_localctx.name = Match(FUNC_ID);
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPERATOR_ASSIGNMENT) {
				{
				State = 393;
				Match(OPERATOR_ASSIGNMENT);
				State = 394;
				_localctx.rawValue = value();
				}
			}

			State = 397;
			Match(COMMAND_END);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEDENT) {
				{
				State = 398;
				Match(DEDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
	 
		public Jump_statementContext() { }
		public virtual void CopyFrom(Jump_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JumpToNodeNameContext : Jump_statementContext {
		public IToken destination;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_JUMP() { return GetToken(YarnSpinnerParser.COMMAND_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		public JumpToNodeNameContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterJumpToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitJumpToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpToNodeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JumpToExpressionContext : Jump_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_JUMP() { return GetToken(YarnSpinnerParser.COMMAND_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_START() { return GetToken(YarnSpinnerParser.EXPRESSION_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END() { return GetToken(YarnSpinnerParser.EXPRESSION_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public JumpToExpressionContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterJumpToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitJumpToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DetourToNodeNameContext : Jump_statementContext {
		public IToken destination;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_DETOUR() { return GetToken(YarnSpinnerParser.COMMAND_DETOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		public DetourToNodeNameContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDetourToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDetourToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetourToNodeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DetourToExpressionContext : Jump_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_DETOUR() { return GetToken(YarnSpinnerParser.COMMAND_DETOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_START() { return GetToken(YarnSpinnerParser.EXPRESSION_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END() { return GetToken(YarnSpinnerParser.EXPRESSION_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public DetourToExpressionContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDetourToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDetourToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetourToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_jump_statement);
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				_localctx = new JumpToNodeNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 401;
				Match(COMMAND_START);
				State = 402;
				Match(COMMAND_JUMP);
				State = 403;
				((JumpToNodeNameContext)_localctx).destination = Match(ID);
				State = 404;
				Match(COMMAND_END);
				}
				break;
			case 2:
				_localctx = new JumpToExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 405;
				Match(COMMAND_START);
				State = 406;
				Match(COMMAND_JUMP);
				State = 407;
				Match(EXPRESSION_START);
				State = 408;
				expression(0);
				State = 409;
				Match(EXPRESSION_END);
				State = 410;
				Match(COMMAND_END);
				}
				break;
			case 3:
				_localctx = new DetourToNodeNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 412;
				Match(COMMAND_START);
				State = 413;
				Match(COMMAND_DETOUR);
				State = 414;
				((DetourToNodeNameContext)_localctx).destination = Match(ID);
				State = 415;
				Match(COMMAND_END);
				}
				break;
			case 4:
				_localctx = new DetourToExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 416;
				Match(COMMAND_START);
				State = 417;
				Match(COMMAND_DETOUR);
				State = 418;
				Match(EXPRESSION_START);
				State = 419;
				expression(0);
				State = 420;
				Match(EXPRESSION_END);
				State = 421;
				Match(COMMAND_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_RETURN() { return GetToken(YarnSpinnerParser.COMMAND_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(COMMAND_START);
			State = 426;
			Match(COMMAND_RETURN);
			State = 427;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Once_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Once_primary_clauseContext once_primary_clause() {
			return GetRuleContext<Once_primary_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENDONCE() { return GetToken(YarnSpinnerParser.COMMAND_ENDONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Once_alternate_clauseContext once_alternate_clause() {
			return GetRuleContext<Once_alternate_clauseContext>(0);
		}
		public Once_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_once_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterOnce_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitOnce_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnce_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Once_statementContext once_statement() {
		Once_statementContext _localctx = new Once_statementContext(Context, State);
		EnterRule(_localctx, 66, RULE_once_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			once_primary_clause();
			State = 431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 430;
				once_alternate_clause();
				}
				break;
			}
			State = 433;
			Match(COMMAND_START);
			State = 434;
			Match(COMMAND_ENDONCE);
			State = 435;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Once_primary_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ONCE() { return GetToken(YarnSpinnerParser.COMMAND_ONCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Once_primary_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_once_primary_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterOnce_primary_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitOnce_primary_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnce_primary_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Once_primary_clauseContext once_primary_clause() {
		Once_primary_clauseContext _localctx = new Once_primary_clauseContext(Context, State);
		EnterRule(_localctx, 68, RULE_once_primary_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			Match(COMMAND_START);
			State = 438;
			Match(COMMAND_ONCE);
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_IF) {
				{
				State = 439;
				Match(COMMAND_IF);
				State = 440;
				expression(0);
				}
			}

			State = 443;
			Match(COMMAND_END);
			State = 447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 444;
					statement();
					}
					} 
				}
				State = 449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Once_alternate_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ELSE() { return GetToken(YarnSpinnerParser.COMMAND_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Once_alternate_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_once_alternate_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterOnce_alternate_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitOnce_alternate_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnce_alternate_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Once_alternate_clauseContext once_alternate_clause() {
		Once_alternate_clauseContext _localctx = new Once_alternate_clauseContext(Context, State);
		EnterRule(_localctx, 70, RULE_once_alternate_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(COMMAND_START);
			State = 451;
			Match(COMMAND_ELSE);
			State = 452;
			Match(COMMAND_END);
			State = 456;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 453;
					statement();
					}
					} 
				}
				State = 458;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,90,460,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		1,0,5,0,74,8,0,10,0,12,0,77,9,0,1,0,4,0,80,8,0,11,0,12,0,81,1,1,1,1,1,
		1,1,2,4,2,88,8,2,11,2,12,2,89,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
		3,3,102,8,3,1,4,1,4,1,4,1,4,1,4,3,4,109,8,4,3,4,111,8,4,1,5,5,5,114,8,
		5,10,5,12,5,117,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,5,6,133,8,6,10,6,12,6,136,9,6,1,6,3,6,139,8,6,1,7,1,7,3,7,143,8,
		7,1,7,5,7,146,8,7,10,7,12,7,149,9,7,1,7,1,7,1,8,4,8,154,8,8,11,8,12,8,
		155,1,8,1,8,1,8,1,8,4,8,162,8,8,11,8,12,8,163,1,9,1,9,1,9,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,178,8,10,1,10,3,10,181,8,10,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,193,8,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,210,
		8,11,10,11,12,11,213,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,222,
		8,12,1,13,1,13,1,14,1,14,1,14,3,14,229,8,14,1,14,1,14,5,14,233,8,14,10,
		14,12,14,236,9,14,1,14,1,14,1,15,3,15,241,8,15,1,15,1,15,1,15,1,16,1,16,
		5,16,248,8,16,10,16,12,16,251,9,16,1,16,3,16,254,8,16,1,16,1,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,17,5,17,265,8,17,10,17,12,17,268,9,17,1,18,1,
		18,1,18,1,18,1,18,5,18,275,8,18,10,18,12,18,278,9,18,1,19,1,19,1,19,1,
		19,5,19,284,8,19,10,19,12,19,287,9,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,5,22,305,8,22,10,22,12,
		22,308,9,22,1,23,1,23,1,23,1,23,1,23,5,23,315,8,23,10,23,12,23,318,9,23,
		1,24,5,24,321,8,24,10,24,12,24,324,9,24,1,24,1,24,3,24,328,8,24,1,25,1,
		25,1,25,1,25,5,25,334,8,25,10,25,12,25,337,9,25,1,25,3,25,340,8,25,1,26,
		5,26,343,8,26,10,26,12,26,346,9,26,1,26,1,26,3,26,350,8,26,1,27,1,27,1,
		27,1,27,5,27,356,8,27,10,27,12,27,359,9,27,1,27,3,27,362,8,27,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,3,28,371,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
		29,4,29,380,8,29,11,29,12,29,381,1,29,1,29,1,29,1,29,1,30,3,30,389,8,30,
		1,30,1,30,1,30,1,30,1,30,3,30,396,8,30,1,30,1,30,3,30,400,8,30,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,424,8,31,1,32,1,32,1,32,1,32,1,33,
		1,33,3,33,432,8,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,442,8,
		34,1,34,1,34,5,34,446,8,34,10,34,12,34,449,9,34,1,35,1,35,1,35,1,35,5,
		35,455,8,35,10,35,12,35,458,9,35,1,35,0,1,22,36,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,0,6,1,0,51,53,1,0,49,50,2,0,34,35,37,38,2,0,36,36,39,39,1,0,40,
		42,2,0,33,33,44,48,497,0,75,1,0,0,0,2,83,1,0,0,0,4,87,1,0,0,0,6,95,1,0,
		0,0,8,110,1,0,0,0,10,115,1,0,0,0,12,138,1,0,0,0,14,140,1,0,0,0,16,161,
		1,0,0,0,18,165,1,0,0,0,20,180,1,0,0,0,22,192,1,0,0,0,24,221,1,0,0,0,26,
		223,1,0,0,0,28,225,1,0,0,0,30,240,1,0,0,0,32,245,1,0,0,0,34,259,1,0,0,
		0,36,269,1,0,0,0,38,279,1,0,0,0,40,288,1,0,0,0,42,295,1,0,0,0,44,300,1,
		0,0,0,46,316,1,0,0,0,48,322,1,0,0,0,50,329,1,0,0,0,52,344,1,0,0,0,54,351,
		1,0,0,0,56,363,1,0,0,0,58,374,1,0,0,0,60,388,1,0,0,0,62,423,1,0,0,0,64,
		425,1,0,0,0,66,429,1,0,0,0,68,437,1,0,0,0,70,450,1,0,0,0,72,74,3,2,1,0,
		73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,79,1,0,0,0,
		77,75,1,0,0,0,78,80,3,4,2,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,
		81,82,1,0,0,0,82,1,1,0,0,0,83,84,5,10,0,0,84,85,5,27,0,0,85,3,1,0,0,0,
		86,88,3,6,3,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,
		90,91,1,0,0,0,91,92,5,8,0,0,92,93,3,10,5,0,93,94,5,13,0,0,94,5,1,0,0,0,
		95,96,5,7,0,0,96,101,5,9,0,0,97,102,5,11,0,0,98,99,3,8,4,0,99,100,5,6,
		0,0,100,102,1,0,0,0,101,97,1,0,0,0,101,98,1,0,0,0,101,102,1,0,0,0,102,
		7,1,0,0,0,103,111,3,22,11,0,104,111,5,29,0,0,105,108,5,79,0,0,106,107,
		5,66,0,0,107,109,3,22,11,0,108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,
		0,0,110,103,1,0,0,0,110,104,1,0,0,0,110,105,1,0,0,0,111,9,1,0,0,0,112,
		114,3,12,6,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,
		0,0,0,116,11,1,0,0,0,117,115,1,0,0,0,118,139,3,14,7,0,119,139,3,32,16,
		0,120,139,3,40,20,0,121,139,3,48,24,0,122,139,3,42,21,0,123,139,3,44,22,
		0,124,139,3,56,28,0,125,139,3,58,29,0,126,139,3,62,31,0,127,139,3,64,32,
		0,128,139,3,52,26,0,129,139,3,66,33,0,130,134,5,1,0,0,131,133,3,12,6,0,
		132,131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,
		1,0,0,0,136,134,1,0,0,0,137,139,5,2,0,0,138,118,1,0,0,0,138,119,1,0,0,
		0,138,120,1,0,0,0,138,121,1,0,0,0,138,122,1,0,0,0,138,123,1,0,0,0,138,
		124,1,0,0,0,138,125,1,0,0,0,138,126,1,0,0,0,138,127,1,0,0,0,138,128,1,
		0,0,0,138,129,1,0,0,0,138,130,1,0,0,0,139,13,1,0,0,0,140,142,3,16,8,0,
		141,143,3,20,10,0,142,141,1,0,0,0,142,143,1,0,0,0,143,147,1,0,0,0,144,
		146,3,18,9,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,
		0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,5,6,0,0,151,15,1,0,0,0,152,
		154,5,21,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,1,
		0,0,0,156,162,1,0,0,0,157,158,5,17,0,0,158,159,3,22,11,0,159,160,5,60,
		0,0,160,162,1,0,0,0,161,153,1,0,0,0,161,157,1,0,0,0,162,163,1,0,0,0,163,
		161,1,0,0,0,163,164,1,0,0,0,164,17,1,0,0,0,165,166,5,10,0,0,166,167,5,
		27,0,0,167,19,1,0,0,0,168,169,5,16,0,0,169,170,5,66,0,0,170,171,3,22,11,
		0,171,172,5,82,0,0,172,181,1,0,0,0,173,174,5,16,0,0,174,177,5,79,0,0,175,
		176,5,66,0,0,176,178,3,22,11,0,177,175,1,0,0,0,177,178,1,0,0,0,178,179,
		1,0,0,0,179,181,5,82,0,0,180,168,1,0,0,0,180,173,1,0,0,0,181,21,1,0,0,
		0,182,183,6,11,-1,0,183,184,5,54,0,0,184,185,3,22,11,0,185,186,5,55,0,
		0,186,193,1,0,0,0,187,188,5,50,0,0,188,193,3,22,11,8,189,190,5,43,0,0,
		190,193,3,22,11,7,191,193,3,24,12,0,192,182,1,0,0,0,192,187,1,0,0,0,192,
		189,1,0,0,0,192,191,1,0,0,0,193,211,1,0,0,0,194,195,10,6,0,0,195,196,7,
		0,0,0,196,210,3,22,11,7,197,198,10,5,0,0,198,199,7,1,0,0,199,210,3,22,
		11,6,200,201,10,4,0,0,201,202,7,2,0,0,202,210,3,22,11,5,203,204,10,3,0,
		0,204,205,7,3,0,0,205,210,3,22,11,4,206,207,10,2,0,0,207,208,7,4,0,0,208,
		210,3,22,11,3,209,194,1,0,0,0,209,197,1,0,0,0,209,200,1,0,0,0,209,203,
		1,0,0,0,209,206,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,
		0,212,23,1,0,0,0,213,211,1,0,0,0,214,222,5,63,0,0,215,222,5,30,0,0,216,
		222,5,31,0,0,217,222,3,26,13,0,218,222,5,58,0,0,219,222,3,28,14,0,220,
		222,3,30,15,0,221,214,1,0,0,0,221,215,1,0,0,0,221,216,1,0,0,0,221,217,
		1,0,0,0,221,218,1,0,0,0,221,219,1,0,0,0,221,220,1,0,0,0,222,25,1,0,0,0,
		223,224,5,61,0,0,224,27,1,0,0,0,225,226,5,59,0,0,226,228,5,54,0,0,227,
		229,3,22,11,0,228,227,1,0,0,0,228,229,1,0,0,0,229,234,1,0,0,0,230,231,
		5,56,0,0,231,233,3,22,11,0,232,230,1,0,0,0,233,236,1,0,0,0,234,232,1,0,
		0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,238,5,55,0,0,238,
		29,1,0,0,0,239,241,5,59,0,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,1,
		0,0,0,242,243,5,62,0,0,243,244,5,59,0,0,244,31,1,0,0,0,245,249,3,34,17,
		0,246,248,3,36,18,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,
		250,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,252,254,3,38,19,0,253,252,
		1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,5,16,0,0,256,257,5,70,
		0,0,257,258,5,82,0,0,258,33,1,0,0,0,259,260,5,16,0,0,260,261,5,66,0,0,
		261,262,3,22,11,0,262,266,5,82,0,0,263,265,3,12,6,0,264,263,1,0,0,0,265,
		268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,35,1,0,0,0,268,266,1,0,
		0,0,269,270,5,16,0,0,270,271,5,67,0,0,271,272,3,22,11,0,272,276,5,82,0,
		0,273,275,3,12,6,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,
		277,1,0,0,0,277,37,1,0,0,0,278,276,1,0,0,0,279,280,5,16,0,0,280,281,5,
		68,0,0,281,285,5,82,0,0,282,284,3,12,6,0,283,282,1,0,0,0,284,287,1,0,0,
		0,285,283,1,0,0,0,285,286,1,0,0,0,286,39,1,0,0,0,287,285,1,0,0,0,288,289,
		5,16,0,0,289,290,5,69,0,0,290,291,3,26,13,0,291,292,7,5,0,0,292,293,3,
		22,11,0,293,294,5,82,0,0,294,41,1,0,0,0,295,296,5,16,0,0,296,297,5,71,
		0,0,297,298,3,28,14,0,298,299,5,82,0,0,299,43,1,0,0,0,300,301,5,16,0,0,
		301,302,3,46,23,0,302,306,5,84,0,0,303,305,3,18,9,0,304,303,1,0,0,0,305,
		308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,45,1,0,0,0,308,306,1,0,
		0,0,309,315,5,86,0,0,310,311,5,85,0,0,311,312,3,22,11,0,312,313,5,60,0,
		0,313,315,1,0,0,0,314,309,1,0,0,0,314,310,1,0,0,0,315,318,1,0,0,0,316,
		314,1,0,0,0,316,317,1,0,0,0,317,47,1,0,0,0,318,316,1,0,0,0,319,321,3,50,
		25,0,320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,
		325,1,0,0,0,324,322,1,0,0,0,325,327,3,50,25,0,326,328,5,3,0,0,327,326,
		1,0,0,0,327,328,1,0,0,0,328,49,1,0,0,0,329,330,5,14,0,0,330,339,3,14,7,
		0,331,335,5,1,0,0,332,334,3,12,6,0,333,332,1,0,0,0,334,337,1,0,0,0,335,
		333,1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,335,1,0,0,0,338,340,5,
		2,0,0,339,331,1,0,0,0,339,340,1,0,0,0,340,51,1,0,0,0,341,343,3,54,27,0,
		342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,347,
		1,0,0,0,346,344,1,0,0,0,347,349,3,54,27,0,348,350,5,3,0,0,349,348,1,0,
		0,0,349,350,1,0,0,0,350,53,1,0,0,0,351,352,5,15,0,0,352,361,3,14,7,0,353,
		357,5,1,0,0,354,356,3,12,6,0,355,354,1,0,0,0,356,359,1,0,0,0,357,355,1,
		0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,360,362,5,2,0,0,
		361,353,1,0,0,0,361,362,1,0,0,0,362,55,1,0,0,0,363,364,5,16,0,0,364,365,
		5,72,0,0,365,366,3,26,13,0,366,367,5,33,0,0,367,370,3,22,11,0,368,369,
		5,57,0,0,369,371,5,59,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,372,1,0,
		0,0,372,373,5,82,0,0,373,57,1,0,0,0,374,375,5,16,0,0,375,376,5,76,0,0,
		376,377,5,7,0,0,377,379,5,82,0,0,378,380,3,60,30,0,379,378,1,0,0,0,380,
		381,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,384,5,
		16,0,0,384,385,5,78,0,0,385,386,5,82,0,0,386,59,1,0,0,0,387,389,5,1,0,
		0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,5,16,0,0,391,
		392,5,77,0,0,392,395,5,59,0,0,393,394,5,33,0,0,394,396,3,24,12,0,395,393,
		1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,399,5,82,0,0,398,400,5,2,0,
		0,399,398,1,0,0,0,399,400,1,0,0,0,400,61,1,0,0,0,401,402,5,16,0,0,402,
		403,5,73,0,0,403,404,5,7,0,0,404,424,5,82,0,0,405,406,5,16,0,0,406,407,
		5,73,0,0,407,408,5,17,0,0,408,409,3,22,11,0,409,410,5,60,0,0,410,411,5,
		82,0,0,411,424,1,0,0,0,412,413,5,16,0,0,413,414,5,74,0,0,414,415,5,7,0,
		0,415,424,5,82,0,0,416,417,5,16,0,0,417,418,5,74,0,0,418,419,5,17,0,0,
		419,420,3,22,11,0,420,421,5,60,0,0,421,422,5,82,0,0,422,424,1,0,0,0,423,
		401,1,0,0,0,423,405,1,0,0,0,423,412,1,0,0,0,423,416,1,0,0,0,424,63,1,0,
		0,0,425,426,5,16,0,0,426,427,5,75,0,0,427,428,5,82,0,0,428,65,1,0,0,0,
		429,431,3,68,34,0,430,432,3,70,35,0,431,430,1,0,0,0,431,432,1,0,0,0,432,
		433,1,0,0,0,433,434,5,16,0,0,434,435,5,80,0,0,435,436,5,82,0,0,436,67,
		1,0,0,0,437,438,5,16,0,0,438,441,5,79,0,0,439,440,5,66,0,0,440,442,3,22,
		11,0,441,439,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,447,5,82,0,0,
		444,446,3,12,6,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,
		1,0,0,0,448,69,1,0,0,0,449,447,1,0,0,0,450,451,5,16,0,0,451,452,5,68,0,
		0,452,456,5,82,0,0,453,455,3,12,6,0,454,453,1,0,0,0,455,458,1,0,0,0,456,
		454,1,0,0,0,456,457,1,0,0,0,457,71,1,0,0,0,458,456,1,0,0,0,49,75,81,89,
		101,108,110,115,134,138,142,147,155,161,163,177,180,192,209,211,221,228,
		234,240,249,253,266,276,285,306,314,316,322,327,335,339,344,349,357,361,
		370,381,388,395,399,423,431,441,447,456
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Yarn.Compiler

// Copyright Yarn Spinner Pty Ltd
// Licensed under the MIT License. See LICENSE.md in project root for license information.

namespace Yarn.Compiler
{
    using System.Collections.Generic;

    internal abstract class DiagnosticsGeneratorVisitor : YarnSpinnerParserBaseVisitor<int>
    {
        private readonly List<Diagnostic> diagnostics = new List<Diagnostic>();

        private YarnSpinnerParser.NodeContext? currentNodeContext;
        private string? currentNodeName;
        private string fileName;

        /// <summary>
        /// Gets the collection of <see cref="Diagnostic"/> objects
        /// generated by this object.
        /// </summary>
        public IEnumerable<Diagnostic> Diagnostics => this.diagnostics;

        public DiagnosticsGeneratorVisitor(string fileName)
        {
            this.fileName = fileName;
        }

        public override int VisitNode(YarnSpinnerParser.NodeContext context)
        {
            currentNodeContext = context;
            currentNodeName = context.NodeTitle ?? "<unknown>";

            var body = context.body();
            if (body != null)
            {
                this.Visit(body);
            }

            return 0;
        }

        protected void AddDiagnostic(Diagnostic d)
        {
            this.diagnostics.Add(d);
        }

        protected string FileName => fileName;

    }
}

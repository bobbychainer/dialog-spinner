//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/desplesda/Work/YarnSpinner/YarnSpinner.Compiler/YarnSpinnerParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Yarn.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class YarnSpinnerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, BLANK_LINE_FOLLOWING_OPTION=3, WS=4, COMMENT=5, NEWLINE=6, 
		ID=7, BODY_START=8, HEADER_DELIMITER=9, HASHTAG=10, REST_OF_LINE=11, BODY_WS=12, 
		BODY_END=13, SHORTCUT_ARROW=14, LINE_GROUP_ARROW=15, COMMAND_START=16, 
		EXPRESSION_START=17, ESCAPED_ANY=18, TEXT_ESCAPE=19, TEXT_COMMENT=20, 
		TEXT=21, UNESCAPABLE_CHARACTER=22, TEXT_COMMANDHASHTAG_WS=23, TEXT_COMMANDHASHTAG_COMMENT=24, 
		TEXT_COMMANDHASHTAG_ERROR=25, HASHTAG_WS=26, HASHTAG_TEXT=27, EXPR_WS=28, 
		KEYWORD_TRUE=29, KEYWORD_FALSE=30, KEYWORD_NULL=31, OPERATOR_ASSIGNMENT=32, 
		OPERATOR_LOGICAL_LESS_THAN_EQUALS=33, OPERATOR_LOGICAL_GREATER_THAN_EQUALS=34, 
		OPERATOR_LOGICAL_EQUALS=35, OPERATOR_LOGICAL_LESS=36, OPERATOR_LOGICAL_GREATER=37, 
		OPERATOR_LOGICAL_NOT_EQUALS=38, OPERATOR_LOGICAL_AND=39, OPERATOR_LOGICAL_OR=40, 
		OPERATOR_LOGICAL_XOR=41, OPERATOR_LOGICAL_NOT=42, OPERATOR_MATHS_ADDITION_EQUALS=43, 
		OPERATOR_MATHS_SUBTRACTION_EQUALS=44, OPERATOR_MATHS_MULTIPLICATION_EQUALS=45, 
		OPERATOR_MATHS_MODULUS_EQUALS=46, OPERATOR_MATHS_DIVISION_EQUALS=47, OPERATOR_MATHS_ADDITION=48, 
		OPERATOR_MATHS_SUBTRACTION=49, OPERATOR_MATHS_MULTIPLICATION=50, OPERATOR_MATHS_DIVISION=51, 
		OPERATOR_MATHS_MODULUS=52, LPAREN=53, RPAREN=54, COMMA=55, EXPRESSION_AS=56, 
		STRING=57, FUNC_ID=58, EXPRESSION_END=59, VAR_ID=60, DOT=61, NUMBER=62, 
		COMMAND_NEWLINE=63, COMMAND_WS=64, COMMAND_IF=65, COMMAND_ELSEIF=66, COMMAND_ELSE=67, 
		COMMAND_SET=68, COMMAND_ENDIF=69, COMMAND_CALL=70, COMMAND_DECLARE=71, 
		COMMAND_JUMP=72, COMMAND_DETOUR=73, COMMAND_RETURN=74, COMMAND_ENUM=75, 
		COMMAND_CASE=76, COMMAND_ENDENUM=77, COMMAND_LOCAL=78, COMMAND_END=79, 
		COMMAND_TEXT_NEWLINE=80, COMMAND_TEXT_END=81, COMMAND_EXPRESSION_START=82, 
		COMMAND_TEXT=83, COMMAND_ID_NEWLINE=84, TYPE_STRING=85, TYPE_NUMBER=86, 
		TYPE_BOOL=87;
	public const int
		RULE_dialogue = 0, RULE_file_hashtag = 1, RULE_node = 2, RULE_header = 3, 
		RULE_body = 4, RULE_statement = 5, RULE_line_statement = 6, RULE_line_formatted_text = 7, 
		RULE_hashtag = 8, RULE_line_condition = 9, RULE_expression = 10, RULE_value = 11, 
		RULE_variable = 12, RULE_function_call = 13, RULE_typeMemberReference = 14, 
		RULE_if_statement = 15, RULE_if_clause = 16, RULE_else_if_clause = 17, 
		RULE_else_clause = 18, RULE_set_statement = 19, RULE_call_statement = 20, 
		RULE_command_statement = 21, RULE_command_formatted_text = 22, RULE_shortcut_option_statement = 23, 
		RULE_shortcut_option = 24, RULE_line_group_statement = 25, RULE_line_group_item = 26, 
		RULE_declare_statement = 27, RULE_enum_statement = 28, RULE_enum_case_statement = 29, 
		RULE_jump_statement = 30, RULE_return_statement = 31;
	public static readonly string[] ruleNames = {
		"dialogue", "file_hashtag", "node", "header", "body", "statement", "line_statement", 
		"line_formatted_text", "hashtag", "line_condition", "expression", "value", 
		"variable", "function_call", "typeMemberReference", "if_statement", "if_clause", 
		"else_if_clause", "else_clause", "set_statement", "call_statement", "command_statement", 
		"command_formatted_text", "shortcut_option_statement", "shortcut_option", 
		"line_group_statement", "line_group_item", "declare_statement", "enum_statement", 
		"enum_case_statement", "jump_statement", "return_statement"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'---'", null, "'#'", 
		null, null, "'==='", "'->'", "'=>'", "'<<'", null, null, "'\\'", null, 
		null, null, null, null, null, null, null, null, "'true'", "'false'", "'null'", 
		null, null, null, null, null, null, null, null, null, null, null, "'+='", 
		"'-='", "'*='", "'%='", "'/='", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", 
		"')'", "','", "'as'", null, null, "'}'", null, "'.'", null, null, null, 
		null, null, null, null, "'endif'", null, null, null, null, null, null, 
		null, null, null, null, null, null, "'{'", null, null, "'string'", "'number'", 
		"'bool'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "BLANK_LINE_FOLLOWING_OPTION", "WS", "COMMENT", 
		"NEWLINE", "ID", "BODY_START", "HEADER_DELIMITER", "HASHTAG", "REST_OF_LINE", 
		"BODY_WS", "BODY_END", "SHORTCUT_ARROW", "LINE_GROUP_ARROW", "COMMAND_START", 
		"EXPRESSION_START", "ESCAPED_ANY", "TEXT_ESCAPE", "TEXT_COMMENT", "TEXT", 
		"UNESCAPABLE_CHARACTER", "TEXT_COMMANDHASHTAG_WS", "TEXT_COMMANDHASHTAG_COMMENT", 
		"TEXT_COMMANDHASHTAG_ERROR", "HASHTAG_WS", "HASHTAG_TEXT", "EXPR_WS", 
		"KEYWORD_TRUE", "KEYWORD_FALSE", "KEYWORD_NULL", "OPERATOR_ASSIGNMENT", 
		"OPERATOR_LOGICAL_LESS_THAN_EQUALS", "OPERATOR_LOGICAL_GREATER_THAN_EQUALS", 
		"OPERATOR_LOGICAL_EQUALS", "OPERATOR_LOGICAL_LESS", "OPERATOR_LOGICAL_GREATER", 
		"OPERATOR_LOGICAL_NOT_EQUALS", "OPERATOR_LOGICAL_AND", "OPERATOR_LOGICAL_OR", 
		"OPERATOR_LOGICAL_XOR", "OPERATOR_LOGICAL_NOT", "OPERATOR_MATHS_ADDITION_EQUALS", 
		"OPERATOR_MATHS_SUBTRACTION_EQUALS", "OPERATOR_MATHS_MULTIPLICATION_EQUALS", 
		"OPERATOR_MATHS_MODULUS_EQUALS", "OPERATOR_MATHS_DIVISION_EQUALS", "OPERATOR_MATHS_ADDITION", 
		"OPERATOR_MATHS_SUBTRACTION", "OPERATOR_MATHS_MULTIPLICATION", "OPERATOR_MATHS_DIVISION", 
		"OPERATOR_MATHS_MODULUS", "LPAREN", "RPAREN", "COMMA", "EXPRESSION_AS", 
		"STRING", "FUNC_ID", "EXPRESSION_END", "VAR_ID", "DOT", "NUMBER", "COMMAND_NEWLINE", 
		"COMMAND_WS", "COMMAND_IF", "COMMAND_ELSEIF", "COMMAND_ELSE", "COMMAND_SET", 
		"COMMAND_ENDIF", "COMMAND_CALL", "COMMAND_DECLARE", "COMMAND_JUMP", "COMMAND_DETOUR", 
		"COMMAND_RETURN", "COMMAND_ENUM", "COMMAND_CASE", "COMMAND_ENDENUM", "COMMAND_LOCAL", 
		"COMMAND_END", "COMMAND_TEXT_NEWLINE", "COMMAND_TEXT_END", "COMMAND_EXPRESSION_START", 
		"COMMAND_TEXT", "COMMAND_ID_NEWLINE", "TYPE_STRING", "TYPE_NUMBER", "TYPE_BOOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YarnSpinnerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YarnSpinnerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YarnSpinnerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YarnSpinnerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DialogueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_hashtagContext[] file_hashtag() {
			return GetRuleContexts<File_hashtagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_hashtagContext file_hashtag(int i) {
			return GetRuleContext<File_hashtagContext>(i);
		}
		public DialogueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDialogue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueContext dialogue() {
		DialogueContext _localctx = new DialogueContext(Context, State);
		EnterRule(_localctx, 0, RULE_dialogue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 64;
				file_hashtag();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 70;
				node();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_hashtagContext : ParserRuleContext {
		public IToken text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public File_hashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_hashtag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFile_hashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFile_hashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_hashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_hashtagContext file_hashtag() {
		File_hashtagContext _localctx = new File_hashtagContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(HASHTAG);
			State = 76;
			_localctx.text = Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_START() { return GetToken(YarnSpinnerParser.BODY_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_END() { return GetToken(YarnSpinnerParser.BODY_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext[] header() {
			return GetRuleContexts<HeaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeaderContext header(int i) {
			return GetRuleContext<HeaderContext>(i);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_node);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 78;
				header();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 83;
			Match(BODY_START);
			State = 84;
			body();
			State = 85;
			Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public IToken header_key;
		public IToken header_value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_DELIMITER() { return GetToken(YarnSpinnerParser.HEADER_DELIMITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REST_OF_LINE() { return GetToken(YarnSpinnerParser.REST_OF_LINE, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 6, RULE_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_localctx.header_key = Match(ID);
			State = 88;
			Match(HEADER_DELIMITER);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REST_OF_LINE) {
				{
				State = 89;
				_localctx.header_value = Match(REST_OF_LINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2342914L) != 0)) {
				{
				{
				State = 92;
				statement();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shortcut_option_statementContext shortcut_option_statement() {
			return GetRuleContext<Shortcut_option_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Call_statementContext call_statement() {
			return GetRuleContext<Call_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Command_statementContext command_statement() {
			return GetRuleContext<Command_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_statementContext enum_statement() {
			return GetRuleContext<Enum_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_group_statementContext line_group_statement() {
			return GetRuleContext<Line_group_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				line_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				if_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 100;
				set_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 101;
				shortcut_option_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 102;
				call_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 103;
				command_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 104;
				declare_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 105;
				enum_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 106;
				jump_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 107;
				return_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 108;
				line_group_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 109;
				Match(INDENT);
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2342914L) != 0)) {
					{
					{
					State = 110;
					statement();
					}
					}
					State = 115;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 116;
				Match(DEDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_formatted_textContext line_formatted_text() {
			return GetRuleContext<Line_formatted_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(YarnSpinnerParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_conditionContext line_condition() {
			return GetRuleContext<Line_conditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Line_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_statementContext line_statement() {
		Line_statementContext _localctx = new Line_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_line_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			line_formatted_text();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_START) {
				{
				State = 120;
				line_condition();
				}
			}

			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 123;
				hashtag();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_formatted_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION_START() { return GetTokens(YarnSpinnerParser.EXPRESSION_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(YarnSpinnerParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(YarnSpinnerParser.TEXT, i);
		}
		public Line_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_formatted_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_formatted_textContext line_formatted_text() {
		Line_formatted_textContext _localctx = new Line_formatted_textContext(Context, State);
		EnterRule(_localctx, 14, RULE_line_formatted_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 140;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 132;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 131;
							Match(TEXT);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 134;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case EXPRESSION_START:
					{
					State = 136;
					Match(EXPRESSION_START);
					State = 137;
					expression(0);
					State = 138;
					Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXPRESSION_START || _la==TEXT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashtagContext : ParserRuleContext {
		public IToken text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public HashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hashtag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHashtag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HashtagContext hashtag() {
		HashtagContext _localctx = new HashtagContext(Context, State);
		EnterRule(_localctx, 16, RULE_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(HASHTAG);
			State = 145;
			_localctx.text = Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_conditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Line_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_condition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_conditionContext line_condition() {
		Line_conditionContext _localctx = new Line_conditionContext(Context, State);
		EnterRule(_localctx, 18, RULE_line_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(COMMAND_START);
			State = 148;
			Match(COMMAND_IF);
			State = 149;
			expression(0);
			State = 150;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpParensContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YarnSpinnerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YarnSpinnerParser.RPAREN, 0); }
		public ExpParensContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMultDivModContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MULTIPLICATION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MULTIPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_DIVISION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_DIVISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MODULUS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MODULUS, 0); }
		public ExpMultDivModContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpMultDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpMultDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMultDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpComparisonContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_LESS_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS_THAN_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_GREATER_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER_THAN_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_LESS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_GREATER() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER, 0); }
		public ExpComparisonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNegativeContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpNegativeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNegative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAndOrXorContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_AND() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_OR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_XOR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_XOR, 0); }
		public ExpAndOrXorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAndOrXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAndOrXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAndOrXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_ADDITION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_ADDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNotContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_NOT() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT, 0); }
		public ExpNotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpValueContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpValueContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpEqualityContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_LOGICAL_NOT_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT_EQUALS, 0); }
		public ExpEqualityContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				{
				_localctx = new ExpParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 153;
				Match(LPAREN);
				State = 154;
				expression(0);
				State = 155;
				Match(RPAREN);
				}
				break;
			case OPERATOR_MATHS_SUBTRACTION:
				{
				_localctx = new ExpNegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 157;
				((ExpNegativeContext)_localctx).op = Match(OPERATOR_MATHS_SUBTRACTION);
				State = 158;
				expression(8);
				}
				break;
			case OPERATOR_LOGICAL_NOT:
				{
				_localctx = new ExpNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159;
				((ExpNotContext)_localctx).op = Match(OPERATOR_LOGICAL_NOT);
				State = 160;
				expression(7);
				}
				break;
			case KEYWORD_TRUE:
			case KEYWORD_FALSE:
			case STRING:
			case FUNC_ID:
			case VAR_ID:
			case DOT:
			case NUMBER:
				{
				_localctx = new ExpValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 161;
				value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 179;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new ExpMultDivModContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 164;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 165;
						((ExpMultDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7881299347898368L) != 0)) ) {
							((ExpMultDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 166;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 167;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 168;
						((ExpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_MATHS_ADDITION || _la==OPERATOR_MATHS_SUBTRACTION) ) {
							((ExpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 169;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 170;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 171;
						((ExpComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 231928233984L) != 0)) ) {
							((ExpComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 172;
						expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpEqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 173;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 174;
						((ExpEqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_LOGICAL_EQUALS || _la==OPERATOR_LOGICAL_NOT_EQUALS) ) {
							((ExpEqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 175;
						expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpAndOrXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 176;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 177;
						((ExpAndOrXorContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3848290697216L) != 0)) ) {
							((ExpAndOrXorContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 178;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueNumberContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(YarnSpinnerParser.NUMBER, 0); }
		public ValueNumberContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TRUE() { return GetToken(YarnSpinnerParser.KEYWORD_TRUE, 0); }
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FALSE() { return GetToken(YarnSpinnerParser.KEYWORD_FALSE, 0); }
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFuncContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ValueFuncContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueVarContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueVarContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(YarnSpinnerParser.STRING, 0); }
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTypeMemberReferenceContext : ValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeMemberReferenceContext typeMemberReference() {
			return GetRuleContext<TypeMemberReferenceContext>(0);
		}
		public ValueTypeMemberReferenceContext(ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTypeMemberReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				Match(NUMBER);
				}
				break;
			case 2:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				Match(KEYWORD_TRUE);
				}
				break;
			case 3:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				Match(KEYWORD_FALSE);
				}
				break;
			case 4:
				_localctx = new ValueVarContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 187;
				variable();
				}
				break;
			case 5:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 188;
				Match(STRING);
				}
				break;
			case 6:
				_localctx = new ValueFuncContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 189;
				function_call();
				}
				break;
			case 7:
				_localctx = new ValueTypeMemberReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 190;
				typeMemberReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ID() { return GetToken(YarnSpinnerParser.VAR_ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 24, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(VAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(YarnSpinnerParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(YarnSpinnerParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(YarnSpinnerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(YarnSpinnerParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 26, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(FUNC_ID);
			State = 196;
			Match(LPAREN);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8512370645340782592L) != 0)) {
				{
				State = 197;
				expression(0);
				}
			}

			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 200;
				Match(COMMA);
				State = 201;
				expression(0);
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeMemberReferenceContext : ParserRuleContext {
		public IToken typeName;
		public IToken memberName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(YarnSpinnerParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNC_ID() { return GetTokens(YarnSpinnerParser.FUNC_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID(int i) {
			return GetToken(YarnSpinnerParser.FUNC_ID, i);
		}
		public TypeMemberReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeMemberReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitTypeMemberReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeMemberReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeMemberReferenceContext typeMemberReference() {
		TypeMemberReferenceContext _localctx = new TypeMemberReferenceContext(Context, State);
		EnterRule(_localctx, 28, RULE_typeMemberReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FUNC_ID) {
				{
				State = 209;
				_localctx.typeName = Match(FUNC_ID);
				}
			}

			State = 212;
			Match(DOT);
			State = 213;
			_localctx.memberName = Match(FUNC_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENDIF() { return GetToken(YarnSpinnerParser.COMMAND_ENDIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_clauseContext[] else_if_clause() {
			return GetRuleContexts<Else_if_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_if_clauseContext else_if_clause(int i) {
			return GetRuleContext<Else_if_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			if_clause();
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 216;
					else_if_clause();
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 222;
				else_clause();
				}
				break;
			}
			State = 225;
			Match(COMMAND_START);
			State = 226;
			Match(COMMAND_ENDIF);
			State = 227;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterIf_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitIf_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_clauseContext if_clause() {
		If_clauseContext _localctx = new If_clauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(COMMAND_START);
			State = 230;
			Match(COMMAND_IF);
			State = 231;
			expression(0);
			State = 232;
			Match(COMMAND_END);
			State = 236;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 233;
					statement();
					}
					} 
				}
				State = 238;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ELSEIF() { return GetToken(YarnSpinnerParser.COMMAND_ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_if_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterElse_if_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitElse_if_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_clauseContext else_if_clause() {
		Else_if_clauseContext _localctx = new Else_if_clauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_else_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(COMMAND_START);
			State = 240;
			Match(COMMAND_ELSEIF);
			State = 241;
			expression(0);
			State = 242;
			Match(COMMAND_END);
			State = 246;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 243;
					statement();
					}
					} 
				}
				State = 248;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ELSE() { return GetToken(YarnSpinnerParser.COMMAND_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterElse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitElse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_clauseContext else_clause() {
		Else_clauseContext _localctx = new Else_clauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_else_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(COMMAND_START);
			State = 250;
			Match(COMMAND_ELSE);
			State = 251;
			Match(COMMAND_END);
			State = 255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 252;
					statement();
					}
					} 
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_SET() { return GetToken(YarnSpinnerParser.COMMAND_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MULTIPLICATION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MULTIPLICATION_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_DIVISION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_DIVISION_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_MODULUS_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MODULUS_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_ADDITION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_ADDITION_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_MATHS_SUBTRACTION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION_EQUALS, 0); }
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitSet_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_set_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(COMMAND_START);
			State = 259;
			Match(COMMAND_SET);
			State = 260;
			variable();
			State = 261;
			_localctx.op = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 272683178655744L) != 0)) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 262;
			expression(0);
			State = 263;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_CALL() { return GetToken(YarnSpinnerParser.COMMAND_CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCall_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCall_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_statementContext call_statement() {
		Call_statementContext _localctx = new Call_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_call_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(COMMAND_START);
			State = 266;
			Match(COMMAND_CALL);
			State = 267;
			function_call();
			State = 268;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Command_formatted_textContext command_formatted_text() {
			return GetRuleContext<Command_formatted_textContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_TEXT_END() { return GetToken(YarnSpinnerParser.COMMAND_TEXT_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Command_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCommand_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCommand_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_statementContext command_statement() {
		Command_statementContext _localctx = new Command_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_command_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(COMMAND_START);
			State = 271;
			command_formatted_text();
			State = 272;
			Match(COMMAND_TEXT_END);
			{
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 273;
				hashtag();
				}
				}
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_formatted_textContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_TEXT() { return GetTokens(YarnSpinnerParser.COMMAND_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_TEXT(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_EXPRESSION_START() { return GetTokens(YarnSpinnerParser.COMMAND_EXPRESSION_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_EXPRESSION_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		public Command_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_formatted_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCommand_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCommand_formatted_text(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_formatted_textContext command_formatted_text() {
		Command_formatted_textContext _localctx = new Command_formatted_textContext(Context, State);
		EnterRule(_localctx, 44, RULE_command_formatted_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMAND_EXPRESSION_START || _la==COMMAND_TEXT) {
				{
				State = 284;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMAND_TEXT:
					{
					State = 279;
					Match(COMMAND_TEXT);
					}
					break;
				case COMMAND_EXPRESSION_START:
					{
					State = 280;
					Match(COMMAND_EXPRESSION_START);
					State = 281;
					expression(0);
					State = 282;
					Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_option_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shortcut_optionContext[] shortcut_option() {
			return GetRuleContexts<Shortcut_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shortcut_optionContext shortcut_option(int i) {
			return GetRuleContext<Shortcut_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK_LINE_FOLLOWING_OPTION() { return GetToken(YarnSpinnerParser.BLANK_LINE_FOLLOWING_OPTION, 0); }
		public Shortcut_option_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_option_statementContext shortcut_option_statement() {
		Shortcut_option_statementContext _localctx = new Shortcut_option_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_shortcut_option_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 289;
					shortcut_option();
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			{
			State = 295;
			shortcut_option();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLANK_LINE_FOLLOWING_OPTION) {
				{
				State = 296;
				Match(BLANK_LINE_FOLLOWING_OPTION);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORTCUT_ARROW() { return GetToken(YarnSpinnerParser.SHORTCUT_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Shortcut_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_optionContext shortcut_option() {
		Shortcut_optionContext _localctx = new Shortcut_optionContext(Context, State);
		EnterRule(_localctx, 48, RULE_shortcut_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(SHORTCUT_ARROW);
			State = 300;
			line_statement();
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 301;
				Match(INDENT);
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2342914L) != 0)) {
					{
					{
					State = 302;
					statement();
					}
					}
					State = 307;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 308;
				Match(DEDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_group_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Line_group_itemContext[] line_group_item() {
			return GetRuleContexts<Line_group_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Line_group_itemContext line_group_item(int i) {
			return GetRuleContext<Line_group_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANK_LINE_FOLLOWING_OPTION() { return GetToken(YarnSpinnerParser.BLANK_LINE_FOLLOWING_OPTION, 0); }
		public Line_group_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_group_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_group_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_group_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_group_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_group_statementContext line_group_statement() {
		Line_group_statementContext _localctx = new Line_group_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_line_group_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 311;
					line_group_item();
					}
					} 
				}
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			{
			State = 317;
			line_group_item();
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLANK_LINE_FOLLOWING_OPTION) {
				{
				State = 318;
				Match(BLANK_LINE_FOLLOWING_OPTION);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_group_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_GROUP_ARROW() { return GetToken(YarnSpinnerParser.LINE_GROUP_ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Line_group_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_group_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_group_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_group_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_group_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_group_itemContext line_group_item() {
		Line_group_itemContext _localctx = new Line_group_itemContext(Context, State);
		EnterRule(_localctx, 52, RULE_line_group_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			Match(LINE_GROUP_ARROW);
			State = 322;
			line_statement();
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 323;
				Match(INDENT);
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2342914L) != 0)) {
					{
					{
					State = 324;
					statement();
					}
					}
					State = 329;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 330;
				Match(DEDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_DECLARE() { return GetToken(YarnSpinnerParser.COMMAND_DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_AS() { return GetToken(YarnSpinnerParser.EXPRESSION_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(Context, State);
		EnterRule(_localctx, 54, RULE_declare_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(COMMAND_START);
			State = 334;
			Match(COMMAND_DECLARE);
			State = 335;
			variable();
			State = 336;
			Match(OPERATOR_ASSIGNMENT);
			State = 337;
			expression(0);
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPRESSION_AS) {
				{
				State = 338;
				Match(EXPRESSION_AS);
				State = 339;
				_localctx.type = Match(FUNC_ID);
				}
			}

			State = 342;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_statementContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_START() { return GetTokens(YarnSpinnerParser.COMMAND_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENUM() { return GetToken(YarnSpinnerParser.COMMAND_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAND_END() { return GetTokens(YarnSpinnerParser.COMMAND_END); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_END, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_ENDENUM() { return GetToken(YarnSpinnerParser.COMMAND_ENDENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_case_statementContext[] enum_case_statement() {
			return GetRuleContexts<Enum_case_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_case_statementContext enum_case_statement(int i) {
			return GetRuleContext<Enum_case_statementContext>(i);
		}
		public Enum_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterEnum_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitEnum_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_statementContext enum_statement() {
		Enum_statementContext _localctx = new Enum_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_enum_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(COMMAND_START);
			State = 345;
			Match(COMMAND_ENUM);
			State = 346;
			_localctx.name = Match(ID);
			State = 347;
			Match(COMMAND_END);
			State = 349;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 348;
					enum_case_statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 353;
			Match(COMMAND_START);
			State = 354;
			Match(COMMAND_ENDENUM);
			State = 355;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_case_statementContext : ParserRuleContext {
		public IToken name;
		public ValueContext rawValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_CASE() { return GetToken(YarnSpinnerParser.COMMAND_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Enum_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_case_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterEnum_case_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitEnum_case_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_case_statementContext enum_case_statement() {
		Enum_case_statementContext _localctx = new Enum_case_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_enum_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDENT) {
				{
				State = 357;
				Match(INDENT);
				}
			}

			State = 360;
			Match(COMMAND_START);
			State = 361;
			Match(COMMAND_CASE);
			State = 362;
			_localctx.name = Match(FUNC_ID);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPERATOR_ASSIGNMENT) {
				{
				State = 363;
				Match(OPERATOR_ASSIGNMENT);
				State = 364;
				_localctx.rawValue = value();
				}
			}

			State = 367;
			Match(COMMAND_END);
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEDENT) {
				{
				State = 368;
				Match(DEDENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
	 
		public Jump_statementContext() { }
		public virtual void CopyFrom(Jump_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class JumpToNodeNameContext : Jump_statementContext {
		public IToken destination;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_JUMP() { return GetToken(YarnSpinnerParser.COMMAND_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		public JumpToNodeNameContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterJumpToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitJumpToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpToNodeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JumpToExpressionContext : Jump_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_JUMP() { return GetToken(YarnSpinnerParser.COMMAND_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_START() { return GetToken(YarnSpinnerParser.EXPRESSION_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END() { return GetToken(YarnSpinnerParser.EXPRESSION_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public JumpToExpressionContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterJumpToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitJumpToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJumpToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DetourToNodeNameContext : Jump_statementContext {
		public IToken destination;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_DETOUR() { return GetToken(YarnSpinnerParser.COMMAND_DETOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		public DetourToNodeNameContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDetourToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDetourToNodeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetourToNodeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DetourToExpressionContext : Jump_statementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_DETOUR() { return GetToken(YarnSpinnerParser.COMMAND_DETOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_START() { return GetToken(YarnSpinnerParser.EXPRESSION_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_END() { return GetToken(YarnSpinnerParser.EXPRESSION_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public DetourToExpressionContext(Jump_statementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDetourToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDetourToExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetourToExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(Context, State);
		EnterRule(_localctx, 60, RULE_jump_statement);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				_localctx = new JumpToNodeNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 371;
				Match(COMMAND_START);
				State = 372;
				Match(COMMAND_JUMP);
				State = 373;
				((JumpToNodeNameContext)_localctx).destination = Match(ID);
				State = 374;
				Match(COMMAND_END);
				}
				break;
			case 2:
				_localctx = new JumpToExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 375;
				Match(COMMAND_START);
				State = 376;
				Match(COMMAND_JUMP);
				State = 377;
				Match(EXPRESSION_START);
				State = 378;
				expression(0);
				State = 379;
				Match(EXPRESSION_END);
				State = 380;
				Match(COMMAND_END);
				}
				break;
			case 3:
				_localctx = new DetourToNodeNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 382;
				Match(COMMAND_START);
				State = 383;
				Match(COMMAND_DETOUR);
				State = 384;
				((DetourToNodeNameContext)_localctx).destination = Match(ID);
				State = 385;
				Match(COMMAND_END);
				}
				break;
			case 4:
				_localctx = new DetourToExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 386;
				Match(COMMAND_START);
				State = 387;
				Match(COMMAND_DETOUR);
				State = 388;
				Match(EXPRESSION_START);
				State = 389;
				expression(0);
				State = 390;
				Match(EXPRESSION_END);
				State = 391;
				Match(COMMAND_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_RETURN() { return GetToken(YarnSpinnerParser.COMMAND_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 62, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			Match(COMMAND_START);
			State = 396;
			Match(COMMAND_RETURN);
			State = 397;
			Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,87,400,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,4,0,
		72,8,0,11,0,12,0,73,1,1,1,1,1,1,1,2,4,2,80,8,2,11,2,12,2,81,1,2,1,2,1,
		2,1,2,1,3,1,3,1,3,3,3,91,8,3,1,4,5,4,94,8,4,10,4,12,4,97,9,4,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,112,8,5,10,5,12,5,115,9,
		5,1,5,3,5,118,8,5,1,6,1,6,3,6,122,8,6,1,6,5,6,125,8,6,10,6,12,6,128,9,
		6,1,6,1,6,1,7,4,7,133,8,7,11,7,12,7,134,1,7,1,7,1,7,1,7,4,7,141,8,7,11,
		7,12,7,142,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,3,10,163,8,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,180,8,10,10,10,12,10,183,
		9,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,192,8,11,1,12,1,12,1,13,1,
		13,1,13,3,13,199,8,13,1,13,1,13,5,13,203,8,13,10,13,12,13,206,9,13,1,13,
		1,13,1,14,3,14,211,8,14,1,14,1,14,1,14,1,15,1,15,5,15,218,8,15,10,15,12,
		15,221,9,15,1,15,3,15,224,8,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
		1,16,5,16,235,8,16,10,16,12,16,238,9,16,1,17,1,17,1,17,1,17,1,17,5,17,
		245,8,17,10,17,12,17,248,9,17,1,18,1,18,1,18,1,18,5,18,254,8,18,10,18,
		12,18,257,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,21,1,21,1,21,1,21,5,21,275,8,21,10,21,12,21,278,9,21,1,22,1,22,
		1,22,1,22,1,22,5,22,285,8,22,10,22,12,22,288,9,22,1,23,5,23,291,8,23,10,
		23,12,23,294,9,23,1,23,1,23,3,23,298,8,23,1,24,1,24,1,24,1,24,5,24,304,
		8,24,10,24,12,24,307,9,24,1,24,3,24,310,8,24,1,25,5,25,313,8,25,10,25,
		12,25,316,9,25,1,25,1,25,3,25,320,8,25,1,26,1,26,1,26,1,26,5,26,326,8,
		26,10,26,12,26,329,9,26,1,26,3,26,332,8,26,1,27,1,27,1,27,1,27,1,27,1,
		27,1,27,3,27,341,8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,4,28,350,8,28,
		11,28,12,28,351,1,28,1,28,1,28,1,28,1,29,3,29,359,8,29,1,29,1,29,1,29,
		1,29,1,29,3,29,366,8,29,1,29,1,29,3,29,370,8,29,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,30,1,30,1,30,3,30,394,8,30,1,31,1,31,1,31,1,31,1,31,0,1,20,32,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,0,6,1,0,50,52,1,0,48,49,2,0,33,34,36,37,2,0,35,35,38,38,
		1,0,39,41,2,0,32,32,43,47,430,0,67,1,0,0,0,2,75,1,0,0,0,4,79,1,0,0,0,6,
		87,1,0,0,0,8,95,1,0,0,0,10,117,1,0,0,0,12,119,1,0,0,0,14,140,1,0,0,0,16,
		144,1,0,0,0,18,147,1,0,0,0,20,162,1,0,0,0,22,191,1,0,0,0,24,193,1,0,0,
		0,26,195,1,0,0,0,28,210,1,0,0,0,30,215,1,0,0,0,32,229,1,0,0,0,34,239,1,
		0,0,0,36,249,1,0,0,0,38,258,1,0,0,0,40,265,1,0,0,0,42,270,1,0,0,0,44,286,
		1,0,0,0,46,292,1,0,0,0,48,299,1,0,0,0,50,314,1,0,0,0,52,321,1,0,0,0,54,
		333,1,0,0,0,56,344,1,0,0,0,58,358,1,0,0,0,60,393,1,0,0,0,62,395,1,0,0,
		0,64,66,3,2,1,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,
		0,68,71,1,0,0,0,69,67,1,0,0,0,70,72,3,4,2,0,71,70,1,0,0,0,72,73,1,0,0,
		0,73,71,1,0,0,0,73,74,1,0,0,0,74,1,1,0,0,0,75,76,5,10,0,0,76,77,5,27,0,
		0,77,3,1,0,0,0,78,80,3,6,3,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,
		81,82,1,0,0,0,82,83,1,0,0,0,83,84,5,8,0,0,84,85,3,8,4,0,85,86,5,13,0,0,
		86,5,1,0,0,0,87,88,5,7,0,0,88,90,5,9,0,0,89,91,5,11,0,0,90,89,1,0,0,0,
		90,91,1,0,0,0,91,7,1,0,0,0,92,94,3,10,5,0,93,92,1,0,0,0,94,97,1,0,0,0,
		95,93,1,0,0,0,95,96,1,0,0,0,96,9,1,0,0,0,97,95,1,0,0,0,98,118,3,12,6,0,
		99,118,3,30,15,0,100,118,3,38,19,0,101,118,3,46,23,0,102,118,3,40,20,0,
		103,118,3,42,21,0,104,118,3,54,27,0,105,118,3,56,28,0,106,118,3,60,30,
		0,107,118,3,62,31,0,108,118,3,50,25,0,109,113,5,1,0,0,110,112,3,10,5,0,
		111,110,1,0,0,0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,116,
		1,0,0,0,115,113,1,0,0,0,116,118,5,2,0,0,117,98,1,0,0,0,117,99,1,0,0,0,
		117,100,1,0,0,0,117,101,1,0,0,0,117,102,1,0,0,0,117,103,1,0,0,0,117,104,
		1,0,0,0,117,105,1,0,0,0,117,106,1,0,0,0,117,107,1,0,0,0,117,108,1,0,0,
		0,117,109,1,0,0,0,118,11,1,0,0,0,119,121,3,14,7,0,120,122,3,18,9,0,121,
		120,1,0,0,0,121,122,1,0,0,0,122,126,1,0,0,0,123,125,3,16,8,0,124,123,1,
		0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,
		128,126,1,0,0,0,129,130,5,6,0,0,130,13,1,0,0,0,131,133,5,21,0,0,132,131,
		1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,141,1,0,0,
		0,136,137,5,17,0,0,137,138,3,20,10,0,138,139,5,59,0,0,139,141,1,0,0,0,
		140,132,1,0,0,0,140,136,1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,
		1,0,0,0,143,15,1,0,0,0,144,145,5,10,0,0,145,146,5,27,0,0,146,17,1,0,0,
		0,147,148,5,16,0,0,148,149,5,65,0,0,149,150,3,20,10,0,150,151,5,79,0,0,
		151,19,1,0,0,0,152,153,6,10,-1,0,153,154,5,53,0,0,154,155,3,20,10,0,155,
		156,5,54,0,0,156,163,1,0,0,0,157,158,5,49,0,0,158,163,3,20,10,8,159,160,
		5,42,0,0,160,163,3,20,10,7,161,163,3,22,11,0,162,152,1,0,0,0,162,157,1,
		0,0,0,162,159,1,0,0,0,162,161,1,0,0,0,163,181,1,0,0,0,164,165,10,6,0,0,
		165,166,7,0,0,0,166,180,3,20,10,7,167,168,10,5,0,0,168,169,7,1,0,0,169,
		180,3,20,10,6,170,171,10,4,0,0,171,172,7,2,0,0,172,180,3,20,10,5,173,174,
		10,3,0,0,174,175,7,3,0,0,175,180,3,20,10,4,176,177,10,2,0,0,177,178,7,
		4,0,0,178,180,3,20,10,3,179,164,1,0,0,0,179,167,1,0,0,0,179,170,1,0,0,
		0,179,173,1,0,0,0,179,176,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,
		182,1,0,0,0,182,21,1,0,0,0,183,181,1,0,0,0,184,192,5,62,0,0,185,192,5,
		29,0,0,186,192,5,30,0,0,187,192,3,24,12,0,188,192,5,57,0,0,189,192,3,26,
		13,0,190,192,3,28,14,0,191,184,1,0,0,0,191,185,1,0,0,0,191,186,1,0,0,0,
		191,187,1,0,0,0,191,188,1,0,0,0,191,189,1,0,0,0,191,190,1,0,0,0,192,23,
		1,0,0,0,193,194,5,60,0,0,194,25,1,0,0,0,195,196,5,58,0,0,196,198,5,53,
		0,0,197,199,3,20,10,0,198,197,1,0,0,0,198,199,1,0,0,0,199,204,1,0,0,0,
		200,201,5,55,0,0,201,203,3,20,10,0,202,200,1,0,0,0,203,206,1,0,0,0,204,
		202,1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,
		54,0,0,208,27,1,0,0,0,209,211,5,58,0,0,210,209,1,0,0,0,210,211,1,0,0,0,
		211,212,1,0,0,0,212,213,5,61,0,0,213,214,5,58,0,0,214,29,1,0,0,0,215,219,
		3,32,16,0,216,218,3,34,17,0,217,216,1,0,0,0,218,221,1,0,0,0,219,217,1,
		0,0,0,219,220,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,222,224,3,36,18,
		0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,226,5,16,0,0,226,
		227,5,69,0,0,227,228,5,79,0,0,228,31,1,0,0,0,229,230,5,16,0,0,230,231,
		5,65,0,0,231,232,3,20,10,0,232,236,5,79,0,0,233,235,3,10,5,0,234,233,1,
		0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,33,1,0,0,0,238,
		236,1,0,0,0,239,240,5,16,0,0,240,241,5,66,0,0,241,242,3,20,10,0,242,246,
		5,79,0,0,243,245,3,10,5,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,
		0,0,246,247,1,0,0,0,247,35,1,0,0,0,248,246,1,0,0,0,249,250,5,16,0,0,250,
		251,5,67,0,0,251,255,5,79,0,0,252,254,3,10,5,0,253,252,1,0,0,0,254,257,
		1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,37,1,0,0,0,257,255,1,0,0,0,
		258,259,5,16,0,0,259,260,5,68,0,0,260,261,3,24,12,0,261,262,7,5,0,0,262,
		263,3,20,10,0,263,264,5,79,0,0,264,39,1,0,0,0,265,266,5,16,0,0,266,267,
		5,70,0,0,267,268,3,26,13,0,268,269,5,79,0,0,269,41,1,0,0,0,270,271,5,16,
		0,0,271,272,3,44,22,0,272,276,5,81,0,0,273,275,3,16,8,0,274,273,1,0,0,
		0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,43,1,0,0,0,278,276,
		1,0,0,0,279,285,5,83,0,0,280,281,5,82,0,0,281,282,3,20,10,0,282,283,5,
		59,0,0,283,285,1,0,0,0,284,279,1,0,0,0,284,280,1,0,0,0,285,288,1,0,0,0,
		286,284,1,0,0,0,286,287,1,0,0,0,287,45,1,0,0,0,288,286,1,0,0,0,289,291,
		3,48,24,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,
		0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,297,3,48,24,0,296,298,5,3,0,0,
		297,296,1,0,0,0,297,298,1,0,0,0,298,47,1,0,0,0,299,300,5,14,0,0,300,309,
		3,12,6,0,301,305,5,1,0,0,302,304,3,10,5,0,303,302,1,0,0,0,304,307,1,0,
		0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,1,0,0,0,308,
		310,5,2,0,0,309,301,1,0,0,0,309,310,1,0,0,0,310,49,1,0,0,0,311,313,3,52,
		26,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,
		317,1,0,0,0,316,314,1,0,0,0,317,319,3,52,26,0,318,320,5,3,0,0,319,318,
		1,0,0,0,319,320,1,0,0,0,320,51,1,0,0,0,321,322,5,15,0,0,322,331,3,12,6,
		0,323,327,5,1,0,0,324,326,3,10,5,0,325,324,1,0,0,0,326,329,1,0,0,0,327,
		325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,330,332,5,
		2,0,0,331,323,1,0,0,0,331,332,1,0,0,0,332,53,1,0,0,0,333,334,5,16,0,0,
		334,335,5,71,0,0,335,336,3,24,12,0,336,337,5,32,0,0,337,340,3,20,10,0,
		338,339,5,56,0,0,339,341,5,58,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,
		342,1,0,0,0,342,343,5,79,0,0,343,55,1,0,0,0,344,345,5,16,0,0,345,346,5,
		75,0,0,346,347,5,7,0,0,347,349,5,79,0,0,348,350,3,58,29,0,349,348,1,0,
		0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,
		354,5,16,0,0,354,355,5,77,0,0,355,356,5,79,0,0,356,57,1,0,0,0,357,359,
		5,1,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,361,5,16,0,
		0,361,362,5,76,0,0,362,365,5,58,0,0,363,364,5,32,0,0,364,366,3,22,11,0,
		365,363,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,369,5,79,0,0,368,370,
		5,2,0,0,369,368,1,0,0,0,369,370,1,0,0,0,370,59,1,0,0,0,371,372,5,16,0,
		0,372,373,5,72,0,0,373,374,5,7,0,0,374,394,5,79,0,0,375,376,5,16,0,0,376,
		377,5,72,0,0,377,378,5,17,0,0,378,379,3,20,10,0,379,380,5,59,0,0,380,381,
		5,79,0,0,381,394,1,0,0,0,382,383,5,16,0,0,383,384,5,73,0,0,384,385,5,7,
		0,0,385,394,5,79,0,0,386,387,5,16,0,0,387,388,5,73,0,0,388,389,5,17,0,
		0,389,390,3,20,10,0,390,391,5,59,0,0,391,392,5,79,0,0,392,394,1,0,0,0,
		393,371,1,0,0,0,393,375,1,0,0,0,393,382,1,0,0,0,393,386,1,0,0,0,394,61,
		1,0,0,0,395,396,5,16,0,0,396,397,5,74,0,0,397,398,5,79,0,0,398,63,1,0,
		0,0,41,67,73,81,90,95,113,117,121,126,134,140,142,162,179,181,191,198,
		204,210,219,223,236,246,255,276,284,286,292,297,305,309,314,319,327,331,
		340,351,358,365,369,393
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Yarn.Compiler

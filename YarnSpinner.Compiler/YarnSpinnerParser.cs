//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/desplesda/Work/yarnspinner/YarnSpinner.Compiler/YarnSpinnerParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Yarn.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class YarnSpinnerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, WS=3, COMMENT=4, NEWLINE=5, ID=6, BODY_START=7, HEADER_DELIMITER=8, 
		HASHTAG=9, REST_OF_LINE=10, HEADER_NEWLINE=11, BODY_WS=12, BODY_NEWLINE=13, 
		BODY_COMMENT=14, BODY_END=15, SHORTCUT_ARROW=16, COMMAND_START=17, EXPRESSION_START=18, 
		TEXT_NEWLINE=19, TEXT_ESCAPE=20, TEXT_COMMENT=21, TEXT=22, TEXT_FRAG=23, 
		TEXT_COMMANDHASHTAG_WS=24, TEXT_COMMANDHASHTAG_COMMENT=25, TEXT_COMMANDHASHTAG_ERROR=26, 
		HASHTAG_WS=27, HASHTAG_TEXT=28, EXPR_WS=29, KEYWORD_TRUE=30, KEYWORD_FALSE=31, 
		KEYWORD_NULL=32, OPERATOR_ASSIGNMENT=33, OPERATOR_LOGICAL_LESS_THAN_EQUALS=34, 
		OPERATOR_LOGICAL_GREATER_THAN_EQUALS=35, OPERATOR_LOGICAL_EQUALS=36, OPERATOR_LOGICAL_LESS=37, 
		OPERATOR_LOGICAL_GREATER=38, OPERATOR_LOGICAL_NOT_EQUALS=39, OPERATOR_LOGICAL_AND=40, 
		OPERATOR_LOGICAL_OR=41, OPERATOR_LOGICAL_XOR=42, OPERATOR_LOGICAL_NOT=43, 
		OPERATOR_MATHS_ADDITION_EQUALS=44, OPERATOR_MATHS_SUBTRACTION_EQUALS=45, 
		OPERATOR_MATHS_MULTIPLICATION_EQUALS=46, OPERATOR_MATHS_MODULUS_EQUALS=47, 
		OPERATOR_MATHS_DIVISION_EQUALS=48, OPERATOR_MATHS_ADDITION=49, OPERATOR_MATHS_SUBTRACTION=50, 
		OPERATOR_MATHS_MULTIPLICATION=51, OPERATOR_MATHS_DIVISION=52, OPERATOR_MATHS_MODULUS=53, 
		LPAREN=54, RPAREN=55, COMMA=56, EXPRESSION_AS=57, TYPE_STRING=58, TYPE_NUMBER=59, 
		TYPE_BOOL=60, STRING=61, FUNC_ID=62, EXPRESSION_END=63, VAR_ID=64, DOT=65, 
		NUMBER=66, COMMAND_WS=67, COMMAND_IF=68, COMMAND_ELSEIF=69, COMMAND_ELSE=70, 
		COMMAND_SET=71, COMMAND_ENDIF=72, COMMAND_CALL=73, COMMAND_DECLARE=74, 
		COMMAND_JUMP=75, COMMAND_ENUM=76, COMMAND_CASE=77, COMMAND_ENDENUM=78, 
		COMMAND_LOCAL=79, COMMAND_END=80, COMMAND_TEXT_END=81, COMMAND_EXPRESSION_START=82, 
		COMMAND_TEXT=83;
	public const int
		RULE_dialogue = 0, RULE_file_hashtag = 1, RULE_node = 2, RULE_header = 3, 
		RULE_body = 4, RULE_statement = 5, RULE_line_statement = 6, RULE_line_formatted_text = 7, 
		RULE_hashtag = 8, RULE_line_condition = 9, RULE_expression = 10, RULE_value = 11, 
		RULE_variable = 12, RULE_function = 13, RULE_if_statement = 14, RULE_if_clause = 15, 
		RULE_else_if_clause = 16, RULE_else_clause = 17, RULE_set_statement = 18, 
		RULE_call_statement = 19, RULE_command_statement = 20, RULE_command_formatted_text = 21, 
		RULE_shortcut_option_statement = 22, RULE_shortcut_option = 23, RULE_declare_statement = 24, 
		RULE_jump_statement = 25, RULE_type = 26;
	public static readonly string[] ruleNames = {
		"dialogue", "file_hashtag", "node", "header", "body", "statement", "line_statement", 
		"line_formatted_text", "hashtag", "line_condition", "expression", "value", 
		"variable", "function", "if_statement", "if_clause", "else_if_clause", 
		"else_clause", "set_statement", "call_statement", "command_statement", 
		"command_formatted_text", "shortcut_option_statement", "shortcut_option", 
		"declare_statement", "jump_statement", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'---'", null, "'#'", null, 
		null, null, null, null, "'==='", "'->'", "'<<'", null, null, "'\\'", null, 
		null, null, null, null, null, null, null, null, "'true'", "'false'", "'null'", 
		null, null, null, null, null, null, null, null, null, null, null, "'+='", 
		"'-='", "'*='", "'%='", "'/='", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", 
		"')'", "','", "'as'", "'string'", "'number'", "'bool'", null, null, "'}'", 
		null, "'.'", null, null, null, null, null, null, "'endif'", null, null, 
		null, null, null, null, null, null, null, "'{'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "WS", "COMMENT", "NEWLINE", "ID", "BODY_START", 
		"HEADER_DELIMITER", "HASHTAG", "REST_OF_LINE", "HEADER_NEWLINE", "BODY_WS", 
		"BODY_NEWLINE", "BODY_COMMENT", "BODY_END", "SHORTCUT_ARROW", "COMMAND_START", 
		"EXPRESSION_START", "TEXT_NEWLINE", "TEXT_ESCAPE", "TEXT_COMMENT", "TEXT", 
		"TEXT_FRAG", "TEXT_COMMANDHASHTAG_WS", "TEXT_COMMANDHASHTAG_COMMENT", 
		"TEXT_COMMANDHASHTAG_ERROR", "HASHTAG_WS", "HASHTAG_TEXT", "EXPR_WS", 
		"KEYWORD_TRUE", "KEYWORD_FALSE", "KEYWORD_NULL", "OPERATOR_ASSIGNMENT", 
		"OPERATOR_LOGICAL_LESS_THAN_EQUALS", "OPERATOR_LOGICAL_GREATER_THAN_EQUALS", 
		"OPERATOR_LOGICAL_EQUALS", "OPERATOR_LOGICAL_LESS", "OPERATOR_LOGICAL_GREATER", 
		"OPERATOR_LOGICAL_NOT_EQUALS", "OPERATOR_LOGICAL_AND", "OPERATOR_LOGICAL_OR", 
		"OPERATOR_LOGICAL_XOR", "OPERATOR_LOGICAL_NOT", "OPERATOR_MATHS_ADDITION_EQUALS", 
		"OPERATOR_MATHS_SUBTRACTION_EQUALS", "OPERATOR_MATHS_MULTIPLICATION_EQUALS", 
		"OPERATOR_MATHS_MODULUS_EQUALS", "OPERATOR_MATHS_DIVISION_EQUALS", "OPERATOR_MATHS_ADDITION", 
		"OPERATOR_MATHS_SUBTRACTION", "OPERATOR_MATHS_MULTIPLICATION", "OPERATOR_MATHS_DIVISION", 
		"OPERATOR_MATHS_MODULUS", "LPAREN", "RPAREN", "COMMA", "EXPRESSION_AS", 
		"TYPE_STRING", "TYPE_NUMBER", "TYPE_BOOL", "STRING", "FUNC_ID", "EXPRESSION_END", 
		"VAR_ID", "DOT", "NUMBER", "COMMAND_WS", "COMMAND_IF", "COMMAND_ELSEIF", 
		"COMMAND_ELSE", "COMMAND_SET", "COMMAND_ENDIF", "COMMAND_CALL", "COMMAND_DECLARE", 
		"COMMAND_JUMP", "COMMAND_ENUM", "COMMAND_CASE", "COMMAND_ENDENUM", "COMMAND_LOCAL", 
		"COMMAND_END", "COMMAND_TEXT_END", "COMMAND_EXPRESSION_START", "COMMAND_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YarnSpinnerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static YarnSpinnerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YarnSpinnerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YarnSpinnerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DialogueContext : ParserRuleContext {
		public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		public File_hashtagContext[] file_hashtag() {
			return GetRuleContexts<File_hashtagContext>();
		}
		public File_hashtagContext file_hashtag(int i) {
			return GetRuleContext<File_hashtagContext>(i);
		}
		public DialogueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dialogue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDialogue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDialogue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDialogue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DialogueContext dialogue() {
		DialogueContext _localctx = new DialogueContext(Context, State);
		EnterRule(_localctx, 0, RULE_dialogue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 54; file_hashtag();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 60; node();
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_hashtagContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public File_hashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_hashtag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFile_hashtag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFile_hashtag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_hashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_hashtagContext file_hashtag() {
		File_hashtagContext _localctx = new File_hashtagContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(HASHTAG);
			State = 66; _localctx.text = Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		public ITerminalNode BODY_START() { return GetToken(YarnSpinnerParser.BODY_START, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode BODY_END() { return GetToken(YarnSpinnerParser.BODY_END, 0); }
		public HeaderContext[] header() {
			return GetRuleContexts<HeaderContext>();
		}
		public HeaderContext header(int i) {
			return GetRuleContext<HeaderContext>(i);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 4, RULE_node);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 68; header();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ID );
			State = 73; Match(BODY_START);
			State = 74; body();
			State = 75; Match(BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public IToken header_key;
		public IToken header_value;
		public ITerminalNode HEADER_DELIMITER() { return GetToken(YarnSpinnerParser.HEADER_DELIMITER, 0); }
		public ITerminalNode HEADER_NEWLINE() { return GetToken(YarnSpinnerParser.HEADER_NEWLINE, 0); }
		public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		public ITerminalNode REST_OF_LINE() { return GetToken(YarnSpinnerParser.REST_OF_LINE, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 6, RULE_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; _localctx.header_key = Match(ID);
			State = 78; Match(HEADER_DELIMITER);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REST_OF_LINE) {
				{
				State = 79; _localctx.header_value = Match(REST_OF_LINE);
				}
			}

			State = 82; Match(HEADER_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INDENT) | (1L << HASHTAG) | (1L << SHORTCUT_ARROW) | (1L << COMMAND_START) | (1L << EXPRESSION_START) | (1L << TEXT_NEWLINE) | (1L << TEXT))) != 0)) {
				{
				{
				State = 84; statement();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Set_statementContext set_statement() {
			return GetRuleContext<Set_statementContext>(0);
		}
		public Shortcut_option_statementContext shortcut_option_statement() {
			return GetRuleContext<Shortcut_option_statementContext>(0);
		}
		public Call_statementContext call_statement() {
			return GetRuleContext<Call_statementContext>(0);
		}
		public Command_statementContext command_statement() {
			return GetRuleContext<Command_statementContext>(0);
		}
		public Declare_statementContext declare_statement() {
			return GetRuleContext<Declare_statementContext>(0);
		}
		public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		int _la;
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; line_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91; if_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; set_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93; shortcut_option_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 94; call_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 95; command_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 96; declare_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 97; jump_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 98; Match(INDENT);
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INDENT) | (1L << HASHTAG) | (1L << SHORTCUT_ARROW) | (1L << COMMAND_START) | (1L << EXPRESSION_START) | (1L << TEXT_NEWLINE) | (1L << TEXT))) != 0)) {
					{
					{
					State = 99; statement();
					}
					}
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 105; Match(DEDENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_statementContext : ParserRuleContext {
		public Line_formatted_textContext line_formatted_text() {
			return GetRuleContext<Line_formatted_textContext>(0);
		}
		public ITerminalNode TEXT_NEWLINE() { return GetToken(YarnSpinnerParser.TEXT_NEWLINE, 0); }
		public Line_conditionContext line_condition() {
			return GetRuleContext<Line_conditionContext>(0);
		}
		public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Line_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_statementContext line_statement() {
		Line_statementContext _localctx = new Line_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_line_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; line_formatted_text();
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_START) {
				{
				State = 109; line_condition();
				}
			}

			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==HASHTAG) {
				{
				{
				State = 112; hashtag();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118; Match(TEXT_NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_formatted_textContext : ParserRuleContext {
		public ITerminalNode[] EXPRESSION_START() { return GetTokens(YarnSpinnerParser.EXPRESSION_START); }
		public ITerminalNode EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_START, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(YarnSpinnerParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(YarnSpinnerParser.TEXT, i);
		}
		public Line_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_formatted_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_formatted_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_formatted_text(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_formatted_textContext line_formatted_text() {
		Line_formatted_textContext _localctx = new Line_formatted_textContext(Context, State);
		EnterRule(_localctx, 14, RULE_line_formatted_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXPRESSION_START || _la==TEXT) {
				{
				State = 129;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 121;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 120; Match(TEXT);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 123;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case EXPRESSION_START:
					{
					State = 125; Match(EXPRESSION_START);
					State = 126; expression(0);
					State = 127; Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HashtagContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode HASHTAG() { return GetToken(YarnSpinnerParser.HASHTAG, 0); }
		public ITerminalNode HASHTAG_TEXT() { return GetToken(YarnSpinnerParser.HASHTAG_TEXT, 0); }
		public HashtagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hashtag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterHashtag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitHashtag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashtag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HashtagContext hashtag() {
		HashtagContext _localctx = new HashtagContext(Context, State);
		EnterRule(_localctx, 16, RULE_hashtag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(HASHTAG);
			State = 135; _localctx.text = Match(HASHTAG_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Line_conditionContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Line_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterLine_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitLine_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Line_conditionContext line_condition() {
		Line_conditionContext _localctx = new Line_conditionContext(Context, State);
		EnterRule(_localctx, 18, RULE_line_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(COMMAND_START);
			State = 138; Match(COMMAND_IF);
			State = 139; expression(0);
			State = 140; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpParensContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(YarnSpinnerParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(YarnSpinnerParser.RPAREN, 0); }
		public ExpParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMultDivModContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_MATHS_MULTIPLICATION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MULTIPLICATION, 0); }
		public ITerminalNode OPERATOR_MATHS_DIVISION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_DIVISION, 0); }
		public ITerminalNode OPERATOR_MATHS_MODULUS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MODULUS, 0); }
		public ExpMultDivModContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpMultDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpMultDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMultDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpMultDivModEqualsContext : ExpressionContext {
		public IToken op;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OPERATOR_MATHS_MULTIPLICATION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MULTIPLICATION_EQUALS, 0); }
		public ITerminalNode OPERATOR_MATHS_DIVISION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_DIVISION_EQUALS, 0); }
		public ITerminalNode OPERATOR_MATHS_MODULUS_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_MODULUS_EQUALS, 0); }
		public ExpMultDivModEqualsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpMultDivModEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpMultDivModEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpMultDivModEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpComparisonContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_LOGICAL_LESS_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS_THAN_EQUALS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_GREATER_THAN_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER_THAN_EQUALS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_LESS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_LESS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_GREATER() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_GREATER, 0); }
		public ExpComparisonContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpTypeConversionContext : ExpressionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(YarnSpinnerParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(YarnSpinnerParser.RPAREN, 0); }
		public ExpTypeConversionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpTypeConversion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpTypeConversion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpTypeConversion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNegativeContext : ExpressionContext {
		public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpNegativeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNegative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNegative(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNegative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAndOrXorContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_LOGICAL_AND() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_AND, 0); }
		public ITerminalNode OPERATOR_LOGICAL_OR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_OR, 0); }
		public ITerminalNode OPERATOR_LOGICAL_XOR() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_XOR, 0); }
		public ExpAndOrXorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAndOrXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAndOrXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAndOrXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpPlusMinusEqualsContext : ExpressionContext {
		public IToken op;
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OPERATOR_MATHS_ADDITION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_ADDITION_EQUALS, 0); }
		public ITerminalNode OPERATOR_MATHS_SUBTRACTION_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION_EQUALS, 0); }
		public ExpPlusMinusEqualsContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpPlusMinusEquals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpPlusMinusEquals(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpPlusMinusEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpAddSubContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_MATHS_ADDITION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_ADDITION, 0); }
		public ITerminalNode OPERATOR_MATHS_SUBTRACTION() { return GetToken(YarnSpinnerParser.OPERATOR_MATHS_SUBTRACTION, 0); }
		public ExpAddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpNotContext : ExpressionContext {
		public ITerminalNode OPERATOR_LOGICAL_NOT() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpNotContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpValueContext : ExpressionContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpEqualityContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OPERATOR_LOGICAL_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_EQUALS, 0); }
		public ITerminalNode OPERATOR_LOGICAL_NOT_EQUALS() { return GetToken(YarnSpinnerParser.OPERATOR_LOGICAL_NOT_EQUALS, 0); }
		public ExpEqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterExpEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitExpEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new ExpParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 143; Match(LPAREN);
				State = 144; expression(0);
				State = 145; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new ExpNegativeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 147; Match(OPERATOR_MATHS_SUBTRACTION);
				State = 148; expression(11);
				}
				break;
			case 3:
				{
				_localctx = new ExpNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149; Match(OPERATOR_LOGICAL_NOT);
				State = 150; expression(10);
				}
				break;
			case 4:
				{
				_localctx = new ExpMultDivModEqualsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151; variable();
				State = 152;
				((ExpMultDivModEqualsContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_MATHS_MULTIPLICATION_EQUALS) | (1L << OPERATOR_MATHS_MODULUS_EQUALS) | (1L << OPERATOR_MATHS_DIVISION_EQUALS))) != 0)) ) {
					((ExpMultDivModEqualsContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 153; expression(5);
				}
				break;
			case 5:
				{
				_localctx = new ExpPlusMinusEqualsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 155; variable();
				State = 156;
				((ExpPlusMinusEqualsContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OPERATOR_MATHS_ADDITION_EQUALS || _la==OPERATOR_MATHS_SUBTRACTION_EQUALS) ) {
					((ExpPlusMinusEqualsContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 157; expression(4);
				}
				break;
			case 6:
				{
				_localctx = new ExpTypeConversionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159; type();
				State = 160; Match(LPAREN);
				State = 161; expression(0);
				State = 162; Match(RPAREN);
				}
				break;
			case 7:
				{
				_localctx = new ExpValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164; value();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 184;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 182;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new ExpMultDivModContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 167;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 168;
						((ExpMultDivModContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_MATHS_MULTIPLICATION) | (1L << OPERATOR_MATHS_DIVISION) | (1L << OPERATOR_MATHS_MODULUS))) != 0)) ) {
							((ExpMultDivModContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 169; expression(10);
						}
						break;
					case 2:
						{
						_localctx = new ExpAddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 170;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 171;
						((ExpAddSubContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_MATHS_ADDITION || _la==OPERATOR_MATHS_SUBTRACTION) ) {
							((ExpAddSubContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 172; expression(9);
						}
						break;
					case 3:
						{
						_localctx = new ExpComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 173;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 174;
						((ExpComparisonContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_LOGICAL_LESS_THAN_EQUALS) | (1L << OPERATOR_LOGICAL_GREATER_THAN_EQUALS) | (1L << OPERATOR_LOGICAL_LESS) | (1L << OPERATOR_LOGICAL_GREATER))) != 0)) ) {
							((ExpComparisonContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 175; expression(8);
						}
						break;
					case 4:
						{
						_localctx = new ExpEqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 176;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 177;
						((ExpEqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==OPERATOR_LOGICAL_EQUALS || _la==OPERATOR_LOGICAL_NOT_EQUALS) ) {
							((ExpEqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 178; expression(7);
						}
						break;
					case 5:
						{
						_localctx = new ExpAndOrXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 179;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 180;
						((ExpAndOrXorContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPERATOR_LOGICAL_AND) | (1L << OPERATOR_LOGICAL_OR) | (1L << OPERATOR_LOGICAL_XOR))) != 0)) ) {
							((ExpAndOrXorContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 181; expression(4);
						}
						break;
					}
					} 
				}
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ValueNullContext : ValueContext {
		public ITerminalNode KEYWORD_NULL() { return GetToken(YarnSpinnerParser.KEYWORD_NULL, 0); }
		public ValueNullContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueNumberContext : ValueContext {
		public ITerminalNode NUMBER() { return GetToken(YarnSpinnerParser.NUMBER, 0); }
		public ValueNumberContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueTrueContext : ValueContext {
		public ITerminalNode KEYWORD_TRUE() { return GetToken(YarnSpinnerParser.KEYWORD_TRUE, 0); }
		public ValueTrueContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFalseContext : ValueContext {
		public ITerminalNode KEYWORD_FALSE() { return GetToken(YarnSpinnerParser.KEYWORD_FALSE, 0); }
		public ValueFalseContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueFuncContext : ValueContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ValueFuncContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueVarContext : ValueContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ValueVarContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueStringContext : ValueContext {
		public ITerminalNode STRING() { return GetToken(YarnSpinnerParser.STRING, 0); }
		public ValueStringContext(ValueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterValueString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitValueString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new ValueNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 187; Match(NUMBER);
				}
				break;
			case KEYWORD_TRUE:
				_localctx = new ValueTrueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; Match(KEYWORD_TRUE);
				}
				break;
			case KEYWORD_FALSE:
				_localctx = new ValueFalseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 189; Match(KEYWORD_FALSE);
				}
				break;
			case VAR_ID:
				_localctx = new ValueVarContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 190; variable();
				}
				break;
			case STRING:
				_localctx = new ValueStringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 191; Match(STRING);
				}
				break;
			case KEYWORD_NULL:
				_localctx = new ValueNullContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 192; Match(KEYWORD_NULL);
				}
				break;
			case FUNC_ID:
				_localctx = new ValueFuncContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 193; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VAR_ID() { return GetToken(YarnSpinnerParser.VAR_ID, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 24, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(VAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode FUNC_ID() { return GetToken(YarnSpinnerParser.FUNC_ID, 0); }
		public ITerminalNode LPAREN() { return GetToken(YarnSpinnerParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(YarnSpinnerParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(YarnSpinnerParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(YarnSpinnerParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 26, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(FUNC_ID);
			State = 199; Match(LPAREN);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & ((1L << (KEYWORD_TRUE - 30)) | (1L << (KEYWORD_FALSE - 30)) | (1L << (KEYWORD_NULL - 30)) | (1L << (OPERATOR_LOGICAL_NOT - 30)) | (1L << (OPERATOR_MATHS_SUBTRACTION - 30)) | (1L << (LPAREN - 30)) | (1L << (TYPE_STRING - 30)) | (1L << (TYPE_NUMBER - 30)) | (1L << (TYPE_BOOL - 30)) | (1L << (STRING - 30)) | (1L << (FUNC_ID - 30)) | (1L << (VAR_ID - 30)) | (1L << (NUMBER - 30)))) != 0)) {
				{
				State = 200; expression(0);
				}
			}

			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 203; Match(COMMA);
				State = 204; expression(0);
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 210; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public If_clauseContext if_clause() {
			return GetRuleContext<If_clauseContext>(0);
		}
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_ENDIF() { return GetToken(YarnSpinnerParser.COMMAND_ENDIF, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Else_if_clauseContext[] else_if_clause() {
			return GetRuleContexts<Else_if_clauseContext>();
		}
		public Else_if_clauseContext else_if_clause(int i) {
			return GetRuleContext<Else_if_clauseContext>(i);
		}
		public Else_clauseContext else_clause() {
			return GetRuleContext<Else_clauseContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_if_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; if_clause();
			State = 216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 213; else_if_clause();
					}
					} 
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 219; else_clause();
				}
				break;
			}
			State = 222; Match(COMMAND_START);
			State = 223; Match(COMMAND_ENDIF);
			State = 224; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_clauseContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_IF() { return GetToken(YarnSpinnerParser.COMMAND_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterIf_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitIf_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_clauseContext if_clause() {
		If_clauseContext _localctx = new If_clauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(COMMAND_START);
			State = 227; Match(COMMAND_IF);
			State = 228; expression(0);
			State = 229; Match(COMMAND_END);
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 230; statement();
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_clauseContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_ELSEIF() { return GetToken(YarnSpinnerParser.COMMAND_ELSEIF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_if_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterElse_if_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitElse_if_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_clauseContext else_if_clause() {
		Else_if_clauseContext _localctx = new Else_if_clauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_else_if_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(COMMAND_START);
			State = 237; Match(COMMAND_ELSEIF);
			State = 238; expression(0);
			State = 239; Match(COMMAND_END);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 240; statement();
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_clauseContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_ELSE() { return GetToken(YarnSpinnerParser.COMMAND_ELSE, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Else_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterElse_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitElse_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_clauseContext else_clause() {
		Else_clauseContext _localctx = new Else_clauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_else_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(COMMAND_START);
			State = 247; Match(COMMAND_ELSE);
			State = 248; Match(COMMAND_END);
			State = 252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 249; statement();
					}
					} 
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_statementContext : ParserRuleContext {
		public Set_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_statement; } }
	 
		public Set_statementContext() { }
		public virtual void CopyFrom(Set_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetExpressionContext : Set_statementContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_SET() { return GetToken(YarnSpinnerParser.COMMAND_SET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public SetExpressionContext(Set_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterSetExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitSetExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetVariableToValueContext : Set_statementContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_SET() { return GetToken(YarnSpinnerParser.COMMAND_SET, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public SetVariableToValueContext(Set_statementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterSetVariableToValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitSetVariableToValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariableToValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_statementContext set_statement() {
		Set_statementContext _localctx = new Set_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_set_statement);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				_localctx = new SetVariableToValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; Match(COMMAND_START);
				State = 256; Match(COMMAND_SET);
				State = 257; variable();
				State = 258; Match(OPERATOR_ASSIGNMENT);
				State = 259; expression(0);
				State = 260; Match(COMMAND_END);
				}
				break;
			case 2:
				_localctx = new SetExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 262; Match(COMMAND_START);
				State = 263; Match(COMMAND_SET);
				State = 264; expression(0);
				State = 265; Match(COMMAND_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_statementContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_CALL() { return GetToken(YarnSpinnerParser.COMMAND_CALL, 0); }
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public Call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCall_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCall_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_statementContext call_statement() {
		Call_statementContext _localctx = new Call_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_call_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(COMMAND_START);
			State = 270; Match(COMMAND_CALL);
			State = 271; function();
			State = 272; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_statementContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public Command_formatted_textContext command_formatted_text() {
			return GetRuleContext<Command_formatted_textContext>(0);
		}
		public ITerminalNode COMMAND_TEXT_END() { return GetToken(YarnSpinnerParser.COMMAND_TEXT_END, 0); }
		public ITerminalNode TEXT_NEWLINE() { return GetToken(YarnSpinnerParser.TEXT_NEWLINE, 0); }
		public HashtagContext[] hashtag() {
			return GetRuleContexts<HashtagContext>();
		}
		public HashtagContext hashtag(int i) {
			return GetRuleContext<HashtagContext>(i);
		}
		public Command_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCommand_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCommand_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_statementContext command_statement() {
		Command_statementContext _localctx = new Command_statementContext(Context, State);
		EnterRule(_localctx, 40, RULE_command_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(COMMAND_START);
			State = 275; command_formatted_text();
			State = 276; Match(COMMAND_TEXT_END);
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==HASHTAG) {
					{
					{
					State = 277; hashtag();
					}
					}
					State = 282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 283; Match(TEXT_NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Command_formatted_textContext : ParserRuleContext {
		public ITerminalNode[] COMMAND_TEXT() { return GetTokens(YarnSpinnerParser.COMMAND_TEXT); }
		public ITerminalNode COMMAND_TEXT(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_TEXT, i);
		}
		public ITerminalNode[] COMMAND_EXPRESSION_START() { return GetTokens(YarnSpinnerParser.COMMAND_EXPRESSION_START); }
		public ITerminalNode COMMAND_EXPRESSION_START(int i) {
			return GetToken(YarnSpinnerParser.COMMAND_EXPRESSION_START, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] EXPRESSION_END() { return GetTokens(YarnSpinnerParser.EXPRESSION_END); }
		public ITerminalNode EXPRESSION_END(int i) {
			return GetToken(YarnSpinnerParser.EXPRESSION_END, i);
		}
		public Command_formatted_textContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command_formatted_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterCommand_formatted_text(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitCommand_formatted_text(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand_formatted_text(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Command_formatted_textContext command_formatted_text() {
		Command_formatted_textContext _localctx = new Command_formatted_textContext(Context, State);
		EnterRule(_localctx, 42, RULE_command_formatted_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMAND_EXPRESSION_START || _la==COMMAND_TEXT) {
				{
				State = 291;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMAND_TEXT:
					{
					State = 286; Match(COMMAND_TEXT);
					}
					break;
				case COMMAND_EXPRESSION_START:
					{
					State = 287; Match(COMMAND_EXPRESSION_START);
					State = 288; expression(0);
					State = 289; Match(EXPRESSION_END);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_option_statementContext : ParserRuleContext {
		public Shortcut_optionContext[] shortcut_option() {
			return GetRuleContexts<Shortcut_optionContext>();
		}
		public Shortcut_optionContext shortcut_option(int i) {
			return GetRuleContext<Shortcut_optionContext>(i);
		}
		public Shortcut_option_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_option_statementContext shortcut_option_statement() {
		Shortcut_option_statementContext _localctx = new Shortcut_option_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_shortcut_option_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 296; shortcut_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shortcut_optionContext : ParserRuleContext {
		public ITerminalNode SHORTCUT_ARROW() { return GetToken(YarnSpinnerParser.SHORTCUT_ARROW, 0); }
		public Line_statementContext line_statement() {
			return GetRuleContext<Line_statementContext>(0);
		}
		public ITerminalNode INDENT() { return GetToken(YarnSpinnerParser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(YarnSpinnerParser.DEDENT, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Shortcut_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortcut_option; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterShortcut_option(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitShortcut_option(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortcut_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shortcut_optionContext shortcut_option() {
		Shortcut_optionContext _localctx = new Shortcut_optionContext(Context, State);
		EnterRule(_localctx, 46, RULE_shortcut_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(SHORTCUT_ARROW);
			State = 302; line_statement();
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 303; Match(INDENT);
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INDENT) | (1L << HASHTAG) | (1L << SHORTCUT_ARROW) | (1L << COMMAND_START) | (1L << EXPRESSION_START) | (1L << TEXT_NEWLINE) | (1L << TEXT))) != 0)) {
					{
					{
					State = 304; statement();
					}
					}
					State = 309;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 310; Match(DEDENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_statementContext : ParserRuleContext {
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_DECLARE() { return GetToken(YarnSpinnerParser.COMMAND_DECLARE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode OPERATOR_ASSIGNMENT() { return GetToken(YarnSpinnerParser.OPERATOR_ASSIGNMENT, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public ITerminalNode EXPRESSION_AS() { return GetToken(YarnSpinnerParser.EXPRESSION_AS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterDeclare_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitDeclare_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_statementContext declare_statement() {
		Declare_statementContext _localctx = new Declare_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_declare_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(COMMAND_START);
			State = 314; Match(COMMAND_DECLARE);
			State = 315; variable();
			State = 316; Match(OPERATOR_ASSIGNMENT);
			State = 317; value();
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXPRESSION_AS) {
				{
				State = 318; Match(EXPRESSION_AS);
				State = 319; type();
				}
			}

			State = 322; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		public IToken destination;
		public ITerminalNode COMMAND_START() { return GetToken(YarnSpinnerParser.COMMAND_START, 0); }
		public ITerminalNode COMMAND_JUMP() { return GetToken(YarnSpinnerParser.COMMAND_JUMP, 0); }
		public ITerminalNode COMMAND_END() { return GetToken(YarnSpinnerParser.COMMAND_END, 0); }
		public ITerminalNode ID() { return GetToken(YarnSpinnerParser.ID, 0); }
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterJump_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitJump_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_jump_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(COMMAND_START);
			State = 325; Match(COMMAND_JUMP);
			State = 326; _localctx.destination = Match(ID);
			State = 327; Match(COMMAND_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IToken typename;
		public ITerminalNode TYPE_STRING() { return GetToken(YarnSpinnerParser.TYPE_STRING, 0); }
		public ITerminalNode TYPE_NUMBER() { return GetToken(YarnSpinnerParser.TYPE_NUMBER, 0); }
		public ITerminalNode TYPE_BOOL() { return GetToken(YarnSpinnerParser.TYPE_BOOL, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYarnSpinnerParserListener typedListener = listener as IYarnSpinnerParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYarnSpinnerParserVisitor<TResult> typedVisitor = visitor as IYarnSpinnerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_type);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; _localctx.typename = Match(TYPE_STRING);
				}
				break;
			case TYPE_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330; _localctx.typename = Match(TYPE_NUMBER);
				}
				break;
			case TYPE_BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331; _localctx.typename = Match(TYPE_BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'U', '\x151', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x3', '\x2', '\a', 
		'\x2', ':', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '=', '\v', '\x2', 
		'\x3', '\x2', '\x6', '\x2', '@', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x41', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x6', 
		'\x4', 'H', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 'I', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'S', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\a', '\x6', 'X', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'[', '\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', 'g', '\n', '\a', '\f', '\a', '\xE', '\a', 'j', '\v', 
		'\a', '\x3', '\a', '\x5', '\a', 'm', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', 'q', '\n', '\b', '\x3', '\b', '\a', '\b', 't', '\n', '\b', 
		'\f', '\b', '\xE', '\b', 'w', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x6', '\t', '|', '\n', '\t', '\r', '\t', '\xE', '\t', '}', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x84', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x87', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', '\xA8', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xB9', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\xBC', '\v', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\xC5', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xCC', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\xD0', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\xD3', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\a', '\x10', '\xD9', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'\xDC', '\v', '\x10', '\x3', '\x10', '\x5', '\x10', '\xDF', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xEA', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xED', '\v', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\a', '\x12', '\xF4', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xF7', 
		'\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\a', '\x13', '\xFD', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x100', 
		'\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x10E', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\x119', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x11C', '\v', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\x11F', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', 
		'\x126', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x129', '\v', '\x17', 
		'\x3', '\x18', '\x6', '\x18', '\x12C', '\n', '\x18', '\r', '\x18', '\xE', 
		'\x18', '\x12D', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\a', '\x19', '\x134', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x137', 
		'\v', '\x19', '\x3', '\x19', '\x5', '\x19', '\x13A', '\n', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x143', '\n', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x14F', '\n', '\x1C', '\x3', '\x1C', '\x2', '\x3', '\x16', '\x1D', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x2', '\t', '\x3', '\x2', '\x30', '\x32', 
		'\x3', '\x2', '.', '/', '\x3', '\x2', '\x35', '\x37', '\x3', '\x2', '\x33', 
		'\x34', '\x4', '\x2', '$', '%', '\'', '(', '\x4', '\x2', '&', '&', ')', 
		')', '\x3', '\x2', '*', ',', '\x2', '\x16B', '\x2', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x43', '\x3', '\x2', '\x2', '\x2', '\x6', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'O', '\x3', '\x2', '\x2', '\x2', '\n', 'Y', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'l', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'n', '\x3', '\x2', '\x2', '\x2', '\x10', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x88', '\x3', '\x2', '\x2', '\x2', '\x14', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xE4', '\x3', '\x2', '\x2', '\x2', '\"', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xF8', '\x3', '\x2', '\x2', '\x2', '&', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '(', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '*', '\x114', '\x3', '\x2', '\x2', '\x2', ',', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '.', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x32', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x146', '\x3', '\x2', '\x2', '\x2', '\x36', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x38', ':', '\x5', '\x4', '\x3', '\x2', '\x39', 
		'\x38', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', 
		';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', 
		'\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', 
		'\x2', '>', '@', '\x5', '\x6', '\x4', '\x2', '?', '>', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\v', '\x2', '\x2', 
		'\x44', '\x45', '\a', '\x1E', '\x2', '\x2', '\x45', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'H', '\x5', '\b', '\x5', '\x2', 'G', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\a', '\t', '\x2', '\x2', 'L', 'M', '\x5', 
		'\n', '\x6', '\x2', 'M', 'N', '\a', '\x11', '\x2', '\x2', 'N', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'P', '\a', '\b', '\x2', '\x2', 'P', 'R', '\a', 
		'\n', '\x2', '\x2', 'Q', 'S', '\a', '\f', '\x2', '\x2', 'R', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\a', '\r', '\x2', '\x2', 'U', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'X', '\x5', '\f', '\a', '\x2', 'W', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\v', 
		'\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', 
		'm', '\x5', '\xE', '\b', '\x2', ']', 'm', '\x5', '\x1E', '\x10', '\x2', 
		'^', 'm', '\x5', '&', '\x14', '\x2', '_', 'm', '\x5', '.', '\x18', '\x2', 
		'`', 'm', '\x5', '(', '\x15', '\x2', '\x61', 'm', '\x5', '*', '\x16', 
		'\x2', '\x62', 'm', '\x5', '\x32', '\x1A', '\x2', '\x63', 'm', '\x5', 
		'\x34', '\x1B', '\x2', '\x64', 'h', '\a', '\x3', '\x2', '\x2', '\x65', 
		'g', '\x5', '\f', '\a', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'g', 'j', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\a', '\x4', '\x2', 
		'\x2', 'l', '\\', '\x3', '\x2', '\x2', '\x2', 'l', ']', '\x3', '\x2', 
		'\x2', '\x2', 'l', '^', '\x3', '\x2', '\x2', '\x2', 'l', '_', '\x3', '\x2', 
		'\x2', '\x2', 'l', '`', '\x3', '\x2', '\x2', '\x2', 'l', '\x61', '\x3', 
		'\x2', '\x2', '\x2', 'l', '\x62', '\x3', '\x2', '\x2', '\x2', 'l', '\x63', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x64', '\x3', '\x2', '\x2', '\x2', 'm', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x5', '\x10', '\t', '\x2', 
		'o', 'q', '\x5', '\x14', '\v', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 'u', '\x3', '\x2', '\x2', '\x2', 
		'r', 't', '\x5', '\x12', '\n', '\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'w', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 
		'w', 'u', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\x15', '\x2', '\x2', 
		'y', '\xF', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\a', '\x18', '\x2', 
		'\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x84', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\a', 
		'\x14', '\x2', '\x2', '\x80', '\x81', '\x5', '\x16', '\f', '\x2', '\x81', 
		'\x82', '\a', '\x41', '\x2', '\x2', '\x82', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '{', '\x3', '\x2', '\x2', '\x2', '\x83', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x87', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x11', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\v', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\x1E', '\x2', '\x2', '\x8A', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\a', '\x13', '\x2', '\x2', '\x8C', '\x8D', '\a', 
		'\x46', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\x16', '\f', '\x2', '\x8E', 
		'\x8F', '\a', 'R', '\x2', '\x2', '\x8F', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\b', '\f', '\x1', '\x2', '\x91', '\x92', '\a', 
		'\x38', '\x2', '\x2', '\x92', '\x93', '\x5', '\x16', '\f', '\x2', '\x93', 
		'\x94', '\a', '\x39', '\x2', '\x2', '\x94', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\a', '\x34', '\x2', '\x2', '\x96', '\xA8', '\x5', 
		'\x16', '\f', '\r', '\x97', '\x98', '\a', '-', '\x2', '\x2', '\x98', '\xA8', 
		'\x5', '\x16', '\f', '\f', '\x99', '\x9A', '\x5', '\x1A', '\xE', '\x2', 
		'\x9A', '\x9B', '\t', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x5', '\x16', 
		'\f', '\a', '\x9C', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', 
		'\x5', '\x1A', '\xE', '\x2', '\x9E', '\x9F', '\t', '\x3', '\x2', '\x2', 
		'\x9F', '\xA0', '\x5', '\x16', '\f', '\x6', '\xA0', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA2', '\x5', '\x36', '\x1C', '\x2', '\xA2', '\xA3', 
		'\a', '\x38', '\x2', '\x2', '\xA3', '\xA4', '\x5', '\x16', '\f', '\x2', 
		'\xA4', '\xA5', '\a', '\x39', '\x2', '\x2', '\xA5', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA8', '\x5', '\x18', '\r', '\x2', '\xA7', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\xA7', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\f', '\v', 
		'\x2', '\x2', '\xAA', '\xAB', '\t', '\x4', '\x2', '\x2', '\xAB', '\xB9', 
		'\x5', '\x16', '\f', '\f', '\xAC', '\xAD', '\f', '\n', '\x2', '\x2', '\xAD', 
		'\xAE', '\t', '\x5', '\x2', '\x2', '\xAE', '\xB9', '\x5', '\x16', '\f', 
		'\v', '\xAF', '\xB0', '\f', '\t', '\x2', '\x2', '\xB0', '\xB1', '\t', 
		'\x6', '\x2', '\x2', '\xB1', '\xB9', '\x5', '\x16', '\f', '\n', '\xB2', 
		'\xB3', '\f', '\b', '\x2', '\x2', '\xB3', '\xB4', '\t', '\a', '\x2', '\x2', 
		'\xB4', '\xB9', '\x5', '\x16', '\f', '\t', '\xB5', '\xB6', '\f', '\x5', 
		'\x2', '\x2', '\xB6', '\xB7', '\t', '\b', '\x2', '\x2', '\xB7', '\xB9', 
		'\x5', '\x16', '\f', '\x6', '\xB8', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\x17', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xC5', '\a', '\x44', '\x2', '\x2', 
		'\xBE', '\xC5', '\a', ' ', '\x2', '\x2', '\xBF', '\xC5', '\a', '!', '\x2', 
		'\x2', '\xC0', '\xC5', '\x5', '\x1A', '\xE', '\x2', '\xC1', '\xC5', '\a', 
		'?', '\x2', '\x2', '\xC2', '\xC5', '\a', '\"', '\x2', '\x2', '\xC3', '\xC5', 
		'\x5', '\x1C', '\xF', '\x2', '\xC4', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xC6', '\xC7', '\a', '\x42', '\x2', '\x2', '\xC7', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\a', '@', '\x2', '\x2', '\xC9', 
		'\xCB', '\a', '\x38', '\x2', '\x2', '\xCA', '\xCC', '\x5', '\x16', '\f', 
		'\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\a', ':', '\x2', '\x2', '\xCE', '\xD0', '\x5', '\x16', '\f', 
		'\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', 
		'\x39', '\x2', '\x2', '\xD5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xDA', '\x5', ' ', '\x11', '\x2', '\xD7', '\xD9', '\x5', '\"', '\x12', 
		'\x2', '\xD8', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDF', '\x5', 
		'$', '\x13', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\a', '\x13', '\x2', '\x2', '\xE1', '\xE2', '\a', 
		'J', '\x2', '\x2', '\xE2', '\xE3', '\a', 'R', '\x2', '\x2', '\xE3', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x13', '\x2', '\x2', 
		'\xE5', '\xE6', '\a', '\x46', '\x2', '\x2', '\xE6', '\xE7', '\x5', '\x16', 
		'\f', '\x2', '\xE7', '\xEB', '\a', 'R', '\x2', '\x2', '\xE8', '\xEA', 
		'\x5', '\f', '\a', '\x2', '\xE9', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '!', 
		'\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xEF', '\a', '\x13', '\x2', '\x2', '\xEF', '\xF0', '\a', 'G', 
		'\x2', '\x2', '\xF0', '\xF1', '\x5', '\x16', '\f', '\x2', '\xF1', '\xF5', 
		'\a', 'R', '\x2', '\x2', '\xF2', '\xF4', '\x5', '\f', '\a', '\x2', '\xF3', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '#', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x13', '\x2', 
		'\x2', '\xF9', '\xFA', '\a', 'H', '\x2', '\x2', '\xFA', '\xFE', '\a', 
		'R', '\x2', '\x2', '\xFB', '\xFD', '\x5', '\f', '\a', '\x2', '\xFC', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '%', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\a', '\x13', '\x2', '\x2', 
		'\x102', '\x103', '\a', 'I', '\x2', '\x2', '\x103', '\x104', '\x5', '\x1A', 
		'\xE', '\x2', '\x104', '\x105', '\a', '#', '\x2', '\x2', '\x105', '\x106', 
		'\x5', '\x16', '\f', '\x2', '\x106', '\x107', '\a', 'R', '\x2', '\x2', 
		'\x107', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\a', 
		'\x13', '\x2', '\x2', '\x109', '\x10A', '\a', 'I', '\x2', '\x2', '\x10A', 
		'\x10B', '\x5', '\x16', '\f', '\x2', '\x10B', '\x10C', '\a', 'R', '\x2', 
		'\x2', '\x10C', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\'', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\x13', 
		'\x2', '\x2', '\x110', '\x111', '\a', 'K', '\x2', '\x2', '\x111', '\x112', 
		'\x5', '\x1C', '\xF', '\x2', '\x112', '\x113', '\a', 'R', '\x2', '\x2', 
		'\x113', ')', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\a', '\x13', 
		'\x2', '\x2', '\x115', '\x116', '\x5', ',', '\x17', '\x2', '\x116', '\x11E', 
		'\a', 'S', '\x2', '\x2', '\x117', '\x119', '\x5', '\x12', '\n', '\x2', 
		'\x118', '\x117', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11F', 
		'\a', '\x15', '\x2', '\x2', '\x11E', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x120', '\x126', '\a', 'U', '\x2', '\x2', '\x121', '\x122', 
		'\a', 'T', '\x2', '\x2', '\x122', '\x123', '\x5', '\x16', '\f', '\x2', 
		'\x123', '\x124', '\a', '\x41', '\x2', '\x2', '\x124', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x120', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x126', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12C', '\x5', 
		'\x30', '\x19', '\x2', '\x12B', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12E', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x130', '\a', '\x12', '\x2', '\x2', '\x130', 
		'\x139', '\x5', '\xE', '\b', '\x2', '\x131', '\x135', '\a', '\x3', '\x2', 
		'\x2', '\x132', '\x134', '\x5', '\f', '\a', '\x2', '\x133', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x137', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x133', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x138', '\x3', '\x2', '\x2', '\x2', '\x137', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x13A', '\a', '\x4', '\x2', '\x2', 
		'\x139', '\x131', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x31', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x13C', '\a', '\x13', '\x2', '\x2', '\x13C', '\x13D', '\a', 'L', '\x2', 
		'\x2', '\x13D', '\x13E', '\x5', '\x1A', '\xE', '\x2', '\x13E', '\x13F', 
		'\a', '#', '\x2', '\x2', '\x13F', '\x142', '\x5', '\x18', '\r', '\x2', 
		'\x140', '\x141', '\a', ';', '\x2', '\x2', '\x141', '\x143', '\x5', '\x36', 
		'\x1C', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x145', '\a', 'R', '\x2', '\x2', '\x145', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x147', '\a', '\x13', '\x2', '\x2', '\x147', 
		'\x148', '\a', 'M', '\x2', '\x2', '\x148', '\x149', '\a', '\b', '\x2', 
		'\x2', '\x149', '\x14A', '\a', 'R', '\x2', '\x2', '\x14A', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x14F', '\a', '<', '\x2', '\x2', '\x14C', 
		'\x14F', '\a', '=', '\x2', '\x2', '\x14D', '\x14F', '\a', '>', '\x2', 
		'\x2', '\x14E', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x37', '\x3', '\x2', '\x2', '\x2', '#', ';', '\x41', 'I', 'R', 
		'Y', 'h', 'l', 'p', 'u', '}', '\x83', '\x85', '\xA7', '\xB8', '\xBA', 
		'\xC4', '\xCB', '\xD1', '\xDA', '\xDE', '\xEB', '\xF5', '\xFE', '\x10D', 
		'\x11A', '\x11E', '\x125', '\x127', '\x12D', '\x135', '\x139', '\x142', 
		'\x14E',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Yarn.Compiler

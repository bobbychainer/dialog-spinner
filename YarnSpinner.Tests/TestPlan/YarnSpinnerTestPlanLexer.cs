//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/desplesda/Work/YarnSpinner/YarnSpinner.Tests/TestPlan/YarnSpinnerTestPlan.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Yarn.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class YarnSpinnerTestPlanLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, COMMENT=14, WS=15, BOOL=16, IDENTIFIER=17, 
		VARIABLE=18, NUMBER=19, TEXT=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "COMMENT", "WS", "BOOL", "IDENTIFIER", 
		"VARIABLE", "NUMBER", "TEXT"
	};


	public YarnSpinnerTestPlanLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public YarnSpinnerTestPlanLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'---'", "'#'", "'line:'", "'*'", "'option:'", "'[disabled]'", "'command:'", 
		"'stop'", "'select:'", "'set'", "'='", "'saliency:'", "'node:'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "COMMENT", "WS", "BOOL", "IDENTIFIER", "VARIABLE", "NUMBER", 
		"TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YarnSpinnerTestPlan.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YarnSpinnerTestPlanLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,169,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,
		1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
		9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,5,13,121,8,13,10,13,12,13,124,
		9,13,1,13,1,13,1,14,4,14,129,8,14,11,14,12,14,130,1,14,1,14,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,144,8,15,1,16,1,16,5,16,148,8,
		16,10,16,12,16,151,9,16,1,17,1,17,1,17,1,18,4,18,157,8,18,11,18,12,18,
		158,1,19,1,19,5,19,163,8,19,10,19,12,19,166,9,19,1,19,1,19,1,164,0,20,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,1,0,5,2,0,10,10,13,13,3,0,9,10,13,
		13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
		174,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,45,1,0,0,
		0,5,47,1,0,0,0,7,53,1,0,0,0,9,55,1,0,0,0,11,63,1,0,0,0,13,74,1,0,0,0,15,
		83,1,0,0,0,17,88,1,0,0,0,19,96,1,0,0,0,21,100,1,0,0,0,23,102,1,0,0,0,25,
		112,1,0,0,0,27,118,1,0,0,0,29,128,1,0,0,0,31,143,1,0,0,0,33,145,1,0,0,
		0,35,152,1,0,0,0,37,156,1,0,0,0,39,160,1,0,0,0,41,42,5,45,0,0,42,43,5,
		45,0,0,43,44,5,45,0,0,44,2,1,0,0,0,45,46,5,35,0,0,46,4,1,0,0,0,47,48,5,
		108,0,0,48,49,5,105,0,0,49,50,5,110,0,0,50,51,5,101,0,0,51,52,5,58,0,0,
		52,6,1,0,0,0,53,54,5,42,0,0,54,8,1,0,0,0,55,56,5,111,0,0,56,57,5,112,0,
		0,57,58,5,116,0,0,58,59,5,105,0,0,59,60,5,111,0,0,60,61,5,110,0,0,61,62,
		5,58,0,0,62,10,1,0,0,0,63,64,5,91,0,0,64,65,5,100,0,0,65,66,5,105,0,0,
		66,67,5,115,0,0,67,68,5,97,0,0,68,69,5,98,0,0,69,70,5,108,0,0,70,71,5,
		101,0,0,71,72,5,100,0,0,72,73,5,93,0,0,73,12,1,0,0,0,74,75,5,99,0,0,75,
		76,5,111,0,0,76,77,5,109,0,0,77,78,5,109,0,0,78,79,5,97,0,0,79,80,5,110,
		0,0,80,81,5,100,0,0,81,82,5,58,0,0,82,14,1,0,0,0,83,84,5,115,0,0,84,85,
		5,116,0,0,85,86,5,111,0,0,86,87,5,112,0,0,87,16,1,0,0,0,88,89,5,115,0,
		0,89,90,5,101,0,0,90,91,5,108,0,0,91,92,5,101,0,0,92,93,5,99,0,0,93,94,
		5,116,0,0,94,95,5,58,0,0,95,18,1,0,0,0,96,97,5,115,0,0,97,98,5,101,0,0,
		98,99,5,116,0,0,99,20,1,0,0,0,100,101,5,61,0,0,101,22,1,0,0,0,102,103,
		5,115,0,0,103,104,5,97,0,0,104,105,5,108,0,0,105,106,5,105,0,0,106,107,
		5,101,0,0,107,108,5,110,0,0,108,109,5,99,0,0,109,110,5,121,0,0,110,111,
		5,58,0,0,111,24,1,0,0,0,112,113,5,110,0,0,113,114,5,111,0,0,114,115,5,
		100,0,0,115,116,5,101,0,0,116,117,5,58,0,0,117,26,1,0,0,0,118,122,5,35,
		0,0,119,121,8,0,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,
		123,1,0,0,0,123,125,1,0,0,0,124,122,1,0,0,0,125,126,6,13,0,0,126,28,1,
		0,0,0,127,129,7,1,0,0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,
		130,131,1,0,0,0,131,132,1,0,0,0,132,133,6,14,0,0,133,30,1,0,0,0,134,135,
		5,116,0,0,135,136,5,114,0,0,136,137,5,117,0,0,137,144,5,101,0,0,138,139,
		5,102,0,0,139,140,5,97,0,0,140,141,5,108,0,0,141,142,5,115,0,0,142,144,
		5,101,0,0,143,134,1,0,0,0,143,138,1,0,0,0,144,32,1,0,0,0,145,149,7,2,0,
		0,146,148,7,3,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,
		150,1,0,0,0,150,34,1,0,0,0,151,149,1,0,0,0,152,153,5,36,0,0,153,154,3,
		33,16,0,154,36,1,0,0,0,155,157,7,4,0,0,156,155,1,0,0,0,157,158,1,0,0,0,
		158,156,1,0,0,0,158,159,1,0,0,0,159,38,1,0,0,0,160,164,5,96,0,0,161,163,
		9,0,0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,165,1,0,0,0,164,162,1,0,0,
		0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,5,96,0,0,168,40,1,0,0,0,7,0,
		122,130,143,149,158,164,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Yarn.Compiler

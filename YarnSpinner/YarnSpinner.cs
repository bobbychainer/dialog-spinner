// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yarn_spinner.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yarn {

  /// <summary>Holder for reflection information generated from yarn_spinner.proto</summary>
  public static partial class YarnSpinnerReflection {

    #region Descriptor
    /// <summary>File descriptor for yarn_spinner.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YarnSpinnerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJ5YXJuX3NwaW5uZXIucHJvdG8SBFlhcm4i1QIKB1Byb2dyYW0SDAoEbmFt",
            "ZRgBIAEoCRInCgVub2RlcxgCIAMoCzIYLllhcm4uUHJvZ3JhbS5Ob2Rlc0Vu",
            "dHJ5EjQKDHN0cmluZ190YWJsZRgDIAMoCzIeLllhcm4uUHJvZ3JhbS5TdHJp",
            "bmdUYWJsZUVudHJ5Ei4KCWxpbmVfaW5mbxgEIAMoCzIbLllhcm4uUHJvZ3Jh",
            "bS5MaW5lSW5mb0VudHJ5GjgKCk5vZGVzRW50cnkSCwoDa2V5GAEgASgJEhkK",
            "BXZhbHVlGAIgASgLMgouWWFybi5Ob2RlOgI4ARoyChBTdHJpbmdUYWJsZUVu",
            "dHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaPwoNTGluZUlu",
            "Zm9FbnRyeRILCgNrZXkYASABKAkSHQoFdmFsdWUYAiABKAsyDi5ZYXJuLkxp",
            "bmVJbmZvOgI4ASIyCghMaW5lSW5mbxITCgtsaW5lX251bWJlchgBIAEoBRIR",
            "Cglub2RlX25hbWUYAiABKAkivgEKBE5vZGUSDAoEbmFtZRgBIAEoCRInCgxp",
            "bnN0cnVjdGlvbnMYAiADKAsyES5ZYXJuLkluc3RydWN0aW9uEiYKBmxhYmVs",
            "cxgDIAMoCzIWLllhcm4uTm9kZS5MYWJlbHNFbnRyeRIMCgR0YWdzGAQgAygJ",
            "EhoKEnNvdXJjZVRleHRTdHJpbmdJRBgFIAEoCRotCgtMYWJlbHNFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAU6AjgBIvACCgtJbnN0cnVjdGlv",
            "bhIoCgZvcGNvZGUYASABKA4yGC5ZYXJuLkluc3RydWN0aW9uLk9wQ29kZRIf",
            "CghvcGVyYW5kcxgCIAMoCzINLllhcm4uT3BlcmFuZCKVAgoGT3BDb2RlEgkK",
            "BUxBQkVMEAASCwoHSlVNUF9UTxABEggKBEpVTVAQAhIMCghSVU5fTElORRAD",
            "Eg8KC1JVTl9DT01NQU5EEAQSDgoKQUREX09QVElPThAFEhAKDFNIT1dfT1BU",
            "SU9OUxAGEg8KC1BVU0hfU1RSSU5HEAcSDwoLUFVTSF9OVU1CRVIQCBINCglQ",
            "VVNIX0JPT0wQCRINCglQVVNIX05VTEwQChIRCg1KVU1QX0lGX0ZBTFNFEAsS",
            "BwoDUE9QEAwSDQoJQ0FMTF9GVU5DEA0SEQoNUFVTSF9WQVJJQUJMRRAOEhIK",
            "DlNUT1JFX1ZBUklBQkxFEA8SCAoEU1RPUBAQEgwKCFJVTl9OT0RFEBEiWAoH",
            "T3BlcmFuZBIWCgxzdHJpbmdfdmFsdWUYAiABKAlIABIUCgpib29sX3ZhbHVl",
            "GAMgASgISAASFgoMbnVtYmVyX3ZhbHVlGAQgASgCSABCBwoFdmFsdWViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yarn.Program), global::Yarn.Program.Parser, new[]{ "Name", "Nodes", "StringTable", "LineInfo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yarn.LineInfo), global::Yarn.LineInfo.Parser, new[]{ "LineNumber", "NodeName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yarn.Node), global::Yarn.Node.Parser, new[]{ "Name", "Instructions", "Labels", "Tags", "SourceTextStringID" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yarn.Instruction), global::Yarn.Instruction.Parser, new[]{ "Opcode", "Operands" }, null, new[]{ typeof(global::Yarn.Instruction.Types.OpCode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yarn.Operand), global::Yarn.Operand.Parser, new[]{ "StringValue", "BoolValue", "NumberValue" }, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Program : pb::IMessage<Program> {
    private static readonly pb::MessageParser<Program> _parser = new pb::MessageParser<Program>(() => new Program());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Program> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yarn.YarnSpinnerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Program() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Program(Program other) : this() {
      name_ = other.name_;
      nodes_ = other.nodes_.Clone();
      stringTable_ = other.stringTable_.Clone();
      lineInfo_ = other.lineInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Program Clone() {
      return new Program(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Yarn.Node>.Codec _map_nodes_codec
        = new pbc::MapField<string, global::Yarn.Node>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Yarn.Node.Parser), 18);
    private readonly pbc::MapField<string, global::Yarn.Node> nodes_ = new pbc::MapField<string, global::Yarn.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Yarn.Node> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "string_table" field.</summary>
    public const int StringTableFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_stringTable_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> stringTable_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> StringTable {
      get { return stringTable_; }
    }

    /// <summary>Field number for the "line_info" field.</summary>
    public const int LineInfoFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Yarn.LineInfo>.Codec _map_lineInfo_codec
        = new pbc::MapField<string, global::Yarn.LineInfo>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Yarn.LineInfo.Parser), 34);
    private readonly pbc::MapField<string, global::Yarn.LineInfo> lineInfo_ = new pbc::MapField<string, global::Yarn.LineInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Yarn.LineInfo> LineInfo {
      get { return lineInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Program);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Program other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!Nodes.Equals(other.Nodes)) return false;
      if (!StringTable.Equals(other.StringTable)) return false;
      if (!LineInfo.Equals(other.LineInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= Nodes.GetHashCode();
      hash ^= StringTable.GetHashCode();
      hash ^= LineInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      nodes_.WriteTo(output, _map_nodes_codec);
      stringTable_.WriteTo(output, _map_stringTable_codec);
      lineInfo_.WriteTo(output, _map_lineInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += nodes_.CalculateSize(_map_nodes_codec);
      size += stringTable_.CalculateSize(_map_stringTable_codec);
      size += lineInfo_.CalculateSize(_map_lineInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Program other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      nodes_.Add(other.nodes_);
      stringTable_.Add(other.stringTable_);
      lineInfo_.Add(other.lineInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            nodes_.AddEntriesFrom(input, _map_nodes_codec);
            break;
          }
          case 26: {
            stringTable_.AddEntriesFrom(input, _map_stringTable_codec);
            break;
          }
          case 34: {
            lineInfo_.AddEntriesFrom(input, _map_lineInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LineInfo : pb::IMessage<LineInfo> {
    private static readonly pb::MessageParser<LineInfo> _parser = new pb::MessageParser<LineInfo>(() => new LineInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LineInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yarn.YarnSpinnerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineInfo(LineInfo other) : this() {
      lineNumber_ = other.lineNumber_;
      nodeName_ = other.nodeName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineInfo Clone() {
      return new LineInfo(this);
    }

    /// <summary>Field number for the "line_number" field.</summary>
    public const int LineNumberFieldNumber = 1;
    private int lineNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LineNumber {
      get { return lineNumber_; }
      set {
        lineNumber_ = value;
      }
    }

    /// <summary>Field number for the "node_name" field.</summary>
    public const int NodeNameFieldNumber = 2;
    private string nodeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeName {
      get { return nodeName_; }
      set {
        nodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LineInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LineInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineNumber != other.LineNumber) return false;
      if (NodeName != other.NodeName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LineNumber != 0) hash ^= LineNumber.GetHashCode();
      if (NodeName.Length != 0) hash ^= NodeName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LineNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LineNumber);
      }
      if (NodeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NodeName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LineNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineNumber);
      }
      if (NodeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LineInfo other) {
      if (other == null) {
        return;
      }
      if (other.LineNumber != 0) {
        LineNumber = other.LineNumber;
      }
      if (other.NodeName.Length != 0) {
        NodeName = other.NodeName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineNumber = input.ReadInt32();
            break;
          }
          case 18: {
            NodeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yarn.YarnSpinnerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      name_ = other.name_;
      instructions_ = other.instructions_.Clone();
      labels_ = other.labels_.Clone();
      tags_ = other.tags_.Clone();
      sourceTextStringID_ = other.sourceTextStringID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instructions" field.</summary>
    public const int InstructionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Yarn.Instruction> _repeated_instructions_codec
        = pb::FieldCodec.ForMessage(18, global::Yarn.Instruction.Parser);
    private readonly pbc::RepeatedField<global::Yarn.Instruction> instructions_ = new pbc::RepeatedField<global::Yarn.Instruction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yarn.Instruction> Instructions {
      get { return instructions_; }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 3;
    private static readonly pbc::MapField<string, int>.Codec _map_labels_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 26);
    private readonly pbc::MapField<string, int> labels_ = new pbc::MapField<string, int>();
    /// <summary>
    /// Offsets to instructions, relative to this node's position in the program
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "sourceTextStringID" field.</summary>
    public const int SourceTextStringIDFieldNumber = 5;
    private string sourceTextStringID_ = "";
    /// <summary>
    /// the entry in the program's string table that contains
    /// the original text of this node; null if this is not available	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceTextStringID {
      get { return sourceTextStringID_; }
      set {
        sourceTextStringID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!instructions_.Equals(other.instructions_)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (SourceTextStringID != other.SourceTextStringID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= instructions_.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (SourceTextStringID.Length != 0) hash ^= SourceTextStringID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      instructions_.WriteTo(output, _repeated_instructions_codec);
      labels_.WriteTo(output, _map_labels_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      if (SourceTextStringID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SourceTextStringID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += instructions_.CalculateSize(_repeated_instructions_codec);
      size += labels_.CalculateSize(_map_labels_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (SourceTextStringID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceTextStringID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      instructions_.Add(other.instructions_);
      labels_.Add(other.labels_);
      tags_.Add(other.tags_);
      if (other.SourceTextStringID.Length != 0) {
        SourceTextStringID = other.SourceTextStringID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            instructions_.AddEntriesFrom(input, _repeated_instructions_codec);
            break;
          }
          case 26: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 42: {
            SourceTextStringID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Instruction : pb::IMessage<Instruction> {
    private static readonly pb::MessageParser<Instruction> _parser = new pb::MessageParser<Instruction>(() => new Instruction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Instruction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yarn.YarnSpinnerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instruction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instruction(Instruction other) : this() {
      opcode_ = other.opcode_;
      operands_ = other.operands_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Instruction Clone() {
      return new Instruction(this);
    }

    /// <summary>Field number for the "opcode" field.</summary>
    public const int OpcodeFieldNumber = 1;
    private global::Yarn.Instruction.Types.OpCode opcode_ = global::Yarn.Instruction.Types.OpCode.Label;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yarn.Instruction.Types.OpCode Opcode {
      get { return opcode_; }
      set {
        opcode_ = value;
      }
    }

    /// <summary>Field number for the "operands" field.</summary>
    public const int OperandsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Yarn.Operand> _repeated_operands_codec
        = pb::FieldCodec.ForMessage(18, global::Yarn.Operand.Parser);
    private readonly pbc::RepeatedField<global::Yarn.Operand> operands_ = new pbc::RepeatedField<global::Yarn.Operand>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yarn.Operand> Operands {
      get { return operands_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Instruction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Instruction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Opcode != other.Opcode) return false;
      if(!operands_.Equals(other.operands_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Opcode != global::Yarn.Instruction.Types.OpCode.Label) hash ^= Opcode.GetHashCode();
      hash ^= operands_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opcode != global::Yarn.Instruction.Types.OpCode.Label) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Opcode);
      }
      operands_.WriteTo(output, _repeated_operands_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opcode != global::Yarn.Instruction.Types.OpCode.Label) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opcode);
      }
      size += operands_.CalculateSize(_repeated_operands_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Instruction other) {
      if (other == null) {
        return;
      }
      if (other.Opcode != global::Yarn.Instruction.Types.OpCode.Label) {
        Opcode = other.Opcode;
      }
      operands_.Add(other.operands_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Opcode = (global::Yarn.Instruction.Types.OpCode) input.ReadEnum();
            break;
          }
          case 18: {
            operands_.AddEntriesFrom(input, _repeated_operands_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Instruction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OpCode {
        /// <summary>
        //// opA = string: label name
        /// </summary>
        [pbr::OriginalName("LABEL")] Label = 0,
        /// <summary>
        //// opA = string: label name
        /// </summary>
        [pbr::OriginalName("JUMP_TO")] JumpTo = 1,
        /// <summary>
        //// peek string from stack and jump to that label
        /// </summary>
        [pbr::OriginalName("JUMP")] Jump = 2,
        /// <summary>
        //// opA = int: string number
        /// </summary>
        [pbr::OriginalName("RUN_LINE")] RunLine = 3,
        /// <summary>
        //// opA = string: command text
        /// </summary>
        [pbr::OriginalName("RUN_COMMAND")] RunCommand = 4,
        /// <summary>
        //// opA = int: string number for option to add
        /// </summary>
        [pbr::OriginalName("ADD_OPTION")] AddOption = 5,
        /// <summary>
        //// present the current list of options, then clear the list; most recently selected option will be on the top of the stack
        /// </summary>
        [pbr::OriginalName("SHOW_OPTIONS")] ShowOptions = 6,
        /// <summary>
        //// opA = int: string number in table; push string to stack
        /// </summary>
        [pbr::OriginalName("PUSH_STRING")] PushString = 7,
        /// <summary>
        //// opA = float: number to push to stack
        /// </summary>
        [pbr::OriginalName("PUSH_NUMBER")] PushNumber = 8,
        /// <summary>
        //// opA = int (0 or 1): bool to push to stack
        /// </summary>
        [pbr::OriginalName("PUSH_BOOL")] PushBool = 9,
        /// <summary>
        //// pushes a null value onto the stack
        /// </summary>
        [pbr::OriginalName("PUSH_NULL")] PushNull = 10,
        /// <summary>
        //// opA = string: label name if top of stack is not null, zero or false, jumps to that label
        /// </summary>
        [pbr::OriginalName("JUMP_IF_FALSE")] JumpIfFalse = 11,
        /// <summary>
        //// discard top of stack
        /// </summary>
        [pbr::OriginalName("POP")] Pop = 12,
        /// <summary>
        //// opA = string; looks up function, pops as many arguments as needed, result is pushed to stack
        /// </summary>
        [pbr::OriginalName("CALL_FUNC")] CallFunc = 13,
        /// <summary>
        //// opA = name of variable to get value of and push to stack
        /// </summary>
        [pbr::OriginalName("PUSH_VARIABLE")] PushVariable = 14,
        /// <summary>
        //// opA = name of variable to store top of stack in
        /// </summary>
        [pbr::OriginalName("STORE_VARIABLE")] StoreVariable = 15,
        /// <summary>
        //// stops execution
        /// </summary>
        [pbr::OriginalName("STOP")] Stop = 16,
        /// <summary>
        //// run the node whose name is at the top of the stack
        /// </summary>
        [pbr::OriginalName("RUN_NODE")] RunNode = 17,
      }

    }
    #endregion

  }

  public sealed partial class Operand : pb::IMessage<Operand> {
    private static readonly pb::MessageParser<Operand> _parser = new pb::MessageParser<Operand>(() => new Operand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Operand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yarn.YarnSpinnerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operand(Operand other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.NumberValue:
          NumberValue = other.NumberValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operand Clone() {
      return new Operand(this);
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "number_value" field.</summary>
    public const int NumberValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NumberValue {
      get { return valueCase_ == ValueOneofCase.NumberValue ? (float) value_ : 0F; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.NumberValue;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      StringValue = 2,
      BoolValue = 3,
      NumberValue = 4,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Operand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Operand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StringValue != other.StringValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NumberValue, other.NumberValue)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.NumberValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NumberValue);
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(18);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(24);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.NumberValue) {
        output.WriteRawTag(37);
        output.WriteFloat(NumberValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.NumberValue) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Operand other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.NumberValue:
          NumberValue = other.NumberValue;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            StringValue = input.ReadString();
            break;
          }
          case 24: {
            BoolValue = input.ReadBool();
            break;
          }
          case 37: {
            NumberValue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
